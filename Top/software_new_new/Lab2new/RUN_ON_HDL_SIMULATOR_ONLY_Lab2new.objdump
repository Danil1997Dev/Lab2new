
RUN_ON_HDL_SIMULATOR_ONLY_Lab2new.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_Lab2new.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000574c memsz 0x0000574c flags r-x
    LOAD off    0x0000676c vaddr 0x0000576c paddr 0x000071d8 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008c44 vaddr 0x00008c44 paddr 0x00008c44 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000054c0  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000007c  000056f0  000056f0  000066f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  0000576c  000071d8  0000676c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00008c44  00008c44  00008c44  2**2
                  ALLOC, SMALL_DATA
  6 .mem          00000000  00008d98  00008d98  000081d8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000009d0  00000000  00000000  00008200  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00015aa9  00000000  00000000  00008bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005d5b  00000000  00000000  0001e679  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000663e  00000000  00000000  000243d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001500  00000000  00000000  0002aa14  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000026a7  00000000  00000000  0002bf14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004929  00000000  00000000  0002e5bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000660  00000000  00000000  00032ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000358c6  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000358c9  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000358cc  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000358cd  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  000358ce  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  000358d7  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  000358e0  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  000358e9  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001d  00000000  00000000  000358ef  2**0
                  CONTENTS, READONLY
 25 .jdi          0000438b  00000000  00000000  0003590c  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003c982  00000000  00000000  00039c97  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
000056f0 l    d  .rodata	00000000 .rodata
0000576c l    d  .rwdata	00000000 .rwdata
00008c44 l    d  .bss	00000000 .bss
00008d98 l    d  .mem	00000000 .mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab2new_bsp//obj/HAL/src/crt0.o
00000248 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sem.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00000484 l     F .text	00000008 __fp_unlock
00000498 l     F .text	0000019c __sinit.part.1
00000634 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000576c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00003124 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
00003260 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000328c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00003380 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00003468 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003554 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00003720 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000071c8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003994 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00003ad0 l     F .text	00000034 alt_dev_reg
00006140 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00003dc0 l     F .text	0000020c altera_avalon_jtag_uart_irq
00003fcc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00004604 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00004844 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00004be4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00004d44 l     F .text	0000003c alt_get_errno
00004d80 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008c6c g     O .bss	00000004 alt_instruction_exception_handler
00002ef4 g     F .text	00000054 _isatty_r
0000366c g     F .text	0000006c alt_main
00000318 g     F .text	000000c0 _puts_r
00008c98 g     O .bss	00000100 alt_irq
00002c1c g     F .text	00000060 _lseek_r
000071d8 g       *ABS*	00000000 __flash_rwdata_start
00008d98 g       *ABS*	00000000 __alt_heap_start
000021d0 g     F .text	0000005c __sseek
000007e4 g     F .text	00000010 __sinit
0000063c g     F .text	00000078 __sfmoreglue
000036fc g     F .text	00000024 __malloc_unlock
000056f0 g     O .rodata	00000040 divisors
000018bc g     F .text	0000015c memmove
000007cc g     F .text	00000018 _cleanup
0000516c g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002e98 g     F .text	0000005c _fstat_r
00008c50 g     O .bss	00000004 errno
0000214c g     F .text	00000008 __seofread
00008c58 g     O .bss	00000004 alt_argv
0000f1a0 g       *ABS*	00000000 _gp
00005fc0 g     O .rwdata	00000180 alt_fd_list
00005190 g     F .text	00000090 alt_find_dev
00001774 g     F .text	00000148 memcpy
0000048c g     F .text	0000000c _cleanup_r
00004cc8 g     F .text	0000007c alt_io_redirect
000003d8 g     F .text	00000014 puts
000053ec g     F .text	0000009c alt_exception_cause_generated_bad_addr
000041c4 g     F .text	0000021c altera_avalon_jtag_uart_read
00003040 g     F .text	00000064 .hidden __udivsi3
000033bc g     F .text	000000ac isatty
00008c4c g     O .bss	00000004 __malloc_top_pad
00000834 g     F .text	000004c8 __sfvwrite_r
000020a4 g     F .text	00000054 _sbrk_r
00002e38 g     F .text	00000060 _read_r
00003238 g     F .text	00000028 alt_dcache_flush
000071c0 g     O .rwdata	00000004 alt_max_fd
0000243c g     F .text	000000f0 _fclose_r
000027b8 g     F .text	00000030 fflush
00008c48 g     O .bss	00000004 __malloc_max_sbrked_mem
00003590 g     F .text	000000dc lseek
000071a0 g     O .rwdata	00000004 _global_impure_ptr
00001b40 g     F .text	00000564 _realloc_r
00008d98 g       *ABS*	00000000 __bss_end
00004af4 g     F .text	000000f0 alt_iic_isr_register
00005064 g     F .text	00000108 alt_tick
00000804 g     F .text	00000018 __fp_lock_all
00004aa8 g     F .text	0000004c alt_ic_irq_enabled
00000000 g       *ABS*	00000000 __alt_mem_mem
00004fc8 g     F .text	0000009c alt_alarm_stop
00008c60 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00005f98 g     O .rwdata	00000028 alt_dev_null
00004824 g     F .text	00000020 alt_dcache_flush_all
000071d8 g       *ABS*	00000000 __ram_rwdata_end
000071b8 g     O .rwdata	00000008 alt_dev_list
000039d0 g     F .text	00000100 write
0000576c g       *ABS*	00000000 __ram_rodata_end
000032c8 g     F .text	000000b8 fstat
000030a4 g     F .text	00000058 .hidden __umodsi3
00008d98 g       *ABS*	00000000 end
00003d00 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
0000467c g     F .text	0000007c alt_avalon_timer_sc_init
000043e0 g     F .text	00000224 altera_avalon_jtag_uart_write
000007f4 g     F .text	00000004 __sfp_lock_acquire
00001690 g     F .text	000000e4 memchr
0000290c g     F .text	00000310 _free_r
0000553c g     F .text	00000180 __call_exitprocs
000071a8 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000001c _start
00008c64 g     O .bss	00000004 _alt_tick_rate
00008c68 g     O .bss	00000004 _alt_nticks
0000375c g     F .text	00000104 read
00003b3c g     F .text	00000060 alt_sys_init
0000406c g     F .text	00000068 altera_avalon_jtag_uart_close
000030fc g     F .text	00000028 .hidden __mulsi3
0000576c g       *ABS*	00000000 __ram_rwdata_start
000056f0 g       *ABS*	00000000 __ram_rodata_start
00008c70 g     O .bss	00000028 __malloc_current_mallinfo
00003b9c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00005328 g     F .text	000000c4 alt_get_fd
000023e8 g     F .text	00000054 _close_r
000054c0 g     F .text	0000007c memcmp
00003c5c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00008d98 g       *ABS*	00000000 __alt_stack_base
00003cac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002294 g     F .text	00000154 __swsetup_r
000006b4 g     F .text	00000118 __sfp
00005b90 g     O .rwdata	00000408 __malloc_av_
00000800 g     F .text	00000004 __sinit_lock_release
000020f8 g     F .text	00000054 __sread
00005220 g     F .text	00000108 alt_find_file
00004880 g     F .text	000000a4 alt_dev_llist_insert
000036d8 g     F .text	00000024 __malloc_lock
000038e4 g     F .text	000000b0 sbrk
0000275c g     F .text	0000005c _fflush_r
00008c44 g       *ABS*	00000000 __bss_start
00001a18 g     F .text	00000128 memset
0000024c g     F .text	000000cc main
00008c5c g     O .bss	00000004 alt_envp
00008c44 g     O .bss	00000004 __malloc_max_total_mem
00003bfc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000222c g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
0000252c g     F .text	00000014 fclose
00000e84 g     F .text	0000080c _malloc_r
000071c4 g     O .rwdata	00000004 alt_errno
00000cfc g     F .text	000000c4 _fwalk
00002f48 g     F .text	00000084 .hidden __divsi3
000027e8 g     F .text	00000124 _malloc_trim_r
000056f0 g       *ABS*	00000000 __flash_rodata_start
00003b04 g     F .text	00000038 alt_irq_init
00003860 g     F .text	00000084 alt_release_fd
00002234 g     F .text	00000060 _write_r
000071a4 g     O .rwdata	00000004 _impure_ptr
00008c54 g     O .bss	00000004 alt_argc
00002540 g     F .text	0000021c __sflush_r
00000020 g       .exceptions	00000000 alt_irq_entry
0000081c g     F .text	00000018 __fp_unlock_all
000071b0 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004944 g     F .text	00000050 alt_ic_isr_register
000071d8 g       *ABS*	00000000 _edata
00008d98 g       *ABS*	00000000 _end
00000230 g       *ABS*	00000000 __ram_exceptions_end
000040d4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00004a1c g     F .text	0000008c alt_ic_irq_disable
00002154 g     F .text	0000007c __swrite
000071ac g     O .rwdata	00000004 __malloc_trim_threshold
00005488 g     F .text	00000038 exit
00000dc0 g     F .text	000000c4 _fwalk_reent
00002fcc g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000007f8 g     F .text	00000004 __sfp_lock_release
000056bc g     F .text	00000034 _exit
000046f8 g     F .text	0000012c alt_alarm_start
00002c7c g     F .text	000001bc __smakebuf_r
000003ec g     F .text	00000098 strlen
00004e6c g     F .text	0000015c open
00004924 g     F .text	00000020 alt_icache_flush_all
000071cc g     O .rwdata	00000004 alt_priority_mask
00004994 g     F .text	00000088 alt_ic_irq_enable
000071d0 g     O .rwdata	00000008 alt_alarm_list
00003160 g     F .text	000000d8 close
000034d0 g     F .text	00000084 alt_load
000007fc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10a32604 	addi	r2,r2,-29544
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10a32604 	addi	r2,r2,-29544
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6b317 	ldw	r2,-25908(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6b317 	ldw	r2,-25908(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     23c:	d6bc6814 	ori	gp,gp,61856
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     240:	00034d00 	call	34d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     244:	000366c0 	call	366c <alt_main>

00000248 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     248:	003fff06 	br	248 <__alt_data_end+0xfffe0248>

0000024c <main>:
		100

};

int main()
{ 
     24c:	defffa04 	addi	sp,sp,-24
     250:	dfc00515 	stw	ra,20(sp)
     254:	df000415 	stw	fp,16(sp)
     258:	df000404 	addi	fp,sp,16
	alt_u32 tmp;
	alt_u32 divisor;


	//program divisors
	p = (alt_u32*) SEM_RAM_SLAVE_BASE;
     25c:	008000b4 	movhi	r2,2
     260:	10840004 	addi	r2,r2,4096
     264:	e0bffe15 	stw	r2,-8(fp)
	for (i=0; i<TIME_STATES; i++)
     268:	e03ffc15 	stw	zero,-16(fp)
     26c:	00001a06 	br	2d8 <main+0x8c>
	{
		tmp = 0;
     270:	e03fff15 	stw	zero,-4(fp)
		for (j=TIME_STATES; j>0; j--)
     274:	00800404 	movi	r2,16
     278:	e0bffd15 	stw	r2,-12(fp)
     27c:	00000b06 	br	2ac <main+0x60>
		{
			tmp = divisors[i];
     280:	00800034 	movhi	r2,0
     284:	1095bc04 	addi	r2,r2,22256
     288:	e0fffc17 	ldw	r3,-16(fp)
     28c:	18c7883a 	add	r3,r3,r3
     290:	18c7883a 	add	r3,r3,r3
     294:	10c5883a 	add	r2,r2,r3
     298:	10800017 	ldw	r2,0(r2)
     29c:	e0bfff15 	stw	r2,-4(fp)
	//program divisors
	p = (alt_u32*) SEM_RAM_SLAVE_BASE;
	for (i=0; i<TIME_STATES; i++)
	{
		tmp = 0;
		for (j=TIME_STATES; j>0; j--)
     2a0:	e0bffd17 	ldw	r2,-12(fp)
     2a4:	10bfffc4 	addi	r2,r2,-1
     2a8:	e0bffd15 	stw	r2,-12(fp)
     2ac:	e0bffd17 	ldw	r2,-12(fp)
     2b0:	00bff316 	blt	zero,r2,280 <__alt_data_end+0xfffe0280>
		{
			tmp = divisors[i];
		} 
		*p=tmp;
     2b4:	e0bffe17 	ldw	r2,-8(fp)
     2b8:	e0ffff17 	ldw	r3,-4(fp)
     2bc:	10c00015 	stw	r3,0(r2)
		p++;
     2c0:	e0bffe17 	ldw	r2,-8(fp)
     2c4:	10800104 	addi	r2,r2,4
     2c8:	e0bffe15 	stw	r2,-8(fp)
	alt_u32 divisor;


	//program divisors
	p = (alt_u32*) SEM_RAM_SLAVE_BASE;
	for (i=0; i<TIME_STATES; i++)
     2cc:	e0bffc17 	ldw	r2,-16(fp)
     2d0:	10800044 	addi	r2,r2,1
     2d4:	e0bffc15 	stw	r2,-16(fp)
     2d8:	e0bffc17 	ldw	r2,-16(fp)
     2dc:	10800410 	cmplti	r2,r2,16
     2e0:	103fe31e 	bne	r2,zero,270 <__alt_data_end+0xfffe0270>
		*p=tmp;
		p++;
	}
	//since we use pointers (cached data access) to write divisor RAM, 
	//and not direct i/o access with IOWR, we need to flush cache
	alt_dcache_flush();
     2e4:	00032380 	call	3238 <alt_dcache_flush>

	//select timeset and run semafor
	IOWR_ALTERA_AVALON_SEM_DIVSET(SEM_CTL_SLAVE_BASE, 0x00);
     2e8:	0007883a 	mov	r3,zero
     2ec:	008000b4 	movhi	r2,2
     2f0:	10841904 	addi	r2,r2,4196
     2f4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_SEM_CTL(SEM_CTL_SLAVE_BASE, 0x01);
     2f8:	00c00044 	movi	r3,1
     2fc:	008000b4 	movhi	r2,2
     300:	10841804 	addi	r2,r2,4192
     304:	10c00035 	stwio	r3,0(r2)

	printf("Ready\n");
     308:	01000034 	movhi	r4,0
     30c:	2115cc04 	addi	r4,r4,22320
     310:	00003d80 	call	3d8 <puts>

	while (1)
	{
		;
	}
     314:	003fff06 	br	314 <__alt_data_end+0xfffe0314>

00000318 <_puts_r>:
     318:	defff604 	addi	sp,sp,-40
     31c:	dc000715 	stw	r16,28(sp)
     320:	2021883a 	mov	r16,r4
     324:	2809883a 	mov	r4,r5
     328:	dc400815 	stw	r17,32(sp)
     32c:	dfc00915 	stw	ra,36(sp)
     330:	2823883a 	mov	r17,r5
     334:	00003ec0 	call	3ec <strlen>
     338:	10c00044 	addi	r3,r2,1
     33c:	d8800115 	stw	r2,4(sp)
     340:	00800034 	movhi	r2,0
     344:	1095ce04 	addi	r2,r2,22328
     348:	d8800215 	stw	r2,8(sp)
     34c:	00800044 	movi	r2,1
     350:	d8800315 	stw	r2,12(sp)
     354:	00800084 	movi	r2,2
     358:	dc400015 	stw	r17,0(sp)
     35c:	d8c00615 	stw	r3,24(sp)
     360:	dec00415 	stw	sp,16(sp)
     364:	d8800515 	stw	r2,20(sp)
     368:	80000226 	beq	r16,zero,374 <_puts_r+0x5c>
     36c:	80800e17 	ldw	r2,56(r16)
     370:	10001426 	beq	r2,zero,3c4 <_puts_r+0xac>
     374:	81400217 	ldw	r5,8(r16)
     378:	2880030b 	ldhu	r2,12(r5)
     37c:	10c8000c 	andi	r3,r2,8192
     380:	1800061e 	bne	r3,zero,39c <_puts_r+0x84>
     384:	29001917 	ldw	r4,100(r5)
     388:	00f7ffc4 	movi	r3,-8193
     38c:	10880014 	ori	r2,r2,8192
     390:	20c6703a 	and	r3,r4,r3
     394:	2880030d 	sth	r2,12(r5)
     398:	28c01915 	stw	r3,100(r5)
     39c:	d9800404 	addi	r6,sp,16
     3a0:	8009883a 	mov	r4,r16
     3a4:	00008340 	call	834 <__sfvwrite_r>
     3a8:	1000091e 	bne	r2,zero,3d0 <_puts_r+0xb8>
     3ac:	00800284 	movi	r2,10
     3b0:	dfc00917 	ldw	ra,36(sp)
     3b4:	dc400817 	ldw	r17,32(sp)
     3b8:	dc000717 	ldw	r16,28(sp)
     3bc:	dec00a04 	addi	sp,sp,40
     3c0:	f800283a 	ret
     3c4:	8009883a 	mov	r4,r16
     3c8:	00007e40 	call	7e4 <__sinit>
     3cc:	003fe906 	br	374 <__alt_data_end+0xfffe0374>
     3d0:	00bfffc4 	movi	r2,-1
     3d4:	003ff606 	br	3b0 <__alt_data_end+0xfffe03b0>

000003d8 <puts>:
     3d8:	00800034 	movhi	r2,0
     3dc:	109c6904 	addi	r2,r2,29092
     3e0:	200b883a 	mov	r5,r4
     3e4:	11000017 	ldw	r4,0(r2)
     3e8:	00003181 	jmpi	318 <_puts_r>

000003ec <strlen>:
     3ec:	208000cc 	andi	r2,r4,3
     3f0:	10002026 	beq	r2,zero,474 <strlen+0x88>
     3f4:	20800007 	ldb	r2,0(r4)
     3f8:	10002026 	beq	r2,zero,47c <strlen+0x90>
     3fc:	2005883a 	mov	r2,r4
     400:	00000206 	br	40c <strlen+0x20>
     404:	10c00007 	ldb	r3,0(r2)
     408:	18001826 	beq	r3,zero,46c <strlen+0x80>
     40c:	10800044 	addi	r2,r2,1
     410:	10c000cc 	andi	r3,r2,3
     414:	183ffb1e 	bne	r3,zero,404 <__alt_data_end+0xfffe0404>
     418:	10c00017 	ldw	r3,0(r2)
     41c:	01ffbff4 	movhi	r7,65279
     420:	39ffbfc4 	addi	r7,r7,-257
     424:	00ca303a 	nor	r5,zero,r3
     428:	01a02074 	movhi	r6,32897
     42c:	19c7883a 	add	r3,r3,r7
     430:	31a02004 	addi	r6,r6,-32640
     434:	1946703a 	and	r3,r3,r5
     438:	1986703a 	and	r3,r3,r6
     43c:	1800091e 	bne	r3,zero,464 <strlen+0x78>
     440:	10800104 	addi	r2,r2,4
     444:	10c00017 	ldw	r3,0(r2)
     448:	19cb883a 	add	r5,r3,r7
     44c:	00c6303a 	nor	r3,zero,r3
     450:	28c6703a 	and	r3,r5,r3
     454:	1986703a 	and	r3,r3,r6
     458:	183ff926 	beq	r3,zero,440 <__alt_data_end+0xfffe0440>
     45c:	00000106 	br	464 <strlen+0x78>
     460:	10800044 	addi	r2,r2,1
     464:	10c00007 	ldb	r3,0(r2)
     468:	183ffd1e 	bne	r3,zero,460 <__alt_data_end+0xfffe0460>
     46c:	1105c83a 	sub	r2,r2,r4
     470:	f800283a 	ret
     474:	2005883a 	mov	r2,r4
     478:	003fe706 	br	418 <__alt_data_end+0xfffe0418>
     47c:	0005883a 	mov	r2,zero
     480:	f800283a 	ret

00000484 <__fp_unlock>:
     484:	0005883a 	mov	r2,zero
     488:	f800283a 	ret

0000048c <_cleanup_r>:
     48c:	01400034 	movhi	r5,0
     490:	29490f04 	addi	r5,r5,9276
     494:	0000dc01 	jmpi	dc0 <_fwalk_reent>

00000498 <__sinit.part.1>:
     498:	defff704 	addi	sp,sp,-36
     49c:	00c00034 	movhi	r3,0
     4a0:	dfc00815 	stw	ra,32(sp)
     4a4:	ddc00715 	stw	r23,28(sp)
     4a8:	dd800615 	stw	r22,24(sp)
     4ac:	dd400515 	stw	r21,20(sp)
     4b0:	dd000415 	stw	r20,16(sp)
     4b4:	dcc00315 	stw	r19,12(sp)
     4b8:	dc800215 	stw	r18,8(sp)
     4bc:	dc400115 	stw	r17,4(sp)
     4c0:	dc000015 	stw	r16,0(sp)
     4c4:	18c12304 	addi	r3,r3,1164
     4c8:	24000117 	ldw	r16,4(r4)
     4cc:	20c00f15 	stw	r3,60(r4)
     4d0:	2080bb04 	addi	r2,r4,748
     4d4:	00c000c4 	movi	r3,3
     4d8:	20c0b915 	stw	r3,740(r4)
     4dc:	2080ba15 	stw	r2,744(r4)
     4e0:	2000b815 	stw	zero,736(r4)
     4e4:	05c00204 	movi	r23,8
     4e8:	00800104 	movi	r2,4
     4ec:	2025883a 	mov	r18,r4
     4f0:	b80d883a 	mov	r6,r23
     4f4:	81001704 	addi	r4,r16,92
     4f8:	000b883a 	mov	r5,zero
     4fc:	80000015 	stw	zero,0(r16)
     500:	80000115 	stw	zero,4(r16)
     504:	80000215 	stw	zero,8(r16)
     508:	8080030d 	sth	r2,12(r16)
     50c:	80001915 	stw	zero,100(r16)
     510:	8000038d 	sth	zero,14(r16)
     514:	80000415 	stw	zero,16(r16)
     518:	80000515 	stw	zero,20(r16)
     51c:	80000615 	stw	zero,24(r16)
     520:	0001a180 	call	1a18 <memset>
     524:	05800034 	movhi	r22,0
     528:	94400217 	ldw	r17,8(r18)
     52c:	05400034 	movhi	r21,0
     530:	05000034 	movhi	r20,0
     534:	04c00034 	movhi	r19,0
     538:	b5883e04 	addi	r22,r22,8440
     53c:	ad485504 	addi	r21,r21,8532
     540:	a5087404 	addi	r20,r20,8656
     544:	9cc88b04 	addi	r19,r19,8748
     548:	85800815 	stw	r22,32(r16)
     54c:	85400915 	stw	r21,36(r16)
     550:	85000a15 	stw	r20,40(r16)
     554:	84c00b15 	stw	r19,44(r16)
     558:	84000715 	stw	r16,28(r16)
     55c:	00800284 	movi	r2,10
     560:	8880030d 	sth	r2,12(r17)
     564:	00800044 	movi	r2,1
     568:	b80d883a 	mov	r6,r23
     56c:	89001704 	addi	r4,r17,92
     570:	000b883a 	mov	r5,zero
     574:	88000015 	stw	zero,0(r17)
     578:	88000115 	stw	zero,4(r17)
     57c:	88000215 	stw	zero,8(r17)
     580:	88001915 	stw	zero,100(r17)
     584:	8880038d 	sth	r2,14(r17)
     588:	88000415 	stw	zero,16(r17)
     58c:	88000515 	stw	zero,20(r17)
     590:	88000615 	stw	zero,24(r17)
     594:	0001a180 	call	1a18 <memset>
     598:	94000317 	ldw	r16,12(r18)
     59c:	00800484 	movi	r2,18
     5a0:	8c400715 	stw	r17,28(r17)
     5a4:	8d800815 	stw	r22,32(r17)
     5a8:	8d400915 	stw	r21,36(r17)
     5ac:	8d000a15 	stw	r20,40(r17)
     5b0:	8cc00b15 	stw	r19,44(r17)
     5b4:	8080030d 	sth	r2,12(r16)
     5b8:	00800084 	movi	r2,2
     5bc:	80000015 	stw	zero,0(r16)
     5c0:	80000115 	stw	zero,4(r16)
     5c4:	80000215 	stw	zero,8(r16)
     5c8:	80001915 	stw	zero,100(r16)
     5cc:	8080038d 	sth	r2,14(r16)
     5d0:	80000415 	stw	zero,16(r16)
     5d4:	80000515 	stw	zero,20(r16)
     5d8:	80000615 	stw	zero,24(r16)
     5dc:	b80d883a 	mov	r6,r23
     5e0:	000b883a 	mov	r5,zero
     5e4:	81001704 	addi	r4,r16,92
     5e8:	0001a180 	call	1a18 <memset>
     5ec:	00800044 	movi	r2,1
     5f0:	84000715 	stw	r16,28(r16)
     5f4:	85800815 	stw	r22,32(r16)
     5f8:	85400915 	stw	r21,36(r16)
     5fc:	85000a15 	stw	r20,40(r16)
     600:	84c00b15 	stw	r19,44(r16)
     604:	90800e15 	stw	r2,56(r18)
     608:	dfc00817 	ldw	ra,32(sp)
     60c:	ddc00717 	ldw	r23,28(sp)
     610:	dd800617 	ldw	r22,24(sp)
     614:	dd400517 	ldw	r21,20(sp)
     618:	dd000417 	ldw	r20,16(sp)
     61c:	dcc00317 	ldw	r19,12(sp)
     620:	dc800217 	ldw	r18,8(sp)
     624:	dc400117 	ldw	r17,4(sp)
     628:	dc000017 	ldw	r16,0(sp)
     62c:	dec00904 	addi	sp,sp,36
     630:	f800283a 	ret

00000634 <__fp_lock>:
     634:	0005883a 	mov	r2,zero
     638:	f800283a 	ret

0000063c <__sfmoreglue>:
     63c:	defffc04 	addi	sp,sp,-16
     640:	dc800215 	stw	r18,8(sp)
     644:	2825883a 	mov	r18,r5
     648:	dc000015 	stw	r16,0(sp)
     64c:	01401a04 	movi	r5,104
     650:	2021883a 	mov	r16,r4
     654:	913fffc4 	addi	r4,r18,-1
     658:	dfc00315 	stw	ra,12(sp)
     65c:	dc400115 	stw	r17,4(sp)
     660:	00030fc0 	call	30fc <__mulsi3>
     664:	8009883a 	mov	r4,r16
     668:	11401d04 	addi	r5,r2,116
     66c:	1023883a 	mov	r17,r2
     670:	0000e840 	call	e84 <_malloc_r>
     674:	1021883a 	mov	r16,r2
     678:	10000726 	beq	r2,zero,698 <__sfmoreglue+0x5c>
     67c:	11000304 	addi	r4,r2,12
     680:	10000015 	stw	zero,0(r2)
     684:	14800115 	stw	r18,4(r2)
     688:	11000215 	stw	r4,8(r2)
     68c:	89801a04 	addi	r6,r17,104
     690:	000b883a 	mov	r5,zero
     694:	0001a180 	call	1a18 <memset>
     698:	8005883a 	mov	r2,r16
     69c:	dfc00317 	ldw	ra,12(sp)
     6a0:	dc800217 	ldw	r18,8(sp)
     6a4:	dc400117 	ldw	r17,4(sp)
     6a8:	dc000017 	ldw	r16,0(sp)
     6ac:	dec00404 	addi	sp,sp,16
     6b0:	f800283a 	ret

000006b4 <__sfp>:
     6b4:	defffb04 	addi	sp,sp,-20
     6b8:	dc000015 	stw	r16,0(sp)
     6bc:	04000034 	movhi	r16,0
     6c0:	841c6804 	addi	r16,r16,29088
     6c4:	dcc00315 	stw	r19,12(sp)
     6c8:	2027883a 	mov	r19,r4
     6cc:	81000017 	ldw	r4,0(r16)
     6d0:	dfc00415 	stw	ra,16(sp)
     6d4:	dc800215 	stw	r18,8(sp)
     6d8:	20800e17 	ldw	r2,56(r4)
     6dc:	dc400115 	stw	r17,4(sp)
     6e0:	1000021e 	bne	r2,zero,6ec <__sfp+0x38>
     6e4:	00004980 	call	498 <__sinit.part.1>
     6e8:	81000017 	ldw	r4,0(r16)
     6ec:	2480b804 	addi	r18,r4,736
     6f0:	047fffc4 	movi	r17,-1
     6f4:	91000117 	ldw	r4,4(r18)
     6f8:	94000217 	ldw	r16,8(r18)
     6fc:	213fffc4 	addi	r4,r4,-1
     700:	20000a16 	blt	r4,zero,72c <__sfp+0x78>
     704:	8080030f 	ldh	r2,12(r16)
     708:	10000c26 	beq	r2,zero,73c <__sfp+0x88>
     70c:	80c01d04 	addi	r3,r16,116
     710:	00000206 	br	71c <__sfp+0x68>
     714:	18bfe60f 	ldh	r2,-104(r3)
     718:	10000826 	beq	r2,zero,73c <__sfp+0x88>
     71c:	213fffc4 	addi	r4,r4,-1
     720:	1c3ffd04 	addi	r16,r3,-12
     724:	18c01a04 	addi	r3,r3,104
     728:	247ffa1e 	bne	r4,r17,714 <__alt_data_end+0xfffe0714>
     72c:	90800017 	ldw	r2,0(r18)
     730:	10001d26 	beq	r2,zero,7a8 <__sfp+0xf4>
     734:	1025883a 	mov	r18,r2
     738:	003fee06 	br	6f4 <__alt_data_end+0xfffe06f4>
     73c:	00bfffc4 	movi	r2,-1
     740:	8080038d 	sth	r2,14(r16)
     744:	00800044 	movi	r2,1
     748:	8080030d 	sth	r2,12(r16)
     74c:	80001915 	stw	zero,100(r16)
     750:	80000015 	stw	zero,0(r16)
     754:	80000215 	stw	zero,8(r16)
     758:	80000115 	stw	zero,4(r16)
     75c:	80000415 	stw	zero,16(r16)
     760:	80000515 	stw	zero,20(r16)
     764:	80000615 	stw	zero,24(r16)
     768:	01800204 	movi	r6,8
     76c:	000b883a 	mov	r5,zero
     770:	81001704 	addi	r4,r16,92
     774:	0001a180 	call	1a18 <memset>
     778:	8005883a 	mov	r2,r16
     77c:	80000c15 	stw	zero,48(r16)
     780:	80000d15 	stw	zero,52(r16)
     784:	80001115 	stw	zero,68(r16)
     788:	80001215 	stw	zero,72(r16)
     78c:	dfc00417 	ldw	ra,16(sp)
     790:	dcc00317 	ldw	r19,12(sp)
     794:	dc800217 	ldw	r18,8(sp)
     798:	dc400117 	ldw	r17,4(sp)
     79c:	dc000017 	ldw	r16,0(sp)
     7a0:	dec00504 	addi	sp,sp,20
     7a4:	f800283a 	ret
     7a8:	01400104 	movi	r5,4
     7ac:	9809883a 	mov	r4,r19
     7b0:	000063c0 	call	63c <__sfmoreglue>
     7b4:	90800015 	stw	r2,0(r18)
     7b8:	103fde1e 	bne	r2,zero,734 <__alt_data_end+0xfffe0734>
     7bc:	00800304 	movi	r2,12
     7c0:	98800015 	stw	r2,0(r19)
     7c4:	0005883a 	mov	r2,zero
     7c8:	003ff006 	br	78c <__alt_data_end+0xfffe078c>

000007cc <_cleanup>:
     7cc:	00800034 	movhi	r2,0
     7d0:	109c6804 	addi	r2,r2,29088
     7d4:	11000017 	ldw	r4,0(r2)
     7d8:	01400034 	movhi	r5,0
     7dc:	29490f04 	addi	r5,r5,9276
     7e0:	0000dc01 	jmpi	dc0 <_fwalk_reent>

000007e4 <__sinit>:
     7e4:	20800e17 	ldw	r2,56(r4)
     7e8:	10000126 	beq	r2,zero,7f0 <__sinit+0xc>
     7ec:	f800283a 	ret
     7f0:	00004981 	jmpi	498 <__sinit.part.1>

000007f4 <__sfp_lock_acquire>:
     7f4:	f800283a 	ret

000007f8 <__sfp_lock_release>:
     7f8:	f800283a 	ret

000007fc <__sinit_lock_acquire>:
     7fc:	f800283a 	ret

00000800 <__sinit_lock_release>:
     800:	f800283a 	ret

00000804 <__fp_lock_all>:
     804:	00800034 	movhi	r2,0
     808:	109c6904 	addi	r2,r2,29092
     80c:	11000017 	ldw	r4,0(r2)
     810:	01400034 	movhi	r5,0
     814:	29418d04 	addi	r5,r5,1588
     818:	0000cfc1 	jmpi	cfc <_fwalk>

0000081c <__fp_unlock_all>:
     81c:	00800034 	movhi	r2,0
     820:	109c6904 	addi	r2,r2,29092
     824:	11000017 	ldw	r4,0(r2)
     828:	01400034 	movhi	r5,0
     82c:	29412104 	addi	r5,r5,1156
     830:	0000cfc1 	jmpi	cfc <_fwalk>

00000834 <__sfvwrite_r>:
     834:	30800217 	ldw	r2,8(r6)
     838:	10006726 	beq	r2,zero,9d8 <__sfvwrite_r+0x1a4>
     83c:	28c0030b 	ldhu	r3,12(r5)
     840:	defff404 	addi	sp,sp,-48
     844:	dd400715 	stw	r21,28(sp)
     848:	dd000615 	stw	r20,24(sp)
     84c:	dc000215 	stw	r16,8(sp)
     850:	dfc00b15 	stw	ra,44(sp)
     854:	df000a15 	stw	fp,40(sp)
     858:	ddc00915 	stw	r23,36(sp)
     85c:	dd800815 	stw	r22,32(sp)
     860:	dcc00515 	stw	r19,20(sp)
     864:	dc800415 	stw	r18,16(sp)
     868:	dc400315 	stw	r17,12(sp)
     86c:	1880020c 	andi	r2,r3,8
     870:	2821883a 	mov	r16,r5
     874:	202b883a 	mov	r21,r4
     878:	3029883a 	mov	r20,r6
     87c:	10002726 	beq	r2,zero,91c <__sfvwrite_r+0xe8>
     880:	28800417 	ldw	r2,16(r5)
     884:	10002526 	beq	r2,zero,91c <__sfvwrite_r+0xe8>
     888:	1880008c 	andi	r2,r3,2
     88c:	a4400017 	ldw	r17,0(r20)
     890:	10002a26 	beq	r2,zero,93c <__sfvwrite_r+0x108>
     894:	05a00034 	movhi	r22,32768
     898:	0027883a 	mov	r19,zero
     89c:	0025883a 	mov	r18,zero
     8a0:	b5bf0004 	addi	r22,r22,-1024
     8a4:	980d883a 	mov	r6,r19
     8a8:	a809883a 	mov	r4,r21
     8ac:	90004626 	beq	r18,zero,9c8 <__sfvwrite_r+0x194>
     8b0:	900f883a 	mov	r7,r18
     8b4:	b480022e 	bgeu	r22,r18,8c0 <__sfvwrite_r+0x8c>
     8b8:	01e00034 	movhi	r7,32768
     8bc:	39ff0004 	addi	r7,r7,-1024
     8c0:	80800917 	ldw	r2,36(r16)
     8c4:	81400717 	ldw	r5,28(r16)
     8c8:	103ee83a 	callr	r2
     8cc:	00805a0e 	bge	zero,r2,a38 <__sfvwrite_r+0x204>
     8d0:	a0c00217 	ldw	r3,8(r20)
     8d4:	98a7883a 	add	r19,r19,r2
     8d8:	90a5c83a 	sub	r18,r18,r2
     8dc:	1885c83a 	sub	r2,r3,r2
     8e0:	a0800215 	stw	r2,8(r20)
     8e4:	103fef1e 	bne	r2,zero,8a4 <__alt_data_end+0xfffe08a4>
     8e8:	0005883a 	mov	r2,zero
     8ec:	dfc00b17 	ldw	ra,44(sp)
     8f0:	df000a17 	ldw	fp,40(sp)
     8f4:	ddc00917 	ldw	r23,36(sp)
     8f8:	dd800817 	ldw	r22,32(sp)
     8fc:	dd400717 	ldw	r21,28(sp)
     900:	dd000617 	ldw	r20,24(sp)
     904:	dcc00517 	ldw	r19,20(sp)
     908:	dc800417 	ldw	r18,16(sp)
     90c:	dc400317 	ldw	r17,12(sp)
     910:	dc000217 	ldw	r16,8(sp)
     914:	dec00c04 	addi	sp,sp,48
     918:	f800283a 	ret
     91c:	800b883a 	mov	r5,r16
     920:	a809883a 	mov	r4,r21
     924:	00022940 	call	2294 <__swsetup_r>
     928:	1000ee1e 	bne	r2,zero,ce4 <__sfvwrite_r+0x4b0>
     92c:	80c0030b 	ldhu	r3,12(r16)
     930:	a4400017 	ldw	r17,0(r20)
     934:	1880008c 	andi	r2,r3,2
     938:	103fd61e 	bne	r2,zero,894 <__alt_data_end+0xfffe0894>
     93c:	1880004c 	andi	r2,r3,1
     940:	1000421e 	bne	r2,zero,a4c <__sfvwrite_r+0x218>
     944:	0039883a 	mov	fp,zero
     948:	0025883a 	mov	r18,zero
     94c:	90001a26 	beq	r18,zero,9b8 <__sfvwrite_r+0x184>
     950:	1880800c 	andi	r2,r3,512
     954:	84c00217 	ldw	r19,8(r16)
     958:	10002126 	beq	r2,zero,9e0 <__sfvwrite_r+0x1ac>
     95c:	982f883a 	mov	r23,r19
     960:	94c09636 	bltu	r18,r19,bbc <__sfvwrite_r+0x388>
     964:	1881200c 	andi	r2,r3,1152
     968:	1000a11e 	bne	r2,zero,bf0 <__sfvwrite_r+0x3bc>
     96c:	81000017 	ldw	r4,0(r16)
     970:	b80d883a 	mov	r6,r23
     974:	e00b883a 	mov	r5,fp
     978:	00018bc0 	call	18bc <memmove>
     97c:	80c00217 	ldw	r3,8(r16)
     980:	81000017 	ldw	r4,0(r16)
     984:	9005883a 	mov	r2,r18
     988:	1ce7c83a 	sub	r19,r3,r19
     98c:	25cf883a 	add	r7,r4,r23
     990:	84c00215 	stw	r19,8(r16)
     994:	81c00015 	stw	r7,0(r16)
     998:	a0c00217 	ldw	r3,8(r20)
     99c:	e0b9883a 	add	fp,fp,r2
     9a0:	90a5c83a 	sub	r18,r18,r2
     9a4:	18a7c83a 	sub	r19,r3,r2
     9a8:	a4c00215 	stw	r19,8(r20)
     9ac:	983fce26 	beq	r19,zero,8e8 <__alt_data_end+0xfffe08e8>
     9b0:	80c0030b 	ldhu	r3,12(r16)
     9b4:	903fe61e 	bne	r18,zero,950 <__alt_data_end+0xfffe0950>
     9b8:	8f000017 	ldw	fp,0(r17)
     9bc:	8c800117 	ldw	r18,4(r17)
     9c0:	8c400204 	addi	r17,r17,8
     9c4:	003fe106 	br	94c <__alt_data_end+0xfffe094c>
     9c8:	8cc00017 	ldw	r19,0(r17)
     9cc:	8c800117 	ldw	r18,4(r17)
     9d0:	8c400204 	addi	r17,r17,8
     9d4:	003fb306 	br	8a4 <__alt_data_end+0xfffe08a4>
     9d8:	0005883a 	mov	r2,zero
     9dc:	f800283a 	ret
     9e0:	81000017 	ldw	r4,0(r16)
     9e4:	80800417 	ldw	r2,16(r16)
     9e8:	11005a36 	bltu	r2,r4,b54 <__sfvwrite_r+0x320>
     9ec:	85c00517 	ldw	r23,20(r16)
     9f0:	95c05836 	bltu	r18,r23,b54 <__sfvwrite_r+0x320>
     9f4:	00a00034 	movhi	r2,32768
     9f8:	10bfffc4 	addi	r2,r2,-1
     9fc:	9009883a 	mov	r4,r18
     a00:	1480012e 	bgeu	r2,r18,a08 <__sfvwrite_r+0x1d4>
     a04:	1009883a 	mov	r4,r2
     a08:	b80b883a 	mov	r5,r23
     a0c:	0002f480 	call	2f48 <__divsi3>
     a10:	b80b883a 	mov	r5,r23
     a14:	1009883a 	mov	r4,r2
     a18:	00030fc0 	call	30fc <__mulsi3>
     a1c:	81400717 	ldw	r5,28(r16)
     a20:	80c00917 	ldw	r3,36(r16)
     a24:	100f883a 	mov	r7,r2
     a28:	e00d883a 	mov	r6,fp
     a2c:	a809883a 	mov	r4,r21
     a30:	183ee83a 	callr	r3
     a34:	00bfd816 	blt	zero,r2,998 <__alt_data_end+0xfffe0998>
     a38:	8080030b 	ldhu	r2,12(r16)
     a3c:	10801014 	ori	r2,r2,64
     a40:	8080030d 	sth	r2,12(r16)
     a44:	00bfffc4 	movi	r2,-1
     a48:	003fa806 	br	8ec <__alt_data_end+0xfffe08ec>
     a4c:	0027883a 	mov	r19,zero
     a50:	0011883a 	mov	r8,zero
     a54:	0039883a 	mov	fp,zero
     a58:	0025883a 	mov	r18,zero
     a5c:	90001f26 	beq	r18,zero,adc <__sfvwrite_r+0x2a8>
     a60:	40005a26 	beq	r8,zero,bcc <__sfvwrite_r+0x398>
     a64:	982d883a 	mov	r22,r19
     a68:	94c0012e 	bgeu	r18,r19,a70 <__sfvwrite_r+0x23c>
     a6c:	902d883a 	mov	r22,r18
     a70:	81000017 	ldw	r4,0(r16)
     a74:	80800417 	ldw	r2,16(r16)
     a78:	b02f883a 	mov	r23,r22
     a7c:	81c00517 	ldw	r7,20(r16)
     a80:	1100032e 	bgeu	r2,r4,a90 <__sfvwrite_r+0x25c>
     a84:	80c00217 	ldw	r3,8(r16)
     a88:	38c7883a 	add	r3,r7,r3
     a8c:	1d801816 	blt	r3,r22,af0 <__sfvwrite_r+0x2bc>
     a90:	b1c03e16 	blt	r22,r7,b8c <__sfvwrite_r+0x358>
     a94:	80800917 	ldw	r2,36(r16)
     a98:	81400717 	ldw	r5,28(r16)
     a9c:	e00d883a 	mov	r6,fp
     aa0:	da000115 	stw	r8,4(sp)
     aa4:	a809883a 	mov	r4,r21
     aa8:	103ee83a 	callr	r2
     aac:	102f883a 	mov	r23,r2
     ab0:	da000117 	ldw	r8,4(sp)
     ab4:	00bfe00e 	bge	zero,r2,a38 <__alt_data_end+0xfffe0a38>
     ab8:	9de7c83a 	sub	r19,r19,r23
     abc:	98001f26 	beq	r19,zero,b3c <__sfvwrite_r+0x308>
     ac0:	a0800217 	ldw	r2,8(r20)
     ac4:	e5f9883a 	add	fp,fp,r23
     ac8:	95e5c83a 	sub	r18,r18,r23
     acc:	15efc83a 	sub	r23,r2,r23
     ad0:	a5c00215 	stw	r23,8(r20)
     ad4:	b83f8426 	beq	r23,zero,8e8 <__alt_data_end+0xfffe08e8>
     ad8:	903fe11e 	bne	r18,zero,a60 <__alt_data_end+0xfffe0a60>
     adc:	8f000017 	ldw	fp,0(r17)
     ae0:	8c800117 	ldw	r18,4(r17)
     ae4:	0011883a 	mov	r8,zero
     ae8:	8c400204 	addi	r17,r17,8
     aec:	003fdb06 	br	a5c <__alt_data_end+0xfffe0a5c>
     af0:	180d883a 	mov	r6,r3
     af4:	e00b883a 	mov	r5,fp
     af8:	da000115 	stw	r8,4(sp)
     afc:	d8c00015 	stw	r3,0(sp)
     b00:	00018bc0 	call	18bc <memmove>
     b04:	d8c00017 	ldw	r3,0(sp)
     b08:	80800017 	ldw	r2,0(r16)
     b0c:	800b883a 	mov	r5,r16
     b10:	a809883a 	mov	r4,r21
     b14:	10c5883a 	add	r2,r2,r3
     b18:	80800015 	stw	r2,0(r16)
     b1c:	d8c00015 	stw	r3,0(sp)
     b20:	000275c0 	call	275c <_fflush_r>
     b24:	d8c00017 	ldw	r3,0(sp)
     b28:	da000117 	ldw	r8,4(sp)
     b2c:	103fc21e 	bne	r2,zero,a38 <__alt_data_end+0xfffe0a38>
     b30:	182f883a 	mov	r23,r3
     b34:	9de7c83a 	sub	r19,r19,r23
     b38:	983fe11e 	bne	r19,zero,ac0 <__alt_data_end+0xfffe0ac0>
     b3c:	800b883a 	mov	r5,r16
     b40:	a809883a 	mov	r4,r21
     b44:	000275c0 	call	275c <_fflush_r>
     b48:	103fbb1e 	bne	r2,zero,a38 <__alt_data_end+0xfffe0a38>
     b4c:	0011883a 	mov	r8,zero
     b50:	003fdb06 	br	ac0 <__alt_data_end+0xfffe0ac0>
     b54:	94c0012e 	bgeu	r18,r19,b5c <__sfvwrite_r+0x328>
     b58:	9027883a 	mov	r19,r18
     b5c:	980d883a 	mov	r6,r19
     b60:	e00b883a 	mov	r5,fp
     b64:	00018bc0 	call	18bc <memmove>
     b68:	80800217 	ldw	r2,8(r16)
     b6c:	80c00017 	ldw	r3,0(r16)
     b70:	14c5c83a 	sub	r2,r2,r19
     b74:	1cc7883a 	add	r3,r3,r19
     b78:	80800215 	stw	r2,8(r16)
     b7c:	80c00015 	stw	r3,0(r16)
     b80:	10004326 	beq	r2,zero,c90 <__sfvwrite_r+0x45c>
     b84:	9805883a 	mov	r2,r19
     b88:	003f8306 	br	998 <__alt_data_end+0xfffe0998>
     b8c:	b00d883a 	mov	r6,r22
     b90:	e00b883a 	mov	r5,fp
     b94:	da000115 	stw	r8,4(sp)
     b98:	00018bc0 	call	18bc <memmove>
     b9c:	80800217 	ldw	r2,8(r16)
     ba0:	80c00017 	ldw	r3,0(r16)
     ba4:	da000117 	ldw	r8,4(sp)
     ba8:	1585c83a 	sub	r2,r2,r22
     bac:	1dad883a 	add	r22,r3,r22
     bb0:	80800215 	stw	r2,8(r16)
     bb4:	85800015 	stw	r22,0(r16)
     bb8:	003fbf06 	br	ab8 <__alt_data_end+0xfffe0ab8>
     bbc:	81000017 	ldw	r4,0(r16)
     bc0:	9027883a 	mov	r19,r18
     bc4:	902f883a 	mov	r23,r18
     bc8:	003f6906 	br	970 <__alt_data_end+0xfffe0970>
     bcc:	900d883a 	mov	r6,r18
     bd0:	01400284 	movi	r5,10
     bd4:	e009883a 	mov	r4,fp
     bd8:	00016900 	call	1690 <memchr>
     bdc:	10003e26 	beq	r2,zero,cd8 <__sfvwrite_r+0x4a4>
     be0:	10800044 	addi	r2,r2,1
     be4:	1727c83a 	sub	r19,r2,fp
     be8:	02000044 	movi	r8,1
     bec:	003f9d06 	br	a64 <__alt_data_end+0xfffe0a64>
     bf0:	80800517 	ldw	r2,20(r16)
     bf4:	81400417 	ldw	r5,16(r16)
     bf8:	81c00017 	ldw	r7,0(r16)
     bfc:	10a7883a 	add	r19,r2,r2
     c00:	9885883a 	add	r2,r19,r2
     c04:	1026d7fa 	srli	r19,r2,31
     c08:	396dc83a 	sub	r22,r7,r5
     c0c:	b1000044 	addi	r4,r22,1
     c10:	9885883a 	add	r2,r19,r2
     c14:	1027d07a 	srai	r19,r2,1
     c18:	2485883a 	add	r2,r4,r18
     c1c:	980d883a 	mov	r6,r19
     c20:	9880022e 	bgeu	r19,r2,c2c <__sfvwrite_r+0x3f8>
     c24:	1027883a 	mov	r19,r2
     c28:	100d883a 	mov	r6,r2
     c2c:	18c1000c 	andi	r3,r3,1024
     c30:	18001c26 	beq	r3,zero,ca4 <__sfvwrite_r+0x470>
     c34:	300b883a 	mov	r5,r6
     c38:	a809883a 	mov	r4,r21
     c3c:	0000e840 	call	e84 <_malloc_r>
     c40:	102f883a 	mov	r23,r2
     c44:	10002926 	beq	r2,zero,cec <__sfvwrite_r+0x4b8>
     c48:	81400417 	ldw	r5,16(r16)
     c4c:	b00d883a 	mov	r6,r22
     c50:	1009883a 	mov	r4,r2
     c54:	00017740 	call	1774 <memcpy>
     c58:	8080030b 	ldhu	r2,12(r16)
     c5c:	00fedfc4 	movi	r3,-1153
     c60:	10c4703a 	and	r2,r2,r3
     c64:	10802014 	ori	r2,r2,128
     c68:	8080030d 	sth	r2,12(r16)
     c6c:	bd89883a 	add	r4,r23,r22
     c70:	9d8fc83a 	sub	r7,r19,r22
     c74:	85c00415 	stw	r23,16(r16)
     c78:	84c00515 	stw	r19,20(r16)
     c7c:	81000015 	stw	r4,0(r16)
     c80:	9027883a 	mov	r19,r18
     c84:	81c00215 	stw	r7,8(r16)
     c88:	902f883a 	mov	r23,r18
     c8c:	003f3806 	br	970 <__alt_data_end+0xfffe0970>
     c90:	800b883a 	mov	r5,r16
     c94:	a809883a 	mov	r4,r21
     c98:	000275c0 	call	275c <_fflush_r>
     c9c:	103fb926 	beq	r2,zero,b84 <__alt_data_end+0xfffe0b84>
     ca0:	003f6506 	br	a38 <__alt_data_end+0xfffe0a38>
     ca4:	a809883a 	mov	r4,r21
     ca8:	0001b400 	call	1b40 <_realloc_r>
     cac:	102f883a 	mov	r23,r2
     cb0:	103fee1e 	bne	r2,zero,c6c <__alt_data_end+0xfffe0c6c>
     cb4:	81400417 	ldw	r5,16(r16)
     cb8:	a809883a 	mov	r4,r21
     cbc:	000290c0 	call	290c <_free_r>
     cc0:	8080030b 	ldhu	r2,12(r16)
     cc4:	00ffdfc4 	movi	r3,-129
     cc8:	1884703a 	and	r2,r3,r2
     ccc:	00c00304 	movi	r3,12
     cd0:	a8c00015 	stw	r3,0(r21)
     cd4:	003f5906 	br	a3c <__alt_data_end+0xfffe0a3c>
     cd8:	94c00044 	addi	r19,r18,1
     cdc:	02000044 	movi	r8,1
     ce0:	003f6006 	br	a64 <__alt_data_end+0xfffe0a64>
     ce4:	00bfffc4 	movi	r2,-1
     ce8:	003f0006 	br	8ec <__alt_data_end+0xfffe08ec>
     cec:	00800304 	movi	r2,12
     cf0:	a8800015 	stw	r2,0(r21)
     cf4:	8080030b 	ldhu	r2,12(r16)
     cf8:	003f5006 	br	a3c <__alt_data_end+0xfffe0a3c>

00000cfc <_fwalk>:
     cfc:	defff704 	addi	sp,sp,-36
     d00:	dd000415 	stw	r20,16(sp)
     d04:	dfc00815 	stw	ra,32(sp)
     d08:	ddc00715 	stw	r23,28(sp)
     d0c:	dd800615 	stw	r22,24(sp)
     d10:	dd400515 	stw	r21,20(sp)
     d14:	dcc00315 	stw	r19,12(sp)
     d18:	dc800215 	stw	r18,8(sp)
     d1c:	dc400115 	stw	r17,4(sp)
     d20:	dc000015 	stw	r16,0(sp)
     d24:	2500b804 	addi	r20,r4,736
     d28:	a0002326 	beq	r20,zero,db8 <_fwalk+0xbc>
     d2c:	282b883a 	mov	r21,r5
     d30:	002f883a 	mov	r23,zero
     d34:	05800044 	movi	r22,1
     d38:	04ffffc4 	movi	r19,-1
     d3c:	a4400117 	ldw	r17,4(r20)
     d40:	a4800217 	ldw	r18,8(r20)
     d44:	8c7fffc4 	addi	r17,r17,-1
     d48:	88000d16 	blt	r17,zero,d80 <_fwalk+0x84>
     d4c:	94000304 	addi	r16,r18,12
     d50:	94800384 	addi	r18,r18,14
     d54:	8080000b 	ldhu	r2,0(r16)
     d58:	8c7fffc4 	addi	r17,r17,-1
     d5c:	813ffd04 	addi	r4,r16,-12
     d60:	b080042e 	bgeu	r22,r2,d74 <_fwalk+0x78>
     d64:	9080000f 	ldh	r2,0(r18)
     d68:	14c00226 	beq	r2,r19,d74 <_fwalk+0x78>
     d6c:	a83ee83a 	callr	r21
     d70:	b8aeb03a 	or	r23,r23,r2
     d74:	84001a04 	addi	r16,r16,104
     d78:	94801a04 	addi	r18,r18,104
     d7c:	8cfff51e 	bne	r17,r19,d54 <__alt_data_end+0xfffe0d54>
     d80:	a5000017 	ldw	r20,0(r20)
     d84:	a03fed1e 	bne	r20,zero,d3c <__alt_data_end+0xfffe0d3c>
     d88:	b805883a 	mov	r2,r23
     d8c:	dfc00817 	ldw	ra,32(sp)
     d90:	ddc00717 	ldw	r23,28(sp)
     d94:	dd800617 	ldw	r22,24(sp)
     d98:	dd400517 	ldw	r21,20(sp)
     d9c:	dd000417 	ldw	r20,16(sp)
     da0:	dcc00317 	ldw	r19,12(sp)
     da4:	dc800217 	ldw	r18,8(sp)
     da8:	dc400117 	ldw	r17,4(sp)
     dac:	dc000017 	ldw	r16,0(sp)
     db0:	dec00904 	addi	sp,sp,36
     db4:	f800283a 	ret
     db8:	002f883a 	mov	r23,zero
     dbc:	003ff206 	br	d88 <__alt_data_end+0xfffe0d88>

00000dc0 <_fwalk_reent>:
     dc0:	defff704 	addi	sp,sp,-36
     dc4:	dd000415 	stw	r20,16(sp)
     dc8:	dfc00815 	stw	ra,32(sp)
     dcc:	ddc00715 	stw	r23,28(sp)
     dd0:	dd800615 	stw	r22,24(sp)
     dd4:	dd400515 	stw	r21,20(sp)
     dd8:	dcc00315 	stw	r19,12(sp)
     ddc:	dc800215 	stw	r18,8(sp)
     de0:	dc400115 	stw	r17,4(sp)
     de4:	dc000015 	stw	r16,0(sp)
     de8:	2500b804 	addi	r20,r4,736
     dec:	a0002326 	beq	r20,zero,e7c <_fwalk_reent+0xbc>
     df0:	282b883a 	mov	r21,r5
     df4:	2027883a 	mov	r19,r4
     df8:	002f883a 	mov	r23,zero
     dfc:	05800044 	movi	r22,1
     e00:	04bfffc4 	movi	r18,-1
     e04:	a4400117 	ldw	r17,4(r20)
     e08:	a4000217 	ldw	r16,8(r20)
     e0c:	8c7fffc4 	addi	r17,r17,-1
     e10:	88000c16 	blt	r17,zero,e44 <_fwalk_reent+0x84>
     e14:	84000304 	addi	r16,r16,12
     e18:	8080000b 	ldhu	r2,0(r16)
     e1c:	8c7fffc4 	addi	r17,r17,-1
     e20:	817ffd04 	addi	r5,r16,-12
     e24:	b080052e 	bgeu	r22,r2,e3c <_fwalk_reent+0x7c>
     e28:	8080008f 	ldh	r2,2(r16)
     e2c:	9809883a 	mov	r4,r19
     e30:	14800226 	beq	r2,r18,e3c <_fwalk_reent+0x7c>
     e34:	a83ee83a 	callr	r21
     e38:	b8aeb03a 	or	r23,r23,r2
     e3c:	84001a04 	addi	r16,r16,104
     e40:	8cbff51e 	bne	r17,r18,e18 <__alt_data_end+0xfffe0e18>
     e44:	a5000017 	ldw	r20,0(r20)
     e48:	a03fee1e 	bne	r20,zero,e04 <__alt_data_end+0xfffe0e04>
     e4c:	b805883a 	mov	r2,r23
     e50:	dfc00817 	ldw	ra,32(sp)
     e54:	ddc00717 	ldw	r23,28(sp)
     e58:	dd800617 	ldw	r22,24(sp)
     e5c:	dd400517 	ldw	r21,20(sp)
     e60:	dd000417 	ldw	r20,16(sp)
     e64:	dcc00317 	ldw	r19,12(sp)
     e68:	dc800217 	ldw	r18,8(sp)
     e6c:	dc400117 	ldw	r17,4(sp)
     e70:	dc000017 	ldw	r16,0(sp)
     e74:	dec00904 	addi	sp,sp,36
     e78:	f800283a 	ret
     e7c:	002f883a 	mov	r23,zero
     e80:	003ff206 	br	e4c <__alt_data_end+0xfffe0e4c>

00000e84 <_malloc_r>:
     e84:	defff504 	addi	sp,sp,-44
     e88:	dc800315 	stw	r18,12(sp)
     e8c:	dfc00a15 	stw	ra,40(sp)
     e90:	df000915 	stw	fp,36(sp)
     e94:	ddc00815 	stw	r23,32(sp)
     e98:	dd800715 	stw	r22,28(sp)
     e9c:	dd400615 	stw	r21,24(sp)
     ea0:	dd000515 	stw	r20,20(sp)
     ea4:	dcc00415 	stw	r19,16(sp)
     ea8:	dc400215 	stw	r17,8(sp)
     eac:	dc000115 	stw	r16,4(sp)
     eb0:	288002c4 	addi	r2,r5,11
     eb4:	00c00584 	movi	r3,22
     eb8:	2025883a 	mov	r18,r4
     ebc:	18807f2e 	bgeu	r3,r2,10bc <_malloc_r+0x238>
     ec0:	047ffe04 	movi	r17,-8
     ec4:	1462703a 	and	r17,r2,r17
     ec8:	8800a316 	blt	r17,zero,1158 <_malloc_r+0x2d4>
     ecc:	8940a236 	bltu	r17,r5,1158 <_malloc_r+0x2d4>
     ed0:	00036d80 	call	36d8 <__malloc_lock>
     ed4:	00807dc4 	movi	r2,503
     ed8:	1441e92e 	bgeu	r2,r17,1680 <_malloc_r+0x7fc>
     edc:	8804d27a 	srli	r2,r17,9
     ee0:	1000a126 	beq	r2,zero,1168 <_malloc_r+0x2e4>
     ee4:	00c00104 	movi	r3,4
     ee8:	18811e36 	bltu	r3,r2,1364 <_malloc_r+0x4e0>
     eec:	8804d1ba 	srli	r2,r17,6
     ef0:	12000e44 	addi	r8,r2,57
     ef4:	11c00e04 	addi	r7,r2,56
     ef8:	4209883a 	add	r4,r8,r8
     efc:	04c00034 	movhi	r19,0
     f00:	2109883a 	add	r4,r4,r4
     f04:	9cd6e404 	addi	r19,r19,23440
     f08:	2109883a 	add	r4,r4,r4
     f0c:	9909883a 	add	r4,r19,r4
     f10:	24000117 	ldw	r16,4(r4)
     f14:	213ffe04 	addi	r4,r4,-8
     f18:	24009726 	beq	r4,r16,1178 <_malloc_r+0x2f4>
     f1c:	80800117 	ldw	r2,4(r16)
     f20:	01bfff04 	movi	r6,-4
     f24:	014003c4 	movi	r5,15
     f28:	1184703a 	and	r2,r2,r6
     f2c:	1447c83a 	sub	r3,r2,r17
     f30:	28c00716 	blt	r5,r3,f50 <_malloc_r+0xcc>
     f34:	1800920e 	bge	r3,zero,1180 <_malloc_r+0x2fc>
     f38:	84000317 	ldw	r16,12(r16)
     f3c:	24008e26 	beq	r4,r16,1178 <_malloc_r+0x2f4>
     f40:	80800117 	ldw	r2,4(r16)
     f44:	1184703a 	and	r2,r2,r6
     f48:	1447c83a 	sub	r3,r2,r17
     f4c:	28fff90e 	bge	r5,r3,f34 <__alt_data_end+0xfffe0f34>
     f50:	3809883a 	mov	r4,r7
     f54:	01800034 	movhi	r6,0
     f58:	9c000417 	ldw	r16,16(r19)
     f5c:	3196e404 	addi	r6,r6,23440
     f60:	32000204 	addi	r8,r6,8
     f64:	82013426 	beq	r16,r8,1438 <_malloc_r+0x5b4>
     f68:	80c00117 	ldw	r3,4(r16)
     f6c:	00bfff04 	movi	r2,-4
     f70:	188e703a 	and	r7,r3,r2
     f74:	3c45c83a 	sub	r2,r7,r17
     f78:	00c003c4 	movi	r3,15
     f7c:	18811f16 	blt	r3,r2,13fc <_malloc_r+0x578>
     f80:	32000515 	stw	r8,20(r6)
     f84:	32000415 	stw	r8,16(r6)
     f88:	10007f0e 	bge	r2,zero,1188 <_malloc_r+0x304>
     f8c:	00807fc4 	movi	r2,511
     f90:	11c0fd36 	bltu	r2,r7,1388 <_malloc_r+0x504>
     f94:	3806d0fa 	srli	r3,r7,3
     f98:	01c00044 	movi	r7,1
     f9c:	30800117 	ldw	r2,4(r6)
     fa0:	19400044 	addi	r5,r3,1
     fa4:	294b883a 	add	r5,r5,r5
     fa8:	1807d0ba 	srai	r3,r3,2
     fac:	294b883a 	add	r5,r5,r5
     fb0:	294b883a 	add	r5,r5,r5
     fb4:	298b883a 	add	r5,r5,r6
     fb8:	38c6983a 	sll	r3,r7,r3
     fbc:	29c00017 	ldw	r7,0(r5)
     fc0:	2a7ffe04 	addi	r9,r5,-8
     fc4:	1886b03a 	or	r3,r3,r2
     fc8:	82400315 	stw	r9,12(r16)
     fcc:	81c00215 	stw	r7,8(r16)
     fd0:	30c00115 	stw	r3,4(r6)
     fd4:	2c000015 	stw	r16,0(r5)
     fd8:	3c000315 	stw	r16,12(r7)
     fdc:	2005d0ba 	srai	r2,r4,2
     fe0:	01400044 	movi	r5,1
     fe4:	288a983a 	sll	r5,r5,r2
     fe8:	19406f36 	bltu	r3,r5,11a8 <_malloc_r+0x324>
     fec:	28c4703a 	and	r2,r5,r3
     ff0:	10000a1e 	bne	r2,zero,101c <_malloc_r+0x198>
     ff4:	00bfff04 	movi	r2,-4
     ff8:	294b883a 	add	r5,r5,r5
     ffc:	2088703a 	and	r4,r4,r2
    1000:	28c4703a 	and	r2,r5,r3
    1004:	21000104 	addi	r4,r4,4
    1008:	1000041e 	bne	r2,zero,101c <_malloc_r+0x198>
    100c:	294b883a 	add	r5,r5,r5
    1010:	28c4703a 	and	r2,r5,r3
    1014:	21000104 	addi	r4,r4,4
    1018:	103ffc26 	beq	r2,zero,100c <__alt_data_end+0xfffe100c>
    101c:	02bfff04 	movi	r10,-4
    1020:	024003c4 	movi	r9,15
    1024:	21800044 	addi	r6,r4,1
    1028:	318d883a 	add	r6,r6,r6
    102c:	318d883a 	add	r6,r6,r6
    1030:	318d883a 	add	r6,r6,r6
    1034:	998d883a 	add	r6,r19,r6
    1038:	333ffe04 	addi	r12,r6,-8
    103c:	2017883a 	mov	r11,r4
    1040:	31800104 	addi	r6,r6,4
    1044:	34000017 	ldw	r16,0(r6)
    1048:	31fffd04 	addi	r7,r6,-12
    104c:	81c0041e 	bne	r16,r7,1060 <_malloc_r+0x1dc>
    1050:	0000fb06 	br	1440 <_malloc_r+0x5bc>
    1054:	1801030e 	bge	r3,zero,1464 <_malloc_r+0x5e0>
    1058:	84000317 	ldw	r16,12(r16)
    105c:	81c0f826 	beq	r16,r7,1440 <_malloc_r+0x5bc>
    1060:	80800117 	ldw	r2,4(r16)
    1064:	1284703a 	and	r2,r2,r10
    1068:	1447c83a 	sub	r3,r2,r17
    106c:	48fff90e 	bge	r9,r3,1054 <__alt_data_end+0xfffe1054>
    1070:	80800317 	ldw	r2,12(r16)
    1074:	81000217 	ldw	r4,8(r16)
    1078:	89400054 	ori	r5,r17,1
    107c:	81400115 	stw	r5,4(r16)
    1080:	20800315 	stw	r2,12(r4)
    1084:	11000215 	stw	r4,8(r2)
    1088:	8463883a 	add	r17,r16,r17
    108c:	9c400515 	stw	r17,20(r19)
    1090:	9c400415 	stw	r17,16(r19)
    1094:	18800054 	ori	r2,r3,1
    1098:	88800115 	stw	r2,4(r17)
    109c:	8a000315 	stw	r8,12(r17)
    10a0:	8a000215 	stw	r8,8(r17)
    10a4:	88e3883a 	add	r17,r17,r3
    10a8:	88c00015 	stw	r3,0(r17)
    10ac:	9009883a 	mov	r4,r18
    10b0:	00036fc0 	call	36fc <__malloc_unlock>
    10b4:	80800204 	addi	r2,r16,8
    10b8:	00001b06 	br	1128 <_malloc_r+0x2a4>
    10bc:	04400404 	movi	r17,16
    10c0:	89402536 	bltu	r17,r5,1158 <_malloc_r+0x2d4>
    10c4:	00036d80 	call	36d8 <__malloc_lock>
    10c8:	00800184 	movi	r2,6
    10cc:	01000084 	movi	r4,2
    10d0:	04c00034 	movhi	r19,0
    10d4:	1085883a 	add	r2,r2,r2
    10d8:	9cd6e404 	addi	r19,r19,23440
    10dc:	1085883a 	add	r2,r2,r2
    10e0:	9885883a 	add	r2,r19,r2
    10e4:	14000117 	ldw	r16,4(r2)
    10e8:	10fffe04 	addi	r3,r2,-8
    10ec:	80c0d926 	beq	r16,r3,1454 <_malloc_r+0x5d0>
    10f0:	80c00117 	ldw	r3,4(r16)
    10f4:	81000317 	ldw	r4,12(r16)
    10f8:	00bfff04 	movi	r2,-4
    10fc:	1884703a 	and	r2,r3,r2
    1100:	81400217 	ldw	r5,8(r16)
    1104:	8085883a 	add	r2,r16,r2
    1108:	10c00117 	ldw	r3,4(r2)
    110c:	29000315 	stw	r4,12(r5)
    1110:	21400215 	stw	r5,8(r4)
    1114:	18c00054 	ori	r3,r3,1
    1118:	10c00115 	stw	r3,4(r2)
    111c:	9009883a 	mov	r4,r18
    1120:	00036fc0 	call	36fc <__malloc_unlock>
    1124:	80800204 	addi	r2,r16,8
    1128:	dfc00a17 	ldw	ra,40(sp)
    112c:	df000917 	ldw	fp,36(sp)
    1130:	ddc00817 	ldw	r23,32(sp)
    1134:	dd800717 	ldw	r22,28(sp)
    1138:	dd400617 	ldw	r21,24(sp)
    113c:	dd000517 	ldw	r20,20(sp)
    1140:	dcc00417 	ldw	r19,16(sp)
    1144:	dc800317 	ldw	r18,12(sp)
    1148:	dc400217 	ldw	r17,8(sp)
    114c:	dc000117 	ldw	r16,4(sp)
    1150:	dec00b04 	addi	sp,sp,44
    1154:	f800283a 	ret
    1158:	00800304 	movi	r2,12
    115c:	90800015 	stw	r2,0(r18)
    1160:	0005883a 	mov	r2,zero
    1164:	003ff006 	br	1128 <__alt_data_end+0xfffe1128>
    1168:	01002004 	movi	r4,128
    116c:	02001004 	movi	r8,64
    1170:	01c00fc4 	movi	r7,63
    1174:	003f6106 	br	efc <__alt_data_end+0xfffe0efc>
    1178:	4009883a 	mov	r4,r8
    117c:	003f7506 	br	f54 <__alt_data_end+0xfffe0f54>
    1180:	81000317 	ldw	r4,12(r16)
    1184:	003fde06 	br	1100 <__alt_data_end+0xfffe1100>
    1188:	81c5883a 	add	r2,r16,r7
    118c:	11400117 	ldw	r5,4(r2)
    1190:	9009883a 	mov	r4,r18
    1194:	29400054 	ori	r5,r5,1
    1198:	11400115 	stw	r5,4(r2)
    119c:	00036fc0 	call	36fc <__malloc_unlock>
    11a0:	80800204 	addi	r2,r16,8
    11a4:	003fe006 	br	1128 <__alt_data_end+0xfffe1128>
    11a8:	9c000217 	ldw	r16,8(r19)
    11ac:	00bfff04 	movi	r2,-4
    11b0:	85800117 	ldw	r22,4(r16)
    11b4:	b0ac703a 	and	r22,r22,r2
    11b8:	b4400336 	bltu	r22,r17,11c8 <_malloc_r+0x344>
    11bc:	b445c83a 	sub	r2,r22,r17
    11c0:	00c003c4 	movi	r3,15
    11c4:	18805d16 	blt	r3,r2,133c <_malloc_r+0x4b8>
    11c8:	05c00034 	movhi	r23,0
    11cc:	00800074 	movhi	r2,1
    11d0:	10a31304 	addi	r2,r2,-29620
    11d4:	bddc6a04 	addi	r23,r23,29096
    11d8:	15400017 	ldw	r21,0(r2)
    11dc:	b8c00017 	ldw	r3,0(r23)
    11e0:	00bfffc4 	movi	r2,-1
    11e4:	858d883a 	add	r6,r16,r22
    11e8:	8d6b883a 	add	r21,r17,r21
    11ec:	1880ea26 	beq	r3,r2,1598 <_malloc_r+0x714>
    11f0:	ad4403c4 	addi	r21,r21,4111
    11f4:	00bc0004 	movi	r2,-4096
    11f8:	a8aa703a 	and	r21,r21,r2
    11fc:	a80b883a 	mov	r5,r21
    1200:	9009883a 	mov	r4,r18
    1204:	d9800015 	stw	r6,0(sp)
    1208:	00020a40 	call	20a4 <_sbrk_r>
    120c:	1029883a 	mov	r20,r2
    1210:	00bfffc4 	movi	r2,-1
    1214:	d9800017 	ldw	r6,0(sp)
    1218:	a080e826 	beq	r20,r2,15bc <_malloc_r+0x738>
    121c:	a180a636 	bltu	r20,r6,14b8 <_malloc_r+0x634>
    1220:	07000074 	movhi	fp,1
    1224:	e7231c04 	addi	fp,fp,-29584
    1228:	e0800017 	ldw	r2,0(fp)
    122c:	a887883a 	add	r3,r21,r2
    1230:	e0c00015 	stw	r3,0(fp)
    1234:	3500e626 	beq	r6,r20,15d0 <_malloc_r+0x74c>
    1238:	b9000017 	ldw	r4,0(r23)
    123c:	00bfffc4 	movi	r2,-1
    1240:	2080ee26 	beq	r4,r2,15fc <_malloc_r+0x778>
    1244:	a185c83a 	sub	r2,r20,r6
    1248:	10c5883a 	add	r2,r2,r3
    124c:	e0800015 	stw	r2,0(fp)
    1250:	a0c001cc 	andi	r3,r20,7
    1254:	1800bc26 	beq	r3,zero,1548 <_malloc_r+0x6c4>
    1258:	a0e9c83a 	sub	r20,r20,r3
    125c:	00840204 	movi	r2,4104
    1260:	a5000204 	addi	r20,r20,8
    1264:	10c7c83a 	sub	r3,r2,r3
    1268:	a545883a 	add	r2,r20,r21
    126c:	1083ffcc 	andi	r2,r2,4095
    1270:	18abc83a 	sub	r21,r3,r2
    1274:	a80b883a 	mov	r5,r21
    1278:	9009883a 	mov	r4,r18
    127c:	00020a40 	call	20a4 <_sbrk_r>
    1280:	00ffffc4 	movi	r3,-1
    1284:	10c0e126 	beq	r2,r3,160c <_malloc_r+0x788>
    1288:	1505c83a 	sub	r2,r2,r20
    128c:	1545883a 	add	r2,r2,r21
    1290:	10800054 	ori	r2,r2,1
    1294:	e0c00017 	ldw	r3,0(fp)
    1298:	9d000215 	stw	r20,8(r19)
    129c:	a0800115 	stw	r2,4(r20)
    12a0:	a8c7883a 	add	r3,r21,r3
    12a4:	e0c00015 	stw	r3,0(fp)
    12a8:	84c00e26 	beq	r16,r19,12e4 <_malloc_r+0x460>
    12ac:	018003c4 	movi	r6,15
    12b0:	3580a72e 	bgeu	r6,r22,1550 <_malloc_r+0x6cc>
    12b4:	81400117 	ldw	r5,4(r16)
    12b8:	013ffe04 	movi	r4,-8
    12bc:	b0bffd04 	addi	r2,r22,-12
    12c0:	1104703a 	and	r2,r2,r4
    12c4:	2900004c 	andi	r4,r5,1
    12c8:	2088b03a 	or	r4,r4,r2
    12cc:	81000115 	stw	r4,4(r16)
    12d0:	01400144 	movi	r5,5
    12d4:	8089883a 	add	r4,r16,r2
    12d8:	21400115 	stw	r5,4(r4)
    12dc:	21400215 	stw	r5,8(r4)
    12e0:	3080cd36 	bltu	r6,r2,1618 <_malloc_r+0x794>
    12e4:	00800074 	movhi	r2,1
    12e8:	10a31204 	addi	r2,r2,-29624
    12ec:	11000017 	ldw	r4,0(r2)
    12f0:	20c0012e 	bgeu	r4,r3,12f8 <_malloc_r+0x474>
    12f4:	10c00015 	stw	r3,0(r2)
    12f8:	00800074 	movhi	r2,1
    12fc:	10a31104 	addi	r2,r2,-29628
    1300:	11000017 	ldw	r4,0(r2)
    1304:	9c000217 	ldw	r16,8(r19)
    1308:	20c0012e 	bgeu	r4,r3,1310 <_malloc_r+0x48c>
    130c:	10c00015 	stw	r3,0(r2)
    1310:	80c00117 	ldw	r3,4(r16)
    1314:	00bfff04 	movi	r2,-4
    1318:	1886703a 	and	r3,r3,r2
    131c:	1c45c83a 	sub	r2,r3,r17
    1320:	1c400236 	bltu	r3,r17,132c <_malloc_r+0x4a8>
    1324:	00c003c4 	movi	r3,15
    1328:	18800416 	blt	r3,r2,133c <_malloc_r+0x4b8>
    132c:	9009883a 	mov	r4,r18
    1330:	00036fc0 	call	36fc <__malloc_unlock>
    1334:	0005883a 	mov	r2,zero
    1338:	003f7b06 	br	1128 <__alt_data_end+0xfffe1128>
    133c:	88c00054 	ori	r3,r17,1
    1340:	80c00115 	stw	r3,4(r16)
    1344:	8463883a 	add	r17,r16,r17
    1348:	10800054 	ori	r2,r2,1
    134c:	9c400215 	stw	r17,8(r19)
    1350:	88800115 	stw	r2,4(r17)
    1354:	9009883a 	mov	r4,r18
    1358:	00036fc0 	call	36fc <__malloc_unlock>
    135c:	80800204 	addi	r2,r16,8
    1360:	003f7106 	br	1128 <__alt_data_end+0xfffe1128>
    1364:	00c00504 	movi	r3,20
    1368:	18804a2e 	bgeu	r3,r2,1494 <_malloc_r+0x610>
    136c:	00c01504 	movi	r3,84
    1370:	18806e36 	bltu	r3,r2,152c <_malloc_r+0x6a8>
    1374:	8804d33a 	srli	r2,r17,12
    1378:	12001bc4 	addi	r8,r2,111
    137c:	11c01b84 	addi	r7,r2,110
    1380:	4209883a 	add	r4,r8,r8
    1384:	003edd06 	br	efc <__alt_data_end+0xfffe0efc>
    1388:	3804d27a 	srli	r2,r7,9
    138c:	00c00104 	movi	r3,4
    1390:	1880442e 	bgeu	r3,r2,14a4 <_malloc_r+0x620>
    1394:	00c00504 	movi	r3,20
    1398:	18808136 	bltu	r3,r2,15a0 <_malloc_r+0x71c>
    139c:	11401704 	addi	r5,r2,92
    13a0:	10c016c4 	addi	r3,r2,91
    13a4:	294b883a 	add	r5,r5,r5
    13a8:	294b883a 	add	r5,r5,r5
    13ac:	294b883a 	add	r5,r5,r5
    13b0:	994b883a 	add	r5,r19,r5
    13b4:	28800017 	ldw	r2,0(r5)
    13b8:	01800034 	movhi	r6,0
    13bc:	297ffe04 	addi	r5,r5,-8
    13c0:	3196e404 	addi	r6,r6,23440
    13c4:	28806526 	beq	r5,r2,155c <_malloc_r+0x6d8>
    13c8:	01bfff04 	movi	r6,-4
    13cc:	10c00117 	ldw	r3,4(r2)
    13d0:	1986703a 	and	r3,r3,r6
    13d4:	38c0022e 	bgeu	r7,r3,13e0 <_malloc_r+0x55c>
    13d8:	10800217 	ldw	r2,8(r2)
    13dc:	28bffb1e 	bne	r5,r2,13cc <__alt_data_end+0xfffe13cc>
    13e0:	11400317 	ldw	r5,12(r2)
    13e4:	98c00117 	ldw	r3,4(r19)
    13e8:	81400315 	stw	r5,12(r16)
    13ec:	80800215 	stw	r2,8(r16)
    13f0:	2c000215 	stw	r16,8(r5)
    13f4:	14000315 	stw	r16,12(r2)
    13f8:	003ef806 	br	fdc <__alt_data_end+0xfffe0fdc>
    13fc:	88c00054 	ori	r3,r17,1
    1400:	80c00115 	stw	r3,4(r16)
    1404:	8463883a 	add	r17,r16,r17
    1408:	34400515 	stw	r17,20(r6)
    140c:	34400415 	stw	r17,16(r6)
    1410:	10c00054 	ori	r3,r2,1
    1414:	8a000315 	stw	r8,12(r17)
    1418:	8a000215 	stw	r8,8(r17)
    141c:	88c00115 	stw	r3,4(r17)
    1420:	88a3883a 	add	r17,r17,r2
    1424:	88800015 	stw	r2,0(r17)
    1428:	9009883a 	mov	r4,r18
    142c:	00036fc0 	call	36fc <__malloc_unlock>
    1430:	80800204 	addi	r2,r16,8
    1434:	003f3c06 	br	1128 <__alt_data_end+0xfffe1128>
    1438:	30c00117 	ldw	r3,4(r6)
    143c:	003ee706 	br	fdc <__alt_data_end+0xfffe0fdc>
    1440:	5ac00044 	addi	r11,r11,1
    1444:	588000cc 	andi	r2,r11,3
    1448:	31800204 	addi	r6,r6,8
    144c:	103efd1e 	bne	r2,zero,1044 <__alt_data_end+0xfffe1044>
    1450:	00002406 	br	14e4 <_malloc_r+0x660>
    1454:	14000317 	ldw	r16,12(r2)
    1458:	143f251e 	bne	r2,r16,10f0 <__alt_data_end+0xfffe10f0>
    145c:	21000084 	addi	r4,r4,2
    1460:	003ebc06 	br	f54 <__alt_data_end+0xfffe0f54>
    1464:	8085883a 	add	r2,r16,r2
    1468:	10c00117 	ldw	r3,4(r2)
    146c:	81000317 	ldw	r4,12(r16)
    1470:	81400217 	ldw	r5,8(r16)
    1474:	18c00054 	ori	r3,r3,1
    1478:	10c00115 	stw	r3,4(r2)
    147c:	29000315 	stw	r4,12(r5)
    1480:	21400215 	stw	r5,8(r4)
    1484:	9009883a 	mov	r4,r18
    1488:	00036fc0 	call	36fc <__malloc_unlock>
    148c:	80800204 	addi	r2,r16,8
    1490:	003f2506 	br	1128 <__alt_data_end+0xfffe1128>
    1494:	12001704 	addi	r8,r2,92
    1498:	11c016c4 	addi	r7,r2,91
    149c:	4209883a 	add	r4,r8,r8
    14a0:	003e9606 	br	efc <__alt_data_end+0xfffe0efc>
    14a4:	3804d1ba 	srli	r2,r7,6
    14a8:	11400e44 	addi	r5,r2,57
    14ac:	10c00e04 	addi	r3,r2,56
    14b0:	294b883a 	add	r5,r5,r5
    14b4:	003fbc06 	br	13a8 <__alt_data_end+0xfffe13a8>
    14b8:	84ff5926 	beq	r16,r19,1220 <__alt_data_end+0xfffe1220>
    14bc:	00800034 	movhi	r2,0
    14c0:	1096e404 	addi	r2,r2,23440
    14c4:	14000217 	ldw	r16,8(r2)
    14c8:	00bfff04 	movi	r2,-4
    14cc:	80c00117 	ldw	r3,4(r16)
    14d0:	1886703a 	and	r3,r3,r2
    14d4:	003f9106 	br	131c <__alt_data_end+0xfffe131c>
    14d8:	60800217 	ldw	r2,8(r12)
    14dc:	213fffc4 	addi	r4,r4,-1
    14e0:	1300651e 	bne	r2,r12,1678 <_malloc_r+0x7f4>
    14e4:	208000cc 	andi	r2,r4,3
    14e8:	633ffe04 	addi	r12,r12,-8
    14ec:	103ffa1e 	bne	r2,zero,14d8 <__alt_data_end+0xfffe14d8>
    14f0:	98800117 	ldw	r2,4(r19)
    14f4:	0146303a 	nor	r3,zero,r5
    14f8:	1884703a 	and	r2,r3,r2
    14fc:	98800115 	stw	r2,4(r19)
    1500:	294b883a 	add	r5,r5,r5
    1504:	117f2836 	bltu	r2,r5,11a8 <__alt_data_end+0xfffe11a8>
    1508:	283f2726 	beq	r5,zero,11a8 <__alt_data_end+0xfffe11a8>
    150c:	2886703a 	and	r3,r5,r2
    1510:	5809883a 	mov	r4,r11
    1514:	183ec31e 	bne	r3,zero,1024 <__alt_data_end+0xfffe1024>
    1518:	294b883a 	add	r5,r5,r5
    151c:	2886703a 	and	r3,r5,r2
    1520:	21000104 	addi	r4,r4,4
    1524:	183ffc26 	beq	r3,zero,1518 <__alt_data_end+0xfffe1518>
    1528:	003ebe06 	br	1024 <__alt_data_end+0xfffe1024>
    152c:	00c05504 	movi	r3,340
    1530:	18801236 	bltu	r3,r2,157c <_malloc_r+0x6f8>
    1534:	8804d3fa 	srli	r2,r17,15
    1538:	12001e04 	addi	r8,r2,120
    153c:	11c01dc4 	addi	r7,r2,119
    1540:	4209883a 	add	r4,r8,r8
    1544:	003e6d06 	br	efc <__alt_data_end+0xfffe0efc>
    1548:	00c40004 	movi	r3,4096
    154c:	003f4606 	br	1268 <__alt_data_end+0xfffe1268>
    1550:	00800044 	movi	r2,1
    1554:	a0800115 	stw	r2,4(r20)
    1558:	003f7406 	br	132c <__alt_data_end+0xfffe132c>
    155c:	1805d0ba 	srai	r2,r3,2
    1560:	01c00044 	movi	r7,1
    1564:	30c00117 	ldw	r3,4(r6)
    1568:	388e983a 	sll	r7,r7,r2
    156c:	2805883a 	mov	r2,r5
    1570:	38c6b03a 	or	r3,r7,r3
    1574:	30c00115 	stw	r3,4(r6)
    1578:	003f9b06 	br	13e8 <__alt_data_end+0xfffe13e8>
    157c:	00c15504 	movi	r3,1364
    1580:	18801a36 	bltu	r3,r2,15ec <_malloc_r+0x768>
    1584:	8804d4ba 	srli	r2,r17,18
    1588:	12001f44 	addi	r8,r2,125
    158c:	11c01f04 	addi	r7,r2,124
    1590:	4209883a 	add	r4,r8,r8
    1594:	003e5906 	br	efc <__alt_data_end+0xfffe0efc>
    1598:	ad400404 	addi	r21,r21,16
    159c:	003f1706 	br	11fc <__alt_data_end+0xfffe11fc>
    15a0:	00c01504 	movi	r3,84
    15a4:	18802336 	bltu	r3,r2,1634 <_malloc_r+0x7b0>
    15a8:	3804d33a 	srli	r2,r7,12
    15ac:	11401bc4 	addi	r5,r2,111
    15b0:	10c01b84 	addi	r3,r2,110
    15b4:	294b883a 	add	r5,r5,r5
    15b8:	003f7b06 	br	13a8 <__alt_data_end+0xfffe13a8>
    15bc:	9c000217 	ldw	r16,8(r19)
    15c0:	00bfff04 	movi	r2,-4
    15c4:	80c00117 	ldw	r3,4(r16)
    15c8:	1886703a 	and	r3,r3,r2
    15cc:	003f5306 	br	131c <__alt_data_end+0xfffe131c>
    15d0:	3083ffcc 	andi	r2,r6,4095
    15d4:	103f181e 	bne	r2,zero,1238 <__alt_data_end+0xfffe1238>
    15d8:	99000217 	ldw	r4,8(r19)
    15dc:	b545883a 	add	r2,r22,r21
    15e0:	10800054 	ori	r2,r2,1
    15e4:	20800115 	stw	r2,4(r4)
    15e8:	003f3e06 	br	12e4 <__alt_data_end+0xfffe12e4>
    15ec:	01003f84 	movi	r4,254
    15f0:	02001fc4 	movi	r8,127
    15f4:	01c01f84 	movi	r7,126
    15f8:	003e4006 	br	efc <__alt_data_end+0xfffe0efc>
    15fc:	00800034 	movhi	r2,0
    1600:	109c6a04 	addi	r2,r2,29096
    1604:	15000015 	stw	r20,0(r2)
    1608:	003f1106 	br	1250 <__alt_data_end+0xfffe1250>
    160c:	00800044 	movi	r2,1
    1610:	002b883a 	mov	r21,zero
    1614:	003f1f06 	br	1294 <__alt_data_end+0xfffe1294>
    1618:	81400204 	addi	r5,r16,8
    161c:	9009883a 	mov	r4,r18
    1620:	000290c0 	call	290c <_free_r>
    1624:	00800074 	movhi	r2,1
    1628:	10a31c04 	addi	r2,r2,-29584
    162c:	10c00017 	ldw	r3,0(r2)
    1630:	003f2c06 	br	12e4 <__alt_data_end+0xfffe12e4>
    1634:	00c05504 	movi	r3,340
    1638:	18800536 	bltu	r3,r2,1650 <_malloc_r+0x7cc>
    163c:	3804d3fa 	srli	r2,r7,15
    1640:	11401e04 	addi	r5,r2,120
    1644:	10c01dc4 	addi	r3,r2,119
    1648:	294b883a 	add	r5,r5,r5
    164c:	003f5606 	br	13a8 <__alt_data_end+0xfffe13a8>
    1650:	00c15504 	movi	r3,1364
    1654:	18800536 	bltu	r3,r2,166c <_malloc_r+0x7e8>
    1658:	3804d4ba 	srli	r2,r7,18
    165c:	11401f44 	addi	r5,r2,125
    1660:	10c01f04 	addi	r3,r2,124
    1664:	294b883a 	add	r5,r5,r5
    1668:	003f4f06 	br	13a8 <__alt_data_end+0xfffe13a8>
    166c:	01403f84 	movi	r5,254
    1670:	00c01f84 	movi	r3,126
    1674:	003f4c06 	br	13a8 <__alt_data_end+0xfffe13a8>
    1678:	98800117 	ldw	r2,4(r19)
    167c:	003fa006 	br	1500 <__alt_data_end+0xfffe1500>
    1680:	8808d0fa 	srli	r4,r17,3
    1684:	20800044 	addi	r2,r4,1
    1688:	1085883a 	add	r2,r2,r2
    168c:	003e9006 	br	10d0 <__alt_data_end+0xfffe10d0>

00001690 <memchr>:
    1690:	208000cc 	andi	r2,r4,3
    1694:	280f883a 	mov	r7,r5
    1698:	10003426 	beq	r2,zero,176c <memchr+0xdc>
    169c:	30bfffc4 	addi	r2,r6,-1
    16a0:	30001a26 	beq	r6,zero,170c <memchr+0x7c>
    16a4:	20c00003 	ldbu	r3,0(r4)
    16a8:	29803fcc 	andi	r6,r5,255
    16ac:	30c0051e 	bne	r6,r3,16c4 <memchr+0x34>
    16b0:	00001806 	br	1714 <memchr+0x84>
    16b4:	10001526 	beq	r2,zero,170c <memchr+0x7c>
    16b8:	20c00003 	ldbu	r3,0(r4)
    16bc:	10bfffc4 	addi	r2,r2,-1
    16c0:	30c01426 	beq	r6,r3,1714 <memchr+0x84>
    16c4:	21000044 	addi	r4,r4,1
    16c8:	20c000cc 	andi	r3,r4,3
    16cc:	183ff91e 	bne	r3,zero,16b4 <__alt_data_end+0xfffe16b4>
    16d0:	020000c4 	movi	r8,3
    16d4:	40801136 	bltu	r8,r2,171c <memchr+0x8c>
    16d8:	10000c26 	beq	r2,zero,170c <memchr+0x7c>
    16dc:	20c00003 	ldbu	r3,0(r4)
    16e0:	29403fcc 	andi	r5,r5,255
    16e4:	28c00b26 	beq	r5,r3,1714 <memchr+0x84>
    16e8:	20c00044 	addi	r3,r4,1
    16ec:	39803fcc 	andi	r6,r7,255
    16f0:	2089883a 	add	r4,r4,r2
    16f4:	00000306 	br	1704 <memchr+0x74>
    16f8:	18c00044 	addi	r3,r3,1
    16fc:	197fffc3 	ldbu	r5,-1(r3)
    1700:	31400526 	beq	r6,r5,1718 <memchr+0x88>
    1704:	1805883a 	mov	r2,r3
    1708:	20fffb1e 	bne	r4,r3,16f8 <__alt_data_end+0xfffe16f8>
    170c:	0005883a 	mov	r2,zero
    1710:	f800283a 	ret
    1714:	2005883a 	mov	r2,r4
    1718:	f800283a 	ret
    171c:	28c03fcc 	andi	r3,r5,255
    1720:	1812923a 	slli	r9,r3,8
    1724:	02ffbff4 	movhi	r11,65279
    1728:	02a02074 	movhi	r10,32897
    172c:	48d2b03a 	or	r9,r9,r3
    1730:	4806943a 	slli	r3,r9,16
    1734:	5affbfc4 	addi	r11,r11,-257
    1738:	52a02004 	addi	r10,r10,-32640
    173c:	48d2b03a 	or	r9,r9,r3
    1740:	20c00017 	ldw	r3,0(r4)
    1744:	48c6f03a 	xor	r3,r9,r3
    1748:	1acd883a 	add	r6,r3,r11
    174c:	00c6303a 	nor	r3,zero,r3
    1750:	30c6703a 	and	r3,r6,r3
    1754:	1a86703a 	and	r3,r3,r10
    1758:	183fe01e 	bne	r3,zero,16dc <__alt_data_end+0xfffe16dc>
    175c:	10bfff04 	addi	r2,r2,-4
    1760:	21000104 	addi	r4,r4,4
    1764:	40bff636 	bltu	r8,r2,1740 <__alt_data_end+0xfffe1740>
    1768:	003fdb06 	br	16d8 <__alt_data_end+0xfffe16d8>
    176c:	3005883a 	mov	r2,r6
    1770:	003fd706 	br	16d0 <__alt_data_end+0xfffe16d0>

00001774 <memcpy>:
    1774:	defffd04 	addi	sp,sp,-12
    1778:	dfc00215 	stw	ra,8(sp)
    177c:	dc400115 	stw	r17,4(sp)
    1780:	dc000015 	stw	r16,0(sp)
    1784:	00c003c4 	movi	r3,15
    1788:	2005883a 	mov	r2,r4
    178c:	1980452e 	bgeu	r3,r6,18a4 <memcpy+0x130>
    1790:	2906b03a 	or	r3,r5,r4
    1794:	18c000cc 	andi	r3,r3,3
    1798:	1800441e 	bne	r3,zero,18ac <memcpy+0x138>
    179c:	347ffc04 	addi	r17,r6,-16
    17a0:	8822d13a 	srli	r17,r17,4
    17a4:	28c00104 	addi	r3,r5,4
    17a8:	23400104 	addi	r13,r4,4
    17ac:	8820913a 	slli	r16,r17,4
    17b0:	2b000204 	addi	r12,r5,8
    17b4:	22c00204 	addi	r11,r4,8
    17b8:	84000504 	addi	r16,r16,20
    17bc:	2a800304 	addi	r10,r5,12
    17c0:	22400304 	addi	r9,r4,12
    17c4:	2c21883a 	add	r16,r5,r16
    17c8:	2811883a 	mov	r8,r5
    17cc:	200f883a 	mov	r7,r4
    17d0:	41000017 	ldw	r4,0(r8)
    17d4:	1fc00017 	ldw	ra,0(r3)
    17d8:	63c00017 	ldw	r15,0(r12)
    17dc:	39000015 	stw	r4,0(r7)
    17e0:	53800017 	ldw	r14,0(r10)
    17e4:	6fc00015 	stw	ra,0(r13)
    17e8:	5bc00015 	stw	r15,0(r11)
    17ec:	4b800015 	stw	r14,0(r9)
    17f0:	18c00404 	addi	r3,r3,16
    17f4:	39c00404 	addi	r7,r7,16
    17f8:	42000404 	addi	r8,r8,16
    17fc:	6b400404 	addi	r13,r13,16
    1800:	63000404 	addi	r12,r12,16
    1804:	5ac00404 	addi	r11,r11,16
    1808:	52800404 	addi	r10,r10,16
    180c:	4a400404 	addi	r9,r9,16
    1810:	1c3fef1e 	bne	r3,r16,17d0 <__alt_data_end+0xfffe17d0>
    1814:	89c00044 	addi	r7,r17,1
    1818:	380e913a 	slli	r7,r7,4
    181c:	310003cc 	andi	r4,r6,15
    1820:	02c000c4 	movi	r11,3
    1824:	11c7883a 	add	r3,r2,r7
    1828:	29cb883a 	add	r5,r5,r7
    182c:	5900212e 	bgeu	r11,r4,18b4 <memcpy+0x140>
    1830:	1813883a 	mov	r9,r3
    1834:	2811883a 	mov	r8,r5
    1838:	200f883a 	mov	r7,r4
    183c:	42800017 	ldw	r10,0(r8)
    1840:	4a400104 	addi	r9,r9,4
    1844:	39ffff04 	addi	r7,r7,-4
    1848:	4abfff15 	stw	r10,-4(r9)
    184c:	42000104 	addi	r8,r8,4
    1850:	59fffa36 	bltu	r11,r7,183c <__alt_data_end+0xfffe183c>
    1854:	213fff04 	addi	r4,r4,-4
    1858:	2008d0ba 	srli	r4,r4,2
    185c:	318000cc 	andi	r6,r6,3
    1860:	21000044 	addi	r4,r4,1
    1864:	2109883a 	add	r4,r4,r4
    1868:	2109883a 	add	r4,r4,r4
    186c:	1907883a 	add	r3,r3,r4
    1870:	290b883a 	add	r5,r5,r4
    1874:	30000626 	beq	r6,zero,1890 <memcpy+0x11c>
    1878:	198d883a 	add	r6,r3,r6
    187c:	29c00003 	ldbu	r7,0(r5)
    1880:	18c00044 	addi	r3,r3,1
    1884:	29400044 	addi	r5,r5,1
    1888:	19ffffc5 	stb	r7,-1(r3)
    188c:	19bffb1e 	bne	r3,r6,187c <__alt_data_end+0xfffe187c>
    1890:	dfc00217 	ldw	ra,8(sp)
    1894:	dc400117 	ldw	r17,4(sp)
    1898:	dc000017 	ldw	r16,0(sp)
    189c:	dec00304 	addi	sp,sp,12
    18a0:	f800283a 	ret
    18a4:	2007883a 	mov	r3,r4
    18a8:	003ff206 	br	1874 <__alt_data_end+0xfffe1874>
    18ac:	2007883a 	mov	r3,r4
    18b0:	003ff106 	br	1878 <__alt_data_end+0xfffe1878>
    18b4:	200d883a 	mov	r6,r4
    18b8:	003fee06 	br	1874 <__alt_data_end+0xfffe1874>

000018bc <memmove>:
    18bc:	2005883a 	mov	r2,r4
    18c0:	29000b2e 	bgeu	r5,r4,18f0 <memmove+0x34>
    18c4:	298f883a 	add	r7,r5,r6
    18c8:	21c0092e 	bgeu	r4,r7,18f0 <memmove+0x34>
    18cc:	2187883a 	add	r3,r4,r6
    18d0:	198bc83a 	sub	r5,r3,r6
    18d4:	30004826 	beq	r6,zero,19f8 <memmove+0x13c>
    18d8:	39ffffc4 	addi	r7,r7,-1
    18dc:	39000003 	ldbu	r4,0(r7)
    18e0:	18ffffc4 	addi	r3,r3,-1
    18e4:	19000005 	stb	r4,0(r3)
    18e8:	28fffb1e 	bne	r5,r3,18d8 <__alt_data_end+0xfffe18d8>
    18ec:	f800283a 	ret
    18f0:	00c003c4 	movi	r3,15
    18f4:	1980412e 	bgeu	r3,r6,19fc <memmove+0x140>
    18f8:	2886b03a 	or	r3,r5,r2
    18fc:	18c000cc 	andi	r3,r3,3
    1900:	1800401e 	bne	r3,zero,1a04 <memmove+0x148>
    1904:	33fffc04 	addi	r15,r6,-16
    1908:	781ed13a 	srli	r15,r15,4
    190c:	28c00104 	addi	r3,r5,4
    1910:	13400104 	addi	r13,r2,4
    1914:	781c913a 	slli	r14,r15,4
    1918:	2b000204 	addi	r12,r5,8
    191c:	12c00204 	addi	r11,r2,8
    1920:	73800504 	addi	r14,r14,20
    1924:	2a800304 	addi	r10,r5,12
    1928:	12400304 	addi	r9,r2,12
    192c:	2b9d883a 	add	r14,r5,r14
    1930:	2811883a 	mov	r8,r5
    1934:	100f883a 	mov	r7,r2
    1938:	41000017 	ldw	r4,0(r8)
    193c:	39c00404 	addi	r7,r7,16
    1940:	18c00404 	addi	r3,r3,16
    1944:	393ffc15 	stw	r4,-16(r7)
    1948:	193ffc17 	ldw	r4,-16(r3)
    194c:	6b400404 	addi	r13,r13,16
    1950:	5ac00404 	addi	r11,r11,16
    1954:	693ffc15 	stw	r4,-16(r13)
    1958:	61000017 	ldw	r4,0(r12)
    195c:	4a400404 	addi	r9,r9,16
    1960:	42000404 	addi	r8,r8,16
    1964:	593ffc15 	stw	r4,-16(r11)
    1968:	51000017 	ldw	r4,0(r10)
    196c:	63000404 	addi	r12,r12,16
    1970:	52800404 	addi	r10,r10,16
    1974:	493ffc15 	stw	r4,-16(r9)
    1978:	1bbfef1e 	bne	r3,r14,1938 <__alt_data_end+0xfffe1938>
    197c:	79000044 	addi	r4,r15,1
    1980:	2008913a 	slli	r4,r4,4
    1984:	328003cc 	andi	r10,r6,15
    1988:	02c000c4 	movi	r11,3
    198c:	1107883a 	add	r3,r2,r4
    1990:	290b883a 	add	r5,r5,r4
    1994:	5a801e2e 	bgeu	r11,r10,1a10 <memmove+0x154>
    1998:	1813883a 	mov	r9,r3
    199c:	2811883a 	mov	r8,r5
    19a0:	500f883a 	mov	r7,r10
    19a4:	41000017 	ldw	r4,0(r8)
    19a8:	4a400104 	addi	r9,r9,4
    19ac:	39ffff04 	addi	r7,r7,-4
    19b0:	493fff15 	stw	r4,-4(r9)
    19b4:	42000104 	addi	r8,r8,4
    19b8:	59fffa36 	bltu	r11,r7,19a4 <__alt_data_end+0xfffe19a4>
    19bc:	513fff04 	addi	r4,r10,-4
    19c0:	2008d0ba 	srli	r4,r4,2
    19c4:	318000cc 	andi	r6,r6,3
    19c8:	21000044 	addi	r4,r4,1
    19cc:	2109883a 	add	r4,r4,r4
    19d0:	2109883a 	add	r4,r4,r4
    19d4:	1907883a 	add	r3,r3,r4
    19d8:	290b883a 	add	r5,r5,r4
    19dc:	30000b26 	beq	r6,zero,1a0c <memmove+0x150>
    19e0:	198d883a 	add	r6,r3,r6
    19e4:	29c00003 	ldbu	r7,0(r5)
    19e8:	18c00044 	addi	r3,r3,1
    19ec:	29400044 	addi	r5,r5,1
    19f0:	19ffffc5 	stb	r7,-1(r3)
    19f4:	19bffb1e 	bne	r3,r6,19e4 <__alt_data_end+0xfffe19e4>
    19f8:	f800283a 	ret
    19fc:	1007883a 	mov	r3,r2
    1a00:	003ff606 	br	19dc <__alt_data_end+0xfffe19dc>
    1a04:	1007883a 	mov	r3,r2
    1a08:	003ff506 	br	19e0 <__alt_data_end+0xfffe19e0>
    1a0c:	f800283a 	ret
    1a10:	500d883a 	mov	r6,r10
    1a14:	003ff106 	br	19dc <__alt_data_end+0xfffe19dc>

00001a18 <memset>:
    1a18:	20c000cc 	andi	r3,r4,3
    1a1c:	2005883a 	mov	r2,r4
    1a20:	18004426 	beq	r3,zero,1b34 <memset+0x11c>
    1a24:	31ffffc4 	addi	r7,r6,-1
    1a28:	30004026 	beq	r6,zero,1b2c <memset+0x114>
    1a2c:	2813883a 	mov	r9,r5
    1a30:	200d883a 	mov	r6,r4
    1a34:	2007883a 	mov	r3,r4
    1a38:	00000406 	br	1a4c <memset+0x34>
    1a3c:	3a3fffc4 	addi	r8,r7,-1
    1a40:	31800044 	addi	r6,r6,1
    1a44:	38003926 	beq	r7,zero,1b2c <memset+0x114>
    1a48:	400f883a 	mov	r7,r8
    1a4c:	18c00044 	addi	r3,r3,1
    1a50:	32400005 	stb	r9,0(r6)
    1a54:	1a0000cc 	andi	r8,r3,3
    1a58:	403ff81e 	bne	r8,zero,1a3c <__alt_data_end+0xfffe1a3c>
    1a5c:	010000c4 	movi	r4,3
    1a60:	21c02d2e 	bgeu	r4,r7,1b18 <memset+0x100>
    1a64:	29003fcc 	andi	r4,r5,255
    1a68:	200c923a 	slli	r6,r4,8
    1a6c:	3108b03a 	or	r4,r6,r4
    1a70:	200c943a 	slli	r6,r4,16
    1a74:	218cb03a 	or	r6,r4,r6
    1a78:	010003c4 	movi	r4,15
    1a7c:	21c0182e 	bgeu	r4,r7,1ae0 <memset+0xc8>
    1a80:	3b3ffc04 	addi	r12,r7,-16
    1a84:	6018d13a 	srli	r12,r12,4
    1a88:	1a000104 	addi	r8,r3,4
    1a8c:	1ac00204 	addi	r11,r3,8
    1a90:	6008913a 	slli	r4,r12,4
    1a94:	1a800304 	addi	r10,r3,12
    1a98:	1813883a 	mov	r9,r3
    1a9c:	21000504 	addi	r4,r4,20
    1aa0:	1909883a 	add	r4,r3,r4
    1aa4:	49800015 	stw	r6,0(r9)
    1aa8:	41800015 	stw	r6,0(r8)
    1aac:	59800015 	stw	r6,0(r11)
    1ab0:	51800015 	stw	r6,0(r10)
    1ab4:	42000404 	addi	r8,r8,16
    1ab8:	4a400404 	addi	r9,r9,16
    1abc:	5ac00404 	addi	r11,r11,16
    1ac0:	52800404 	addi	r10,r10,16
    1ac4:	413ff71e 	bne	r8,r4,1aa4 <__alt_data_end+0xfffe1aa4>
    1ac8:	63000044 	addi	r12,r12,1
    1acc:	6018913a 	slli	r12,r12,4
    1ad0:	39c003cc 	andi	r7,r7,15
    1ad4:	010000c4 	movi	r4,3
    1ad8:	1b07883a 	add	r3,r3,r12
    1adc:	21c00e2e 	bgeu	r4,r7,1b18 <memset+0x100>
    1ae0:	1813883a 	mov	r9,r3
    1ae4:	3811883a 	mov	r8,r7
    1ae8:	010000c4 	movi	r4,3
    1aec:	49800015 	stw	r6,0(r9)
    1af0:	423fff04 	addi	r8,r8,-4
    1af4:	4a400104 	addi	r9,r9,4
    1af8:	223ffc36 	bltu	r4,r8,1aec <__alt_data_end+0xfffe1aec>
    1afc:	393fff04 	addi	r4,r7,-4
    1b00:	2008d0ba 	srli	r4,r4,2
    1b04:	39c000cc 	andi	r7,r7,3
    1b08:	21000044 	addi	r4,r4,1
    1b0c:	2109883a 	add	r4,r4,r4
    1b10:	2109883a 	add	r4,r4,r4
    1b14:	1907883a 	add	r3,r3,r4
    1b18:	38000526 	beq	r7,zero,1b30 <memset+0x118>
    1b1c:	19cf883a 	add	r7,r3,r7
    1b20:	19400005 	stb	r5,0(r3)
    1b24:	18c00044 	addi	r3,r3,1
    1b28:	38fffd1e 	bne	r7,r3,1b20 <__alt_data_end+0xfffe1b20>
    1b2c:	f800283a 	ret
    1b30:	f800283a 	ret
    1b34:	2007883a 	mov	r3,r4
    1b38:	300f883a 	mov	r7,r6
    1b3c:	003fc706 	br	1a5c <__alt_data_end+0xfffe1a5c>

00001b40 <_realloc_r>:
    1b40:	defff604 	addi	sp,sp,-40
    1b44:	dc800215 	stw	r18,8(sp)
    1b48:	dfc00915 	stw	ra,36(sp)
    1b4c:	df000815 	stw	fp,32(sp)
    1b50:	ddc00715 	stw	r23,28(sp)
    1b54:	dd800615 	stw	r22,24(sp)
    1b58:	dd400515 	stw	r21,20(sp)
    1b5c:	dd000415 	stw	r20,16(sp)
    1b60:	dcc00315 	stw	r19,12(sp)
    1b64:	dc400115 	stw	r17,4(sp)
    1b68:	dc000015 	stw	r16,0(sp)
    1b6c:	3025883a 	mov	r18,r6
    1b70:	2800b726 	beq	r5,zero,1e50 <_realloc_r+0x310>
    1b74:	282b883a 	mov	r21,r5
    1b78:	2029883a 	mov	r20,r4
    1b7c:	00036d80 	call	36d8 <__malloc_lock>
    1b80:	a8bfff17 	ldw	r2,-4(r21)
    1b84:	043fff04 	movi	r16,-4
    1b88:	90c002c4 	addi	r3,r18,11
    1b8c:	01000584 	movi	r4,22
    1b90:	acfffe04 	addi	r19,r21,-8
    1b94:	1420703a 	and	r16,r2,r16
    1b98:	20c0332e 	bgeu	r4,r3,1c68 <_realloc_r+0x128>
    1b9c:	047ffe04 	movi	r17,-8
    1ba0:	1c62703a 	and	r17,r3,r17
    1ba4:	8807883a 	mov	r3,r17
    1ba8:	88005816 	blt	r17,zero,1d0c <_realloc_r+0x1cc>
    1bac:	8c805736 	bltu	r17,r18,1d0c <_realloc_r+0x1cc>
    1bb0:	80c0300e 	bge	r16,r3,1c74 <_realloc_r+0x134>
    1bb4:	07000034 	movhi	fp,0
    1bb8:	e716e404 	addi	fp,fp,23440
    1bbc:	e1c00217 	ldw	r7,8(fp)
    1bc0:	9c09883a 	add	r4,r19,r16
    1bc4:	22000117 	ldw	r8,4(r4)
    1bc8:	21c06326 	beq	r4,r7,1d58 <_realloc_r+0x218>
    1bcc:	017fff84 	movi	r5,-2
    1bd0:	414a703a 	and	r5,r8,r5
    1bd4:	214b883a 	add	r5,r4,r5
    1bd8:	29800117 	ldw	r6,4(r5)
    1bdc:	3180004c 	andi	r6,r6,1
    1be0:	30003f26 	beq	r6,zero,1ce0 <_realloc_r+0x1a0>
    1be4:	1080004c 	andi	r2,r2,1
    1be8:	10008326 	beq	r2,zero,1df8 <_realloc_r+0x2b8>
    1bec:	900b883a 	mov	r5,r18
    1bf0:	a009883a 	mov	r4,r20
    1bf4:	0000e840 	call	e84 <_malloc_r>
    1bf8:	1025883a 	mov	r18,r2
    1bfc:	10011e26 	beq	r2,zero,2078 <_realloc_r+0x538>
    1c00:	a93fff17 	ldw	r4,-4(r21)
    1c04:	10fffe04 	addi	r3,r2,-8
    1c08:	00bfff84 	movi	r2,-2
    1c0c:	2084703a 	and	r2,r4,r2
    1c10:	9885883a 	add	r2,r19,r2
    1c14:	1880ee26 	beq	r3,r2,1fd0 <_realloc_r+0x490>
    1c18:	81bfff04 	addi	r6,r16,-4
    1c1c:	00800904 	movi	r2,36
    1c20:	1180b836 	bltu	r2,r6,1f04 <_realloc_r+0x3c4>
    1c24:	00c004c4 	movi	r3,19
    1c28:	19809636 	bltu	r3,r6,1e84 <_realloc_r+0x344>
    1c2c:	9005883a 	mov	r2,r18
    1c30:	a807883a 	mov	r3,r21
    1c34:	19000017 	ldw	r4,0(r3)
    1c38:	11000015 	stw	r4,0(r2)
    1c3c:	19000117 	ldw	r4,4(r3)
    1c40:	11000115 	stw	r4,4(r2)
    1c44:	18c00217 	ldw	r3,8(r3)
    1c48:	10c00215 	stw	r3,8(r2)
    1c4c:	a80b883a 	mov	r5,r21
    1c50:	a009883a 	mov	r4,r20
    1c54:	000290c0 	call	290c <_free_r>
    1c58:	a009883a 	mov	r4,r20
    1c5c:	00036fc0 	call	36fc <__malloc_unlock>
    1c60:	9005883a 	mov	r2,r18
    1c64:	00001206 	br	1cb0 <_realloc_r+0x170>
    1c68:	00c00404 	movi	r3,16
    1c6c:	1823883a 	mov	r17,r3
    1c70:	003fce06 	br	1bac <__alt_data_end+0xfffe1bac>
    1c74:	a825883a 	mov	r18,r21
    1c78:	8445c83a 	sub	r2,r16,r17
    1c7c:	00c003c4 	movi	r3,15
    1c80:	18802636 	bltu	r3,r2,1d1c <_realloc_r+0x1dc>
    1c84:	99800117 	ldw	r6,4(r19)
    1c88:	9c07883a 	add	r3,r19,r16
    1c8c:	3180004c 	andi	r6,r6,1
    1c90:	3420b03a 	or	r16,r6,r16
    1c94:	9c000115 	stw	r16,4(r19)
    1c98:	18800117 	ldw	r2,4(r3)
    1c9c:	10800054 	ori	r2,r2,1
    1ca0:	18800115 	stw	r2,4(r3)
    1ca4:	a009883a 	mov	r4,r20
    1ca8:	00036fc0 	call	36fc <__malloc_unlock>
    1cac:	9005883a 	mov	r2,r18
    1cb0:	dfc00917 	ldw	ra,36(sp)
    1cb4:	df000817 	ldw	fp,32(sp)
    1cb8:	ddc00717 	ldw	r23,28(sp)
    1cbc:	dd800617 	ldw	r22,24(sp)
    1cc0:	dd400517 	ldw	r21,20(sp)
    1cc4:	dd000417 	ldw	r20,16(sp)
    1cc8:	dcc00317 	ldw	r19,12(sp)
    1ccc:	dc800217 	ldw	r18,8(sp)
    1cd0:	dc400117 	ldw	r17,4(sp)
    1cd4:	dc000017 	ldw	r16,0(sp)
    1cd8:	dec00a04 	addi	sp,sp,40
    1cdc:	f800283a 	ret
    1ce0:	017fff04 	movi	r5,-4
    1ce4:	414a703a 	and	r5,r8,r5
    1ce8:	814d883a 	add	r6,r16,r5
    1cec:	30c01f16 	blt	r6,r3,1d6c <_realloc_r+0x22c>
    1cf0:	20800317 	ldw	r2,12(r4)
    1cf4:	20c00217 	ldw	r3,8(r4)
    1cf8:	a825883a 	mov	r18,r21
    1cfc:	3021883a 	mov	r16,r6
    1d00:	18800315 	stw	r2,12(r3)
    1d04:	10c00215 	stw	r3,8(r2)
    1d08:	003fdb06 	br	1c78 <__alt_data_end+0xfffe1c78>
    1d0c:	00800304 	movi	r2,12
    1d10:	a0800015 	stw	r2,0(r20)
    1d14:	0005883a 	mov	r2,zero
    1d18:	003fe506 	br	1cb0 <__alt_data_end+0xfffe1cb0>
    1d1c:	98c00117 	ldw	r3,4(r19)
    1d20:	9c4b883a 	add	r5,r19,r17
    1d24:	11000054 	ori	r4,r2,1
    1d28:	18c0004c 	andi	r3,r3,1
    1d2c:	1c62b03a 	or	r17,r3,r17
    1d30:	9c400115 	stw	r17,4(r19)
    1d34:	29000115 	stw	r4,4(r5)
    1d38:	2885883a 	add	r2,r5,r2
    1d3c:	10c00117 	ldw	r3,4(r2)
    1d40:	29400204 	addi	r5,r5,8
    1d44:	a009883a 	mov	r4,r20
    1d48:	18c00054 	ori	r3,r3,1
    1d4c:	10c00115 	stw	r3,4(r2)
    1d50:	000290c0 	call	290c <_free_r>
    1d54:	003fd306 	br	1ca4 <__alt_data_end+0xfffe1ca4>
    1d58:	017fff04 	movi	r5,-4
    1d5c:	414a703a 	and	r5,r8,r5
    1d60:	89800404 	addi	r6,r17,16
    1d64:	8151883a 	add	r8,r16,r5
    1d68:	4180590e 	bge	r8,r6,1ed0 <_realloc_r+0x390>
    1d6c:	1080004c 	andi	r2,r2,1
    1d70:	103f9e1e 	bne	r2,zero,1bec <__alt_data_end+0xfffe1bec>
    1d74:	adbffe17 	ldw	r22,-8(r21)
    1d78:	00bfff04 	movi	r2,-4
    1d7c:	9dadc83a 	sub	r22,r19,r22
    1d80:	b1800117 	ldw	r6,4(r22)
    1d84:	3084703a 	and	r2,r6,r2
    1d88:	20002026 	beq	r4,zero,1e0c <_realloc_r+0x2cc>
    1d8c:	80af883a 	add	r23,r16,r2
    1d90:	b96f883a 	add	r23,r23,r5
    1d94:	21c05f26 	beq	r4,r7,1f14 <_realloc_r+0x3d4>
    1d98:	b8c01c16 	blt	r23,r3,1e0c <_realloc_r+0x2cc>
    1d9c:	20800317 	ldw	r2,12(r4)
    1da0:	20c00217 	ldw	r3,8(r4)
    1da4:	81bfff04 	addi	r6,r16,-4
    1da8:	01000904 	movi	r4,36
    1dac:	18800315 	stw	r2,12(r3)
    1db0:	10c00215 	stw	r3,8(r2)
    1db4:	b0c00217 	ldw	r3,8(r22)
    1db8:	b0800317 	ldw	r2,12(r22)
    1dbc:	b4800204 	addi	r18,r22,8
    1dc0:	18800315 	stw	r2,12(r3)
    1dc4:	10c00215 	stw	r3,8(r2)
    1dc8:	21801b36 	bltu	r4,r6,1e38 <_realloc_r+0x2f8>
    1dcc:	008004c4 	movi	r2,19
    1dd0:	1180352e 	bgeu	r2,r6,1ea8 <_realloc_r+0x368>
    1dd4:	a8800017 	ldw	r2,0(r21)
    1dd8:	b0800215 	stw	r2,8(r22)
    1ddc:	a8800117 	ldw	r2,4(r21)
    1de0:	b0800315 	stw	r2,12(r22)
    1de4:	008006c4 	movi	r2,27
    1de8:	11807f36 	bltu	r2,r6,1fe8 <_realloc_r+0x4a8>
    1dec:	b0800404 	addi	r2,r22,16
    1df0:	ad400204 	addi	r21,r21,8
    1df4:	00002d06 	br	1eac <_realloc_r+0x36c>
    1df8:	adbffe17 	ldw	r22,-8(r21)
    1dfc:	00bfff04 	movi	r2,-4
    1e00:	9dadc83a 	sub	r22,r19,r22
    1e04:	b1000117 	ldw	r4,4(r22)
    1e08:	2084703a 	and	r2,r4,r2
    1e0c:	b03f7726 	beq	r22,zero,1bec <__alt_data_end+0xfffe1bec>
    1e10:	80af883a 	add	r23,r16,r2
    1e14:	b8ff7516 	blt	r23,r3,1bec <__alt_data_end+0xfffe1bec>
    1e18:	b0800317 	ldw	r2,12(r22)
    1e1c:	b0c00217 	ldw	r3,8(r22)
    1e20:	81bfff04 	addi	r6,r16,-4
    1e24:	01000904 	movi	r4,36
    1e28:	18800315 	stw	r2,12(r3)
    1e2c:	10c00215 	stw	r3,8(r2)
    1e30:	b4800204 	addi	r18,r22,8
    1e34:	21bfe52e 	bgeu	r4,r6,1dcc <__alt_data_end+0xfffe1dcc>
    1e38:	a80b883a 	mov	r5,r21
    1e3c:	9009883a 	mov	r4,r18
    1e40:	00018bc0 	call	18bc <memmove>
    1e44:	b821883a 	mov	r16,r23
    1e48:	b027883a 	mov	r19,r22
    1e4c:	003f8a06 	br	1c78 <__alt_data_end+0xfffe1c78>
    1e50:	300b883a 	mov	r5,r6
    1e54:	dfc00917 	ldw	ra,36(sp)
    1e58:	df000817 	ldw	fp,32(sp)
    1e5c:	ddc00717 	ldw	r23,28(sp)
    1e60:	dd800617 	ldw	r22,24(sp)
    1e64:	dd400517 	ldw	r21,20(sp)
    1e68:	dd000417 	ldw	r20,16(sp)
    1e6c:	dcc00317 	ldw	r19,12(sp)
    1e70:	dc800217 	ldw	r18,8(sp)
    1e74:	dc400117 	ldw	r17,4(sp)
    1e78:	dc000017 	ldw	r16,0(sp)
    1e7c:	dec00a04 	addi	sp,sp,40
    1e80:	0000e841 	jmpi	e84 <_malloc_r>
    1e84:	a8c00017 	ldw	r3,0(r21)
    1e88:	90c00015 	stw	r3,0(r18)
    1e8c:	a8c00117 	ldw	r3,4(r21)
    1e90:	90c00115 	stw	r3,4(r18)
    1e94:	00c006c4 	movi	r3,27
    1e98:	19804536 	bltu	r3,r6,1fb0 <_realloc_r+0x470>
    1e9c:	90800204 	addi	r2,r18,8
    1ea0:	a8c00204 	addi	r3,r21,8
    1ea4:	003f6306 	br	1c34 <__alt_data_end+0xfffe1c34>
    1ea8:	9005883a 	mov	r2,r18
    1eac:	a8c00017 	ldw	r3,0(r21)
    1eb0:	b821883a 	mov	r16,r23
    1eb4:	b027883a 	mov	r19,r22
    1eb8:	10c00015 	stw	r3,0(r2)
    1ebc:	a8c00117 	ldw	r3,4(r21)
    1ec0:	10c00115 	stw	r3,4(r2)
    1ec4:	a8c00217 	ldw	r3,8(r21)
    1ec8:	10c00215 	stw	r3,8(r2)
    1ecc:	003f6a06 	br	1c78 <__alt_data_end+0xfffe1c78>
    1ed0:	9c67883a 	add	r19,r19,r17
    1ed4:	4445c83a 	sub	r2,r8,r17
    1ed8:	e4c00215 	stw	r19,8(fp)
    1edc:	10800054 	ori	r2,r2,1
    1ee0:	98800115 	stw	r2,4(r19)
    1ee4:	a8bfff17 	ldw	r2,-4(r21)
    1ee8:	a009883a 	mov	r4,r20
    1eec:	1080004c 	andi	r2,r2,1
    1ef0:	1462b03a 	or	r17,r2,r17
    1ef4:	ac7fff15 	stw	r17,-4(r21)
    1ef8:	00036fc0 	call	36fc <__malloc_unlock>
    1efc:	a805883a 	mov	r2,r21
    1f00:	003f6b06 	br	1cb0 <__alt_data_end+0xfffe1cb0>
    1f04:	a80b883a 	mov	r5,r21
    1f08:	9009883a 	mov	r4,r18
    1f0c:	00018bc0 	call	18bc <memmove>
    1f10:	003f4e06 	br	1c4c <__alt_data_end+0xfffe1c4c>
    1f14:	89000404 	addi	r4,r17,16
    1f18:	b93fbc16 	blt	r23,r4,1e0c <__alt_data_end+0xfffe1e0c>
    1f1c:	b0800317 	ldw	r2,12(r22)
    1f20:	b0c00217 	ldw	r3,8(r22)
    1f24:	81bfff04 	addi	r6,r16,-4
    1f28:	01000904 	movi	r4,36
    1f2c:	18800315 	stw	r2,12(r3)
    1f30:	10c00215 	stw	r3,8(r2)
    1f34:	b4800204 	addi	r18,r22,8
    1f38:	21804336 	bltu	r4,r6,2048 <_realloc_r+0x508>
    1f3c:	008004c4 	movi	r2,19
    1f40:	11803f2e 	bgeu	r2,r6,2040 <_realloc_r+0x500>
    1f44:	a8800017 	ldw	r2,0(r21)
    1f48:	b0800215 	stw	r2,8(r22)
    1f4c:	a8800117 	ldw	r2,4(r21)
    1f50:	b0800315 	stw	r2,12(r22)
    1f54:	008006c4 	movi	r2,27
    1f58:	11803f36 	bltu	r2,r6,2058 <_realloc_r+0x518>
    1f5c:	b0800404 	addi	r2,r22,16
    1f60:	ad400204 	addi	r21,r21,8
    1f64:	a8c00017 	ldw	r3,0(r21)
    1f68:	10c00015 	stw	r3,0(r2)
    1f6c:	a8c00117 	ldw	r3,4(r21)
    1f70:	10c00115 	stw	r3,4(r2)
    1f74:	a8c00217 	ldw	r3,8(r21)
    1f78:	10c00215 	stw	r3,8(r2)
    1f7c:	b447883a 	add	r3,r22,r17
    1f80:	bc45c83a 	sub	r2,r23,r17
    1f84:	e0c00215 	stw	r3,8(fp)
    1f88:	10800054 	ori	r2,r2,1
    1f8c:	18800115 	stw	r2,4(r3)
    1f90:	b0800117 	ldw	r2,4(r22)
    1f94:	a009883a 	mov	r4,r20
    1f98:	1080004c 	andi	r2,r2,1
    1f9c:	1462b03a 	or	r17,r2,r17
    1fa0:	b4400115 	stw	r17,4(r22)
    1fa4:	00036fc0 	call	36fc <__malloc_unlock>
    1fa8:	9005883a 	mov	r2,r18
    1fac:	003f4006 	br	1cb0 <__alt_data_end+0xfffe1cb0>
    1fb0:	a8c00217 	ldw	r3,8(r21)
    1fb4:	90c00215 	stw	r3,8(r18)
    1fb8:	a8c00317 	ldw	r3,12(r21)
    1fbc:	90c00315 	stw	r3,12(r18)
    1fc0:	30801126 	beq	r6,r2,2008 <_realloc_r+0x4c8>
    1fc4:	90800404 	addi	r2,r18,16
    1fc8:	a8c00404 	addi	r3,r21,16
    1fcc:	003f1906 	br	1c34 <__alt_data_end+0xfffe1c34>
    1fd0:	90ffff17 	ldw	r3,-4(r18)
    1fd4:	00bfff04 	movi	r2,-4
    1fd8:	a825883a 	mov	r18,r21
    1fdc:	1884703a 	and	r2,r3,r2
    1fe0:	80a1883a 	add	r16,r16,r2
    1fe4:	003f2406 	br	1c78 <__alt_data_end+0xfffe1c78>
    1fe8:	a8800217 	ldw	r2,8(r21)
    1fec:	b0800415 	stw	r2,16(r22)
    1ff0:	a8800317 	ldw	r2,12(r21)
    1ff4:	b0800515 	stw	r2,20(r22)
    1ff8:	31000a26 	beq	r6,r4,2024 <_realloc_r+0x4e4>
    1ffc:	b0800604 	addi	r2,r22,24
    2000:	ad400404 	addi	r21,r21,16
    2004:	003fa906 	br	1eac <__alt_data_end+0xfffe1eac>
    2008:	a9000417 	ldw	r4,16(r21)
    200c:	90800604 	addi	r2,r18,24
    2010:	a8c00604 	addi	r3,r21,24
    2014:	91000415 	stw	r4,16(r18)
    2018:	a9000517 	ldw	r4,20(r21)
    201c:	91000515 	stw	r4,20(r18)
    2020:	003f0406 	br	1c34 <__alt_data_end+0xfffe1c34>
    2024:	a8c00417 	ldw	r3,16(r21)
    2028:	ad400604 	addi	r21,r21,24
    202c:	b0800804 	addi	r2,r22,32
    2030:	b0c00615 	stw	r3,24(r22)
    2034:	a8ffff17 	ldw	r3,-4(r21)
    2038:	b0c00715 	stw	r3,28(r22)
    203c:	003f9b06 	br	1eac <__alt_data_end+0xfffe1eac>
    2040:	9005883a 	mov	r2,r18
    2044:	003fc706 	br	1f64 <__alt_data_end+0xfffe1f64>
    2048:	a80b883a 	mov	r5,r21
    204c:	9009883a 	mov	r4,r18
    2050:	00018bc0 	call	18bc <memmove>
    2054:	003fc906 	br	1f7c <__alt_data_end+0xfffe1f7c>
    2058:	a8800217 	ldw	r2,8(r21)
    205c:	b0800415 	stw	r2,16(r22)
    2060:	a8800317 	ldw	r2,12(r21)
    2064:	b0800515 	stw	r2,20(r22)
    2068:	31000726 	beq	r6,r4,2088 <_realloc_r+0x548>
    206c:	b0800604 	addi	r2,r22,24
    2070:	ad400404 	addi	r21,r21,16
    2074:	003fbb06 	br	1f64 <__alt_data_end+0xfffe1f64>
    2078:	a009883a 	mov	r4,r20
    207c:	00036fc0 	call	36fc <__malloc_unlock>
    2080:	0005883a 	mov	r2,zero
    2084:	003f0a06 	br	1cb0 <__alt_data_end+0xfffe1cb0>
    2088:	a8c00417 	ldw	r3,16(r21)
    208c:	ad400604 	addi	r21,r21,24
    2090:	b0800804 	addi	r2,r22,32
    2094:	b0c00615 	stw	r3,24(r22)
    2098:	a8ffff17 	ldw	r3,-4(r21)
    209c:	b0c00715 	stw	r3,28(r22)
    20a0:	003fb006 	br	1f64 <__alt_data_end+0xfffe1f64>

000020a4 <_sbrk_r>:
    20a4:	defffd04 	addi	sp,sp,-12
    20a8:	dc000015 	stw	r16,0(sp)
    20ac:	04000074 	movhi	r16,1
    20b0:	dc400115 	stw	r17,4(sp)
    20b4:	84231404 	addi	r16,r16,-29616
    20b8:	2023883a 	mov	r17,r4
    20bc:	2809883a 	mov	r4,r5
    20c0:	dfc00215 	stw	ra,8(sp)
    20c4:	80000015 	stw	zero,0(r16)
    20c8:	00038e40 	call	38e4 <sbrk>
    20cc:	00ffffc4 	movi	r3,-1
    20d0:	10c00526 	beq	r2,r3,20e8 <_sbrk_r+0x44>
    20d4:	dfc00217 	ldw	ra,8(sp)
    20d8:	dc400117 	ldw	r17,4(sp)
    20dc:	dc000017 	ldw	r16,0(sp)
    20e0:	dec00304 	addi	sp,sp,12
    20e4:	f800283a 	ret
    20e8:	80c00017 	ldw	r3,0(r16)
    20ec:	183ff926 	beq	r3,zero,20d4 <__alt_data_end+0xfffe20d4>
    20f0:	88c00015 	stw	r3,0(r17)
    20f4:	003ff706 	br	20d4 <__alt_data_end+0xfffe20d4>

000020f8 <__sread>:
    20f8:	defffe04 	addi	sp,sp,-8
    20fc:	dc000015 	stw	r16,0(sp)
    2100:	2821883a 	mov	r16,r5
    2104:	2940038f 	ldh	r5,14(r5)
    2108:	dfc00115 	stw	ra,4(sp)
    210c:	0002e380 	call	2e38 <_read_r>
    2110:	10000716 	blt	r2,zero,2130 <__sread+0x38>
    2114:	80c01417 	ldw	r3,80(r16)
    2118:	1887883a 	add	r3,r3,r2
    211c:	80c01415 	stw	r3,80(r16)
    2120:	dfc00117 	ldw	ra,4(sp)
    2124:	dc000017 	ldw	r16,0(sp)
    2128:	dec00204 	addi	sp,sp,8
    212c:	f800283a 	ret
    2130:	80c0030b 	ldhu	r3,12(r16)
    2134:	18fbffcc 	andi	r3,r3,61439
    2138:	80c0030d 	sth	r3,12(r16)
    213c:	dfc00117 	ldw	ra,4(sp)
    2140:	dc000017 	ldw	r16,0(sp)
    2144:	dec00204 	addi	sp,sp,8
    2148:	f800283a 	ret

0000214c <__seofread>:
    214c:	0005883a 	mov	r2,zero
    2150:	f800283a 	ret

00002154 <__swrite>:
    2154:	2880030b 	ldhu	r2,12(r5)
    2158:	defffb04 	addi	sp,sp,-20
    215c:	dcc00315 	stw	r19,12(sp)
    2160:	dc800215 	stw	r18,8(sp)
    2164:	dc400115 	stw	r17,4(sp)
    2168:	dc000015 	stw	r16,0(sp)
    216c:	dfc00415 	stw	ra,16(sp)
    2170:	10c0400c 	andi	r3,r2,256
    2174:	2821883a 	mov	r16,r5
    2178:	2023883a 	mov	r17,r4
    217c:	3025883a 	mov	r18,r6
    2180:	3827883a 	mov	r19,r7
    2184:	18000526 	beq	r3,zero,219c <__swrite+0x48>
    2188:	2940038f 	ldh	r5,14(r5)
    218c:	01c00084 	movi	r7,2
    2190:	000d883a 	mov	r6,zero
    2194:	0002c1c0 	call	2c1c <_lseek_r>
    2198:	8080030b 	ldhu	r2,12(r16)
    219c:	8140038f 	ldh	r5,14(r16)
    21a0:	10bbffcc 	andi	r2,r2,61439
    21a4:	980f883a 	mov	r7,r19
    21a8:	900d883a 	mov	r6,r18
    21ac:	8809883a 	mov	r4,r17
    21b0:	8080030d 	sth	r2,12(r16)
    21b4:	dfc00417 	ldw	ra,16(sp)
    21b8:	dcc00317 	ldw	r19,12(sp)
    21bc:	dc800217 	ldw	r18,8(sp)
    21c0:	dc400117 	ldw	r17,4(sp)
    21c4:	dc000017 	ldw	r16,0(sp)
    21c8:	dec00504 	addi	sp,sp,20
    21cc:	00022341 	jmpi	2234 <_write_r>

000021d0 <__sseek>:
    21d0:	defffe04 	addi	sp,sp,-8
    21d4:	dc000015 	stw	r16,0(sp)
    21d8:	2821883a 	mov	r16,r5
    21dc:	2940038f 	ldh	r5,14(r5)
    21e0:	dfc00115 	stw	ra,4(sp)
    21e4:	0002c1c0 	call	2c1c <_lseek_r>
    21e8:	00ffffc4 	movi	r3,-1
    21ec:	10c00826 	beq	r2,r3,2210 <__sseek+0x40>
    21f0:	80c0030b 	ldhu	r3,12(r16)
    21f4:	80801415 	stw	r2,80(r16)
    21f8:	18c40014 	ori	r3,r3,4096
    21fc:	80c0030d 	sth	r3,12(r16)
    2200:	dfc00117 	ldw	ra,4(sp)
    2204:	dc000017 	ldw	r16,0(sp)
    2208:	dec00204 	addi	sp,sp,8
    220c:	f800283a 	ret
    2210:	80c0030b 	ldhu	r3,12(r16)
    2214:	18fbffcc 	andi	r3,r3,61439
    2218:	80c0030d 	sth	r3,12(r16)
    221c:	dfc00117 	ldw	ra,4(sp)
    2220:	dc000017 	ldw	r16,0(sp)
    2224:	dec00204 	addi	sp,sp,8
    2228:	f800283a 	ret

0000222c <__sclose>:
    222c:	2940038f 	ldh	r5,14(r5)
    2230:	00023e81 	jmpi	23e8 <_close_r>

00002234 <_write_r>:
    2234:	defffd04 	addi	sp,sp,-12
    2238:	2805883a 	mov	r2,r5
    223c:	dc000015 	stw	r16,0(sp)
    2240:	04000074 	movhi	r16,1
    2244:	dc400115 	stw	r17,4(sp)
    2248:	300b883a 	mov	r5,r6
    224c:	84231404 	addi	r16,r16,-29616
    2250:	2023883a 	mov	r17,r4
    2254:	380d883a 	mov	r6,r7
    2258:	1009883a 	mov	r4,r2
    225c:	dfc00215 	stw	ra,8(sp)
    2260:	80000015 	stw	zero,0(r16)
    2264:	00039d00 	call	39d0 <write>
    2268:	00ffffc4 	movi	r3,-1
    226c:	10c00526 	beq	r2,r3,2284 <_write_r+0x50>
    2270:	dfc00217 	ldw	ra,8(sp)
    2274:	dc400117 	ldw	r17,4(sp)
    2278:	dc000017 	ldw	r16,0(sp)
    227c:	dec00304 	addi	sp,sp,12
    2280:	f800283a 	ret
    2284:	80c00017 	ldw	r3,0(r16)
    2288:	183ff926 	beq	r3,zero,2270 <__alt_data_end+0xfffe2270>
    228c:	88c00015 	stw	r3,0(r17)
    2290:	003ff706 	br	2270 <__alt_data_end+0xfffe2270>

00002294 <__swsetup_r>:
    2294:	00800034 	movhi	r2,0
    2298:	defffd04 	addi	sp,sp,-12
    229c:	109c6904 	addi	r2,r2,29092
    22a0:	dc400115 	stw	r17,4(sp)
    22a4:	2023883a 	mov	r17,r4
    22a8:	11000017 	ldw	r4,0(r2)
    22ac:	dc000015 	stw	r16,0(sp)
    22b0:	dfc00215 	stw	ra,8(sp)
    22b4:	2821883a 	mov	r16,r5
    22b8:	20000226 	beq	r4,zero,22c4 <__swsetup_r+0x30>
    22bc:	20800e17 	ldw	r2,56(r4)
    22c0:	10003126 	beq	r2,zero,2388 <__swsetup_r+0xf4>
    22c4:	8080030b 	ldhu	r2,12(r16)
    22c8:	10c0020c 	andi	r3,r2,8
    22cc:	1009883a 	mov	r4,r2
    22d0:	18000f26 	beq	r3,zero,2310 <__swsetup_r+0x7c>
    22d4:	80c00417 	ldw	r3,16(r16)
    22d8:	18001526 	beq	r3,zero,2330 <__swsetup_r+0x9c>
    22dc:	1100004c 	andi	r4,r2,1
    22e0:	20001c1e 	bne	r4,zero,2354 <__swsetup_r+0xc0>
    22e4:	1080008c 	andi	r2,r2,2
    22e8:	1000291e 	bne	r2,zero,2390 <__swsetup_r+0xfc>
    22ec:	80800517 	ldw	r2,20(r16)
    22f0:	80800215 	stw	r2,8(r16)
    22f4:	18001c26 	beq	r3,zero,2368 <__swsetup_r+0xd4>
    22f8:	0005883a 	mov	r2,zero
    22fc:	dfc00217 	ldw	ra,8(sp)
    2300:	dc400117 	ldw	r17,4(sp)
    2304:	dc000017 	ldw	r16,0(sp)
    2308:	dec00304 	addi	sp,sp,12
    230c:	f800283a 	ret
    2310:	2080040c 	andi	r2,r4,16
    2314:	10002e26 	beq	r2,zero,23d0 <__swsetup_r+0x13c>
    2318:	2080010c 	andi	r2,r4,4
    231c:	10001e1e 	bne	r2,zero,2398 <__swsetup_r+0x104>
    2320:	80c00417 	ldw	r3,16(r16)
    2324:	20800214 	ori	r2,r4,8
    2328:	8080030d 	sth	r2,12(r16)
    232c:	183feb1e 	bne	r3,zero,22dc <__alt_data_end+0xfffe22dc>
    2330:	1100a00c 	andi	r4,r2,640
    2334:	01408004 	movi	r5,512
    2338:	217fe826 	beq	r4,r5,22dc <__alt_data_end+0xfffe22dc>
    233c:	800b883a 	mov	r5,r16
    2340:	8809883a 	mov	r4,r17
    2344:	0002c7c0 	call	2c7c <__smakebuf_r>
    2348:	8080030b 	ldhu	r2,12(r16)
    234c:	80c00417 	ldw	r3,16(r16)
    2350:	003fe206 	br	22dc <__alt_data_end+0xfffe22dc>
    2354:	80800517 	ldw	r2,20(r16)
    2358:	80000215 	stw	zero,8(r16)
    235c:	0085c83a 	sub	r2,zero,r2
    2360:	80800615 	stw	r2,24(r16)
    2364:	183fe41e 	bne	r3,zero,22f8 <__alt_data_end+0xfffe22f8>
    2368:	80c0030b 	ldhu	r3,12(r16)
    236c:	0005883a 	mov	r2,zero
    2370:	1900200c 	andi	r4,r3,128
    2374:	203fe126 	beq	r4,zero,22fc <__alt_data_end+0xfffe22fc>
    2378:	18c01014 	ori	r3,r3,64
    237c:	80c0030d 	sth	r3,12(r16)
    2380:	00bfffc4 	movi	r2,-1
    2384:	003fdd06 	br	22fc <__alt_data_end+0xfffe22fc>
    2388:	00007e40 	call	7e4 <__sinit>
    238c:	003fcd06 	br	22c4 <__alt_data_end+0xfffe22c4>
    2390:	0005883a 	mov	r2,zero
    2394:	003fd606 	br	22f0 <__alt_data_end+0xfffe22f0>
    2398:	81400c17 	ldw	r5,48(r16)
    239c:	28000626 	beq	r5,zero,23b8 <__swsetup_r+0x124>
    23a0:	80801004 	addi	r2,r16,64
    23a4:	28800326 	beq	r5,r2,23b4 <__swsetup_r+0x120>
    23a8:	8809883a 	mov	r4,r17
    23ac:	000290c0 	call	290c <_free_r>
    23b0:	8100030b 	ldhu	r4,12(r16)
    23b4:	80000c15 	stw	zero,48(r16)
    23b8:	80c00417 	ldw	r3,16(r16)
    23bc:	00bff6c4 	movi	r2,-37
    23c0:	1108703a 	and	r4,r2,r4
    23c4:	80000115 	stw	zero,4(r16)
    23c8:	80c00015 	stw	r3,0(r16)
    23cc:	003fd506 	br	2324 <__alt_data_end+0xfffe2324>
    23d0:	00800244 	movi	r2,9
    23d4:	88800015 	stw	r2,0(r17)
    23d8:	20801014 	ori	r2,r4,64
    23dc:	8080030d 	sth	r2,12(r16)
    23e0:	00bfffc4 	movi	r2,-1
    23e4:	003fc506 	br	22fc <__alt_data_end+0xfffe22fc>

000023e8 <_close_r>:
    23e8:	defffd04 	addi	sp,sp,-12
    23ec:	dc000015 	stw	r16,0(sp)
    23f0:	04000074 	movhi	r16,1
    23f4:	dc400115 	stw	r17,4(sp)
    23f8:	84231404 	addi	r16,r16,-29616
    23fc:	2023883a 	mov	r17,r4
    2400:	2809883a 	mov	r4,r5
    2404:	dfc00215 	stw	ra,8(sp)
    2408:	80000015 	stw	zero,0(r16)
    240c:	00031600 	call	3160 <close>
    2410:	00ffffc4 	movi	r3,-1
    2414:	10c00526 	beq	r2,r3,242c <_close_r+0x44>
    2418:	dfc00217 	ldw	ra,8(sp)
    241c:	dc400117 	ldw	r17,4(sp)
    2420:	dc000017 	ldw	r16,0(sp)
    2424:	dec00304 	addi	sp,sp,12
    2428:	f800283a 	ret
    242c:	80c00017 	ldw	r3,0(r16)
    2430:	183ff926 	beq	r3,zero,2418 <__alt_data_end+0xfffe2418>
    2434:	88c00015 	stw	r3,0(r17)
    2438:	003ff706 	br	2418 <__alt_data_end+0xfffe2418>

0000243c <_fclose_r>:
    243c:	28003926 	beq	r5,zero,2524 <_fclose_r+0xe8>
    2440:	defffc04 	addi	sp,sp,-16
    2444:	dc400115 	stw	r17,4(sp)
    2448:	dc000015 	stw	r16,0(sp)
    244c:	dfc00315 	stw	ra,12(sp)
    2450:	dc800215 	stw	r18,8(sp)
    2454:	2023883a 	mov	r17,r4
    2458:	2821883a 	mov	r16,r5
    245c:	20000226 	beq	r4,zero,2468 <_fclose_r+0x2c>
    2460:	20800e17 	ldw	r2,56(r4)
    2464:	10002726 	beq	r2,zero,2504 <_fclose_r+0xc8>
    2468:	8080030f 	ldh	r2,12(r16)
    246c:	1000071e 	bne	r2,zero,248c <_fclose_r+0x50>
    2470:	0005883a 	mov	r2,zero
    2474:	dfc00317 	ldw	ra,12(sp)
    2478:	dc800217 	ldw	r18,8(sp)
    247c:	dc400117 	ldw	r17,4(sp)
    2480:	dc000017 	ldw	r16,0(sp)
    2484:	dec00404 	addi	sp,sp,16
    2488:	f800283a 	ret
    248c:	800b883a 	mov	r5,r16
    2490:	8809883a 	mov	r4,r17
    2494:	00025400 	call	2540 <__sflush_r>
    2498:	1025883a 	mov	r18,r2
    249c:	80800b17 	ldw	r2,44(r16)
    24a0:	10000426 	beq	r2,zero,24b4 <_fclose_r+0x78>
    24a4:	81400717 	ldw	r5,28(r16)
    24a8:	8809883a 	mov	r4,r17
    24ac:	103ee83a 	callr	r2
    24b0:	10001616 	blt	r2,zero,250c <_fclose_r+0xd0>
    24b4:	8080030b 	ldhu	r2,12(r16)
    24b8:	1080200c 	andi	r2,r2,128
    24bc:	1000151e 	bne	r2,zero,2514 <_fclose_r+0xd8>
    24c0:	81400c17 	ldw	r5,48(r16)
    24c4:	28000526 	beq	r5,zero,24dc <_fclose_r+0xa0>
    24c8:	80801004 	addi	r2,r16,64
    24cc:	28800226 	beq	r5,r2,24d8 <_fclose_r+0x9c>
    24d0:	8809883a 	mov	r4,r17
    24d4:	000290c0 	call	290c <_free_r>
    24d8:	80000c15 	stw	zero,48(r16)
    24dc:	81401117 	ldw	r5,68(r16)
    24e0:	28000326 	beq	r5,zero,24f0 <_fclose_r+0xb4>
    24e4:	8809883a 	mov	r4,r17
    24e8:	000290c0 	call	290c <_free_r>
    24ec:	80001115 	stw	zero,68(r16)
    24f0:	00007f40 	call	7f4 <__sfp_lock_acquire>
    24f4:	8000030d 	sth	zero,12(r16)
    24f8:	00007f80 	call	7f8 <__sfp_lock_release>
    24fc:	9005883a 	mov	r2,r18
    2500:	003fdc06 	br	2474 <__alt_data_end+0xfffe2474>
    2504:	00007e40 	call	7e4 <__sinit>
    2508:	003fd706 	br	2468 <__alt_data_end+0xfffe2468>
    250c:	04bfffc4 	movi	r18,-1
    2510:	003fe806 	br	24b4 <__alt_data_end+0xfffe24b4>
    2514:	81400417 	ldw	r5,16(r16)
    2518:	8809883a 	mov	r4,r17
    251c:	000290c0 	call	290c <_free_r>
    2520:	003fe706 	br	24c0 <__alt_data_end+0xfffe24c0>
    2524:	0005883a 	mov	r2,zero
    2528:	f800283a 	ret

0000252c <fclose>:
    252c:	00800034 	movhi	r2,0
    2530:	109c6904 	addi	r2,r2,29092
    2534:	200b883a 	mov	r5,r4
    2538:	11000017 	ldw	r4,0(r2)
    253c:	000243c1 	jmpi	243c <_fclose_r>

00002540 <__sflush_r>:
    2540:	2880030b 	ldhu	r2,12(r5)
    2544:	defffb04 	addi	sp,sp,-20
    2548:	dcc00315 	stw	r19,12(sp)
    254c:	dc400115 	stw	r17,4(sp)
    2550:	dfc00415 	stw	ra,16(sp)
    2554:	dc800215 	stw	r18,8(sp)
    2558:	dc000015 	stw	r16,0(sp)
    255c:	10c0020c 	andi	r3,r2,8
    2560:	2823883a 	mov	r17,r5
    2564:	2027883a 	mov	r19,r4
    2568:	1800311e 	bne	r3,zero,2630 <__sflush_r+0xf0>
    256c:	28c00117 	ldw	r3,4(r5)
    2570:	10820014 	ori	r2,r2,2048
    2574:	2880030d 	sth	r2,12(r5)
    2578:	00c04b0e 	bge	zero,r3,26a8 <__sflush_r+0x168>
    257c:	8a000a17 	ldw	r8,40(r17)
    2580:	40002326 	beq	r8,zero,2610 <__sflush_r+0xd0>
    2584:	9c000017 	ldw	r16,0(r19)
    2588:	10c4000c 	andi	r3,r2,4096
    258c:	98000015 	stw	zero,0(r19)
    2590:	18004826 	beq	r3,zero,26b4 <__sflush_r+0x174>
    2594:	89801417 	ldw	r6,80(r17)
    2598:	10c0010c 	andi	r3,r2,4
    259c:	18000626 	beq	r3,zero,25b8 <__sflush_r+0x78>
    25a0:	88c00117 	ldw	r3,4(r17)
    25a4:	88800c17 	ldw	r2,48(r17)
    25a8:	30cdc83a 	sub	r6,r6,r3
    25ac:	10000226 	beq	r2,zero,25b8 <__sflush_r+0x78>
    25b0:	88800f17 	ldw	r2,60(r17)
    25b4:	308dc83a 	sub	r6,r6,r2
    25b8:	89400717 	ldw	r5,28(r17)
    25bc:	000f883a 	mov	r7,zero
    25c0:	9809883a 	mov	r4,r19
    25c4:	403ee83a 	callr	r8
    25c8:	00ffffc4 	movi	r3,-1
    25cc:	10c04426 	beq	r2,r3,26e0 <__sflush_r+0x1a0>
    25d0:	88c0030b 	ldhu	r3,12(r17)
    25d4:	89000417 	ldw	r4,16(r17)
    25d8:	88000115 	stw	zero,4(r17)
    25dc:	197dffcc 	andi	r5,r3,63487
    25e0:	8940030d 	sth	r5,12(r17)
    25e4:	89000015 	stw	r4,0(r17)
    25e8:	18c4000c 	andi	r3,r3,4096
    25ec:	18002c1e 	bne	r3,zero,26a0 <__sflush_r+0x160>
    25f0:	89400c17 	ldw	r5,48(r17)
    25f4:	9c000015 	stw	r16,0(r19)
    25f8:	28000526 	beq	r5,zero,2610 <__sflush_r+0xd0>
    25fc:	88801004 	addi	r2,r17,64
    2600:	28800226 	beq	r5,r2,260c <__sflush_r+0xcc>
    2604:	9809883a 	mov	r4,r19
    2608:	000290c0 	call	290c <_free_r>
    260c:	88000c15 	stw	zero,48(r17)
    2610:	0005883a 	mov	r2,zero
    2614:	dfc00417 	ldw	ra,16(sp)
    2618:	dcc00317 	ldw	r19,12(sp)
    261c:	dc800217 	ldw	r18,8(sp)
    2620:	dc400117 	ldw	r17,4(sp)
    2624:	dc000017 	ldw	r16,0(sp)
    2628:	dec00504 	addi	sp,sp,20
    262c:	f800283a 	ret
    2630:	2c800417 	ldw	r18,16(r5)
    2634:	903ff626 	beq	r18,zero,2610 <__alt_data_end+0xfffe2610>
    2638:	2c000017 	ldw	r16,0(r5)
    263c:	108000cc 	andi	r2,r2,3
    2640:	2c800015 	stw	r18,0(r5)
    2644:	84a1c83a 	sub	r16,r16,r18
    2648:	1000131e 	bne	r2,zero,2698 <__sflush_r+0x158>
    264c:	28800517 	ldw	r2,20(r5)
    2650:	88800215 	stw	r2,8(r17)
    2654:	04000316 	blt	zero,r16,2664 <__sflush_r+0x124>
    2658:	003fed06 	br	2610 <__alt_data_end+0xfffe2610>
    265c:	90a5883a 	add	r18,r18,r2
    2660:	043feb0e 	bge	zero,r16,2610 <__alt_data_end+0xfffe2610>
    2664:	88800917 	ldw	r2,36(r17)
    2668:	89400717 	ldw	r5,28(r17)
    266c:	800f883a 	mov	r7,r16
    2670:	900d883a 	mov	r6,r18
    2674:	9809883a 	mov	r4,r19
    2678:	103ee83a 	callr	r2
    267c:	80a1c83a 	sub	r16,r16,r2
    2680:	00bff616 	blt	zero,r2,265c <__alt_data_end+0xfffe265c>
    2684:	88c0030b 	ldhu	r3,12(r17)
    2688:	00bfffc4 	movi	r2,-1
    268c:	18c01014 	ori	r3,r3,64
    2690:	88c0030d 	sth	r3,12(r17)
    2694:	003fdf06 	br	2614 <__alt_data_end+0xfffe2614>
    2698:	0005883a 	mov	r2,zero
    269c:	003fec06 	br	2650 <__alt_data_end+0xfffe2650>
    26a0:	88801415 	stw	r2,80(r17)
    26a4:	003fd206 	br	25f0 <__alt_data_end+0xfffe25f0>
    26a8:	28c00f17 	ldw	r3,60(r5)
    26ac:	00ffb316 	blt	zero,r3,257c <__alt_data_end+0xfffe257c>
    26b0:	003fd706 	br	2610 <__alt_data_end+0xfffe2610>
    26b4:	89400717 	ldw	r5,28(r17)
    26b8:	000d883a 	mov	r6,zero
    26bc:	01c00044 	movi	r7,1
    26c0:	9809883a 	mov	r4,r19
    26c4:	403ee83a 	callr	r8
    26c8:	100d883a 	mov	r6,r2
    26cc:	00bfffc4 	movi	r2,-1
    26d0:	30801426 	beq	r6,r2,2724 <__sflush_r+0x1e4>
    26d4:	8880030b 	ldhu	r2,12(r17)
    26d8:	8a000a17 	ldw	r8,40(r17)
    26dc:	003fae06 	br	2598 <__alt_data_end+0xfffe2598>
    26e0:	98c00017 	ldw	r3,0(r19)
    26e4:	183fba26 	beq	r3,zero,25d0 <__alt_data_end+0xfffe25d0>
    26e8:	01000744 	movi	r4,29
    26ec:	19000626 	beq	r3,r4,2708 <__sflush_r+0x1c8>
    26f0:	01000584 	movi	r4,22
    26f4:	19000426 	beq	r3,r4,2708 <__sflush_r+0x1c8>
    26f8:	88c0030b 	ldhu	r3,12(r17)
    26fc:	18c01014 	ori	r3,r3,64
    2700:	88c0030d 	sth	r3,12(r17)
    2704:	003fc306 	br	2614 <__alt_data_end+0xfffe2614>
    2708:	8880030b 	ldhu	r2,12(r17)
    270c:	88c00417 	ldw	r3,16(r17)
    2710:	88000115 	stw	zero,4(r17)
    2714:	10bdffcc 	andi	r2,r2,63487
    2718:	8880030d 	sth	r2,12(r17)
    271c:	88c00015 	stw	r3,0(r17)
    2720:	003fb306 	br	25f0 <__alt_data_end+0xfffe25f0>
    2724:	98800017 	ldw	r2,0(r19)
    2728:	103fea26 	beq	r2,zero,26d4 <__alt_data_end+0xfffe26d4>
    272c:	00c00744 	movi	r3,29
    2730:	10c00226 	beq	r2,r3,273c <__sflush_r+0x1fc>
    2734:	00c00584 	movi	r3,22
    2738:	10c0031e 	bne	r2,r3,2748 <__sflush_r+0x208>
    273c:	9c000015 	stw	r16,0(r19)
    2740:	0005883a 	mov	r2,zero
    2744:	003fb306 	br	2614 <__alt_data_end+0xfffe2614>
    2748:	88c0030b 	ldhu	r3,12(r17)
    274c:	3005883a 	mov	r2,r6
    2750:	18c01014 	ori	r3,r3,64
    2754:	88c0030d 	sth	r3,12(r17)
    2758:	003fae06 	br	2614 <__alt_data_end+0xfffe2614>

0000275c <_fflush_r>:
    275c:	defffd04 	addi	sp,sp,-12
    2760:	dc000115 	stw	r16,4(sp)
    2764:	dfc00215 	stw	ra,8(sp)
    2768:	2021883a 	mov	r16,r4
    276c:	20000226 	beq	r4,zero,2778 <_fflush_r+0x1c>
    2770:	20800e17 	ldw	r2,56(r4)
    2774:	10000c26 	beq	r2,zero,27a8 <_fflush_r+0x4c>
    2778:	2880030f 	ldh	r2,12(r5)
    277c:	1000051e 	bne	r2,zero,2794 <_fflush_r+0x38>
    2780:	0005883a 	mov	r2,zero
    2784:	dfc00217 	ldw	ra,8(sp)
    2788:	dc000117 	ldw	r16,4(sp)
    278c:	dec00304 	addi	sp,sp,12
    2790:	f800283a 	ret
    2794:	8009883a 	mov	r4,r16
    2798:	dfc00217 	ldw	ra,8(sp)
    279c:	dc000117 	ldw	r16,4(sp)
    27a0:	dec00304 	addi	sp,sp,12
    27a4:	00025401 	jmpi	2540 <__sflush_r>
    27a8:	d9400015 	stw	r5,0(sp)
    27ac:	00007e40 	call	7e4 <__sinit>
    27b0:	d9400017 	ldw	r5,0(sp)
    27b4:	003ff006 	br	2778 <__alt_data_end+0xfffe2778>

000027b8 <fflush>:
    27b8:	20000526 	beq	r4,zero,27d0 <fflush+0x18>
    27bc:	00800034 	movhi	r2,0
    27c0:	109c6904 	addi	r2,r2,29092
    27c4:	200b883a 	mov	r5,r4
    27c8:	11000017 	ldw	r4,0(r2)
    27cc:	000275c1 	jmpi	275c <_fflush_r>
    27d0:	00800034 	movhi	r2,0
    27d4:	109c6804 	addi	r2,r2,29088
    27d8:	11000017 	ldw	r4,0(r2)
    27dc:	01400034 	movhi	r5,0
    27e0:	2949d704 	addi	r5,r5,10076
    27e4:	0000dc01 	jmpi	dc0 <_fwalk_reent>

000027e8 <_malloc_trim_r>:
    27e8:	defffb04 	addi	sp,sp,-20
    27ec:	dcc00315 	stw	r19,12(sp)
    27f0:	04c00034 	movhi	r19,0
    27f4:	dc800215 	stw	r18,8(sp)
    27f8:	dc400115 	stw	r17,4(sp)
    27fc:	dc000015 	stw	r16,0(sp)
    2800:	dfc00415 	stw	ra,16(sp)
    2804:	2821883a 	mov	r16,r5
    2808:	9cd6e404 	addi	r19,r19,23440
    280c:	2025883a 	mov	r18,r4
    2810:	00036d80 	call	36d8 <__malloc_lock>
    2814:	98800217 	ldw	r2,8(r19)
    2818:	14400117 	ldw	r17,4(r2)
    281c:	00bfff04 	movi	r2,-4
    2820:	88a2703a 	and	r17,r17,r2
    2824:	8c21c83a 	sub	r16,r17,r16
    2828:	8403fbc4 	addi	r16,r16,4079
    282c:	8020d33a 	srli	r16,r16,12
    2830:	0083ffc4 	movi	r2,4095
    2834:	843fffc4 	addi	r16,r16,-1
    2838:	8020933a 	slli	r16,r16,12
    283c:	1400060e 	bge	r2,r16,2858 <_malloc_trim_r+0x70>
    2840:	000b883a 	mov	r5,zero
    2844:	9009883a 	mov	r4,r18
    2848:	00020a40 	call	20a4 <_sbrk_r>
    284c:	98c00217 	ldw	r3,8(r19)
    2850:	1c47883a 	add	r3,r3,r17
    2854:	10c00a26 	beq	r2,r3,2880 <_malloc_trim_r+0x98>
    2858:	9009883a 	mov	r4,r18
    285c:	00036fc0 	call	36fc <__malloc_unlock>
    2860:	0005883a 	mov	r2,zero
    2864:	dfc00417 	ldw	ra,16(sp)
    2868:	dcc00317 	ldw	r19,12(sp)
    286c:	dc800217 	ldw	r18,8(sp)
    2870:	dc400117 	ldw	r17,4(sp)
    2874:	dc000017 	ldw	r16,0(sp)
    2878:	dec00504 	addi	sp,sp,20
    287c:	f800283a 	ret
    2880:	040bc83a 	sub	r5,zero,r16
    2884:	9009883a 	mov	r4,r18
    2888:	00020a40 	call	20a4 <_sbrk_r>
    288c:	00ffffc4 	movi	r3,-1
    2890:	10c00d26 	beq	r2,r3,28c8 <_malloc_trim_r+0xe0>
    2894:	00c00074 	movhi	r3,1
    2898:	18e31c04 	addi	r3,r3,-29584
    289c:	18800017 	ldw	r2,0(r3)
    28a0:	99000217 	ldw	r4,8(r19)
    28a4:	8c23c83a 	sub	r17,r17,r16
    28a8:	8c400054 	ori	r17,r17,1
    28ac:	1421c83a 	sub	r16,r2,r16
    28b0:	24400115 	stw	r17,4(r4)
    28b4:	9009883a 	mov	r4,r18
    28b8:	1c000015 	stw	r16,0(r3)
    28bc:	00036fc0 	call	36fc <__malloc_unlock>
    28c0:	00800044 	movi	r2,1
    28c4:	003fe706 	br	2864 <__alt_data_end+0xfffe2864>
    28c8:	000b883a 	mov	r5,zero
    28cc:	9009883a 	mov	r4,r18
    28d0:	00020a40 	call	20a4 <_sbrk_r>
    28d4:	99000217 	ldw	r4,8(r19)
    28d8:	014003c4 	movi	r5,15
    28dc:	1107c83a 	sub	r3,r2,r4
    28e0:	28ffdd0e 	bge	r5,r3,2858 <__alt_data_end+0xfffe2858>
    28e4:	01400034 	movhi	r5,0
    28e8:	295c6a04 	addi	r5,r5,29096
    28ec:	29400017 	ldw	r5,0(r5)
    28f0:	18c00054 	ori	r3,r3,1
    28f4:	20c00115 	stw	r3,4(r4)
    28f8:	00c00074 	movhi	r3,1
    28fc:	1145c83a 	sub	r2,r2,r5
    2900:	18e31c04 	addi	r3,r3,-29584
    2904:	18800015 	stw	r2,0(r3)
    2908:	003fd306 	br	2858 <__alt_data_end+0xfffe2858>

0000290c <_free_r>:
    290c:	28004126 	beq	r5,zero,2a14 <_free_r+0x108>
    2910:	defffd04 	addi	sp,sp,-12
    2914:	dc400115 	stw	r17,4(sp)
    2918:	dc000015 	stw	r16,0(sp)
    291c:	2023883a 	mov	r17,r4
    2920:	2821883a 	mov	r16,r5
    2924:	dfc00215 	stw	ra,8(sp)
    2928:	00036d80 	call	36d8 <__malloc_lock>
    292c:	81ffff17 	ldw	r7,-4(r16)
    2930:	00bfff84 	movi	r2,-2
    2934:	01000034 	movhi	r4,0
    2938:	81bffe04 	addi	r6,r16,-8
    293c:	3884703a 	and	r2,r7,r2
    2940:	2116e404 	addi	r4,r4,23440
    2944:	308b883a 	add	r5,r6,r2
    2948:	2a400117 	ldw	r9,4(r5)
    294c:	22000217 	ldw	r8,8(r4)
    2950:	00ffff04 	movi	r3,-4
    2954:	48c6703a 	and	r3,r9,r3
    2958:	2a005726 	beq	r5,r8,2ab8 <_free_r+0x1ac>
    295c:	28c00115 	stw	r3,4(r5)
    2960:	39c0004c 	andi	r7,r7,1
    2964:	3800091e 	bne	r7,zero,298c <_free_r+0x80>
    2968:	823ffe17 	ldw	r8,-8(r16)
    296c:	22400204 	addi	r9,r4,8
    2970:	320dc83a 	sub	r6,r6,r8
    2974:	31c00217 	ldw	r7,8(r6)
    2978:	1205883a 	add	r2,r2,r8
    297c:	3a406526 	beq	r7,r9,2b14 <_free_r+0x208>
    2980:	32000317 	ldw	r8,12(r6)
    2984:	3a000315 	stw	r8,12(r7)
    2988:	41c00215 	stw	r7,8(r8)
    298c:	28cf883a 	add	r7,r5,r3
    2990:	39c00117 	ldw	r7,4(r7)
    2994:	39c0004c 	andi	r7,r7,1
    2998:	38003a26 	beq	r7,zero,2a84 <_free_r+0x178>
    299c:	10c00054 	ori	r3,r2,1
    29a0:	30c00115 	stw	r3,4(r6)
    29a4:	3087883a 	add	r3,r6,r2
    29a8:	18800015 	stw	r2,0(r3)
    29ac:	00c07fc4 	movi	r3,511
    29b0:	18801936 	bltu	r3,r2,2a18 <_free_r+0x10c>
    29b4:	1004d0fa 	srli	r2,r2,3
    29b8:	01c00044 	movi	r7,1
    29bc:	21400117 	ldw	r5,4(r4)
    29c0:	10c00044 	addi	r3,r2,1
    29c4:	18c7883a 	add	r3,r3,r3
    29c8:	1005d0ba 	srai	r2,r2,2
    29cc:	18c7883a 	add	r3,r3,r3
    29d0:	18c7883a 	add	r3,r3,r3
    29d4:	1907883a 	add	r3,r3,r4
    29d8:	3884983a 	sll	r2,r7,r2
    29dc:	19c00017 	ldw	r7,0(r3)
    29e0:	1a3ffe04 	addi	r8,r3,-8
    29e4:	1144b03a 	or	r2,r2,r5
    29e8:	32000315 	stw	r8,12(r6)
    29ec:	31c00215 	stw	r7,8(r6)
    29f0:	20800115 	stw	r2,4(r4)
    29f4:	19800015 	stw	r6,0(r3)
    29f8:	39800315 	stw	r6,12(r7)
    29fc:	8809883a 	mov	r4,r17
    2a00:	dfc00217 	ldw	ra,8(sp)
    2a04:	dc400117 	ldw	r17,4(sp)
    2a08:	dc000017 	ldw	r16,0(sp)
    2a0c:	dec00304 	addi	sp,sp,12
    2a10:	00036fc1 	jmpi	36fc <__malloc_unlock>
    2a14:	f800283a 	ret
    2a18:	100ad27a 	srli	r5,r2,9
    2a1c:	00c00104 	movi	r3,4
    2a20:	19404a36 	bltu	r3,r5,2b4c <_free_r+0x240>
    2a24:	100ad1ba 	srli	r5,r2,6
    2a28:	28c00e44 	addi	r3,r5,57
    2a2c:	18c7883a 	add	r3,r3,r3
    2a30:	29400e04 	addi	r5,r5,56
    2a34:	18c7883a 	add	r3,r3,r3
    2a38:	18c7883a 	add	r3,r3,r3
    2a3c:	1909883a 	add	r4,r3,r4
    2a40:	20c00017 	ldw	r3,0(r4)
    2a44:	01c00034 	movhi	r7,0
    2a48:	213ffe04 	addi	r4,r4,-8
    2a4c:	39d6e404 	addi	r7,r7,23440
    2a50:	20c04426 	beq	r4,r3,2b64 <_free_r+0x258>
    2a54:	01ffff04 	movi	r7,-4
    2a58:	19400117 	ldw	r5,4(r3)
    2a5c:	29ca703a 	and	r5,r5,r7
    2a60:	1140022e 	bgeu	r2,r5,2a6c <_free_r+0x160>
    2a64:	18c00217 	ldw	r3,8(r3)
    2a68:	20fffb1e 	bne	r4,r3,2a58 <__alt_data_end+0xfffe2a58>
    2a6c:	19000317 	ldw	r4,12(r3)
    2a70:	31000315 	stw	r4,12(r6)
    2a74:	30c00215 	stw	r3,8(r6)
    2a78:	21800215 	stw	r6,8(r4)
    2a7c:	19800315 	stw	r6,12(r3)
    2a80:	003fde06 	br	29fc <__alt_data_end+0xfffe29fc>
    2a84:	29c00217 	ldw	r7,8(r5)
    2a88:	10c5883a 	add	r2,r2,r3
    2a8c:	00c00034 	movhi	r3,0
    2a90:	18d6e604 	addi	r3,r3,23448
    2a94:	38c03b26 	beq	r7,r3,2b84 <_free_r+0x278>
    2a98:	2a000317 	ldw	r8,12(r5)
    2a9c:	11400054 	ori	r5,r2,1
    2aa0:	3087883a 	add	r3,r6,r2
    2aa4:	3a000315 	stw	r8,12(r7)
    2aa8:	41c00215 	stw	r7,8(r8)
    2aac:	31400115 	stw	r5,4(r6)
    2ab0:	18800015 	stw	r2,0(r3)
    2ab4:	003fbd06 	br	29ac <__alt_data_end+0xfffe29ac>
    2ab8:	39c0004c 	andi	r7,r7,1
    2abc:	10c5883a 	add	r2,r2,r3
    2ac0:	3800071e 	bne	r7,zero,2ae0 <_free_r+0x1d4>
    2ac4:	81fffe17 	ldw	r7,-8(r16)
    2ac8:	31cdc83a 	sub	r6,r6,r7
    2acc:	30c00317 	ldw	r3,12(r6)
    2ad0:	31400217 	ldw	r5,8(r6)
    2ad4:	11c5883a 	add	r2,r2,r7
    2ad8:	28c00315 	stw	r3,12(r5)
    2adc:	19400215 	stw	r5,8(r3)
    2ae0:	10c00054 	ori	r3,r2,1
    2ae4:	30c00115 	stw	r3,4(r6)
    2ae8:	00c00034 	movhi	r3,0
    2aec:	18dc6b04 	addi	r3,r3,29100
    2af0:	18c00017 	ldw	r3,0(r3)
    2af4:	21800215 	stw	r6,8(r4)
    2af8:	10ffc036 	bltu	r2,r3,29fc <__alt_data_end+0xfffe29fc>
    2afc:	00800074 	movhi	r2,1
    2b00:	10a31304 	addi	r2,r2,-29620
    2b04:	11400017 	ldw	r5,0(r2)
    2b08:	8809883a 	mov	r4,r17
    2b0c:	00027e80 	call	27e8 <_malloc_trim_r>
    2b10:	003fba06 	br	29fc <__alt_data_end+0xfffe29fc>
    2b14:	28c9883a 	add	r4,r5,r3
    2b18:	21000117 	ldw	r4,4(r4)
    2b1c:	2100004c 	andi	r4,r4,1
    2b20:	2000391e 	bne	r4,zero,2c08 <_free_r+0x2fc>
    2b24:	29c00217 	ldw	r7,8(r5)
    2b28:	29000317 	ldw	r4,12(r5)
    2b2c:	1885883a 	add	r2,r3,r2
    2b30:	10c00054 	ori	r3,r2,1
    2b34:	39000315 	stw	r4,12(r7)
    2b38:	21c00215 	stw	r7,8(r4)
    2b3c:	30c00115 	stw	r3,4(r6)
    2b40:	308d883a 	add	r6,r6,r2
    2b44:	30800015 	stw	r2,0(r6)
    2b48:	003fac06 	br	29fc <__alt_data_end+0xfffe29fc>
    2b4c:	00c00504 	movi	r3,20
    2b50:	19401536 	bltu	r3,r5,2ba8 <_free_r+0x29c>
    2b54:	28c01704 	addi	r3,r5,92
    2b58:	18c7883a 	add	r3,r3,r3
    2b5c:	294016c4 	addi	r5,r5,91
    2b60:	003fb406 	br	2a34 <__alt_data_end+0xfffe2a34>
    2b64:	280bd0ba 	srai	r5,r5,2
    2b68:	00c00044 	movi	r3,1
    2b6c:	38800117 	ldw	r2,4(r7)
    2b70:	194a983a 	sll	r5,r3,r5
    2b74:	2007883a 	mov	r3,r4
    2b78:	2884b03a 	or	r2,r5,r2
    2b7c:	38800115 	stw	r2,4(r7)
    2b80:	003fbb06 	br	2a70 <__alt_data_end+0xfffe2a70>
    2b84:	21800515 	stw	r6,20(r4)
    2b88:	21800415 	stw	r6,16(r4)
    2b8c:	10c00054 	ori	r3,r2,1
    2b90:	31c00315 	stw	r7,12(r6)
    2b94:	31c00215 	stw	r7,8(r6)
    2b98:	30c00115 	stw	r3,4(r6)
    2b9c:	308d883a 	add	r6,r6,r2
    2ba0:	30800015 	stw	r2,0(r6)
    2ba4:	003f9506 	br	29fc <__alt_data_end+0xfffe29fc>
    2ba8:	00c01504 	movi	r3,84
    2bac:	19400536 	bltu	r3,r5,2bc4 <_free_r+0x2b8>
    2bb0:	100ad33a 	srli	r5,r2,12
    2bb4:	28c01bc4 	addi	r3,r5,111
    2bb8:	18c7883a 	add	r3,r3,r3
    2bbc:	29401b84 	addi	r5,r5,110
    2bc0:	003f9c06 	br	2a34 <__alt_data_end+0xfffe2a34>
    2bc4:	00c05504 	movi	r3,340
    2bc8:	19400536 	bltu	r3,r5,2be0 <_free_r+0x2d4>
    2bcc:	100ad3fa 	srli	r5,r2,15
    2bd0:	28c01e04 	addi	r3,r5,120
    2bd4:	18c7883a 	add	r3,r3,r3
    2bd8:	29401dc4 	addi	r5,r5,119
    2bdc:	003f9506 	br	2a34 <__alt_data_end+0xfffe2a34>
    2be0:	00c15504 	movi	r3,1364
    2be4:	19400536 	bltu	r3,r5,2bfc <_free_r+0x2f0>
    2be8:	100ad4ba 	srli	r5,r2,18
    2bec:	28c01f44 	addi	r3,r5,125
    2bf0:	18c7883a 	add	r3,r3,r3
    2bf4:	29401f04 	addi	r5,r5,124
    2bf8:	003f8e06 	br	2a34 <__alt_data_end+0xfffe2a34>
    2bfc:	00c03f84 	movi	r3,254
    2c00:	01401f84 	movi	r5,126
    2c04:	003f8b06 	br	2a34 <__alt_data_end+0xfffe2a34>
    2c08:	10c00054 	ori	r3,r2,1
    2c0c:	30c00115 	stw	r3,4(r6)
    2c10:	308d883a 	add	r6,r6,r2
    2c14:	30800015 	stw	r2,0(r6)
    2c18:	003f7806 	br	29fc <__alt_data_end+0xfffe29fc>

00002c1c <_lseek_r>:
    2c1c:	defffd04 	addi	sp,sp,-12
    2c20:	2805883a 	mov	r2,r5
    2c24:	dc000015 	stw	r16,0(sp)
    2c28:	04000074 	movhi	r16,1
    2c2c:	dc400115 	stw	r17,4(sp)
    2c30:	300b883a 	mov	r5,r6
    2c34:	84231404 	addi	r16,r16,-29616
    2c38:	2023883a 	mov	r17,r4
    2c3c:	380d883a 	mov	r6,r7
    2c40:	1009883a 	mov	r4,r2
    2c44:	dfc00215 	stw	ra,8(sp)
    2c48:	80000015 	stw	zero,0(r16)
    2c4c:	00035900 	call	3590 <lseek>
    2c50:	00ffffc4 	movi	r3,-1
    2c54:	10c00526 	beq	r2,r3,2c6c <_lseek_r+0x50>
    2c58:	dfc00217 	ldw	ra,8(sp)
    2c5c:	dc400117 	ldw	r17,4(sp)
    2c60:	dc000017 	ldw	r16,0(sp)
    2c64:	dec00304 	addi	sp,sp,12
    2c68:	f800283a 	ret
    2c6c:	80c00017 	ldw	r3,0(r16)
    2c70:	183ff926 	beq	r3,zero,2c58 <__alt_data_end+0xfffe2c58>
    2c74:	88c00015 	stw	r3,0(r17)
    2c78:	003ff706 	br	2c58 <__alt_data_end+0xfffe2c58>

00002c7c <__smakebuf_r>:
    2c7c:	2880030b 	ldhu	r2,12(r5)
    2c80:	10c0008c 	andi	r3,r2,2
    2c84:	1800411e 	bne	r3,zero,2d8c <__smakebuf_r+0x110>
    2c88:	deffec04 	addi	sp,sp,-80
    2c8c:	dc000f15 	stw	r16,60(sp)
    2c90:	2821883a 	mov	r16,r5
    2c94:	2940038f 	ldh	r5,14(r5)
    2c98:	dc401015 	stw	r17,64(sp)
    2c9c:	dfc01315 	stw	ra,76(sp)
    2ca0:	dcc01215 	stw	r19,72(sp)
    2ca4:	dc801115 	stw	r18,68(sp)
    2ca8:	2023883a 	mov	r17,r4
    2cac:	28001c16 	blt	r5,zero,2d20 <__smakebuf_r+0xa4>
    2cb0:	d80d883a 	mov	r6,sp
    2cb4:	0002e980 	call	2e98 <_fstat_r>
    2cb8:	10001816 	blt	r2,zero,2d1c <__smakebuf_r+0xa0>
    2cbc:	d8800117 	ldw	r2,4(sp)
    2cc0:	00e00014 	movui	r3,32768
    2cc4:	10bc000c 	andi	r2,r2,61440
    2cc8:	14c80020 	cmpeqi	r19,r2,8192
    2ccc:	10c03726 	beq	r2,r3,2dac <__smakebuf_r+0x130>
    2cd0:	80c0030b 	ldhu	r3,12(r16)
    2cd4:	18c20014 	ori	r3,r3,2048
    2cd8:	80c0030d 	sth	r3,12(r16)
    2cdc:	00c80004 	movi	r3,8192
    2ce0:	10c0521e 	bne	r2,r3,2e2c <__smakebuf_r+0x1b0>
    2ce4:	8140038f 	ldh	r5,14(r16)
    2ce8:	8809883a 	mov	r4,r17
    2cec:	0002ef40 	call	2ef4 <_isatty_r>
    2cf0:	10004c26 	beq	r2,zero,2e24 <__smakebuf_r+0x1a8>
    2cf4:	8080030b 	ldhu	r2,12(r16)
    2cf8:	80c010c4 	addi	r3,r16,67
    2cfc:	80c00015 	stw	r3,0(r16)
    2d00:	10800054 	ori	r2,r2,1
    2d04:	8080030d 	sth	r2,12(r16)
    2d08:	00800044 	movi	r2,1
    2d0c:	80c00415 	stw	r3,16(r16)
    2d10:	80800515 	stw	r2,20(r16)
    2d14:	04810004 	movi	r18,1024
    2d18:	00000706 	br	2d38 <__smakebuf_r+0xbc>
    2d1c:	8080030b 	ldhu	r2,12(r16)
    2d20:	10c0200c 	andi	r3,r2,128
    2d24:	18001f1e 	bne	r3,zero,2da4 <__smakebuf_r+0x128>
    2d28:	04810004 	movi	r18,1024
    2d2c:	10820014 	ori	r2,r2,2048
    2d30:	8080030d 	sth	r2,12(r16)
    2d34:	0027883a 	mov	r19,zero
    2d38:	900b883a 	mov	r5,r18
    2d3c:	8809883a 	mov	r4,r17
    2d40:	0000e840 	call	e84 <_malloc_r>
    2d44:	10002c26 	beq	r2,zero,2df8 <__smakebuf_r+0x17c>
    2d48:	80c0030b 	ldhu	r3,12(r16)
    2d4c:	01000034 	movhi	r4,0
    2d50:	21012304 	addi	r4,r4,1164
    2d54:	89000f15 	stw	r4,60(r17)
    2d58:	18c02014 	ori	r3,r3,128
    2d5c:	80c0030d 	sth	r3,12(r16)
    2d60:	80800015 	stw	r2,0(r16)
    2d64:	80800415 	stw	r2,16(r16)
    2d68:	84800515 	stw	r18,20(r16)
    2d6c:	98001a1e 	bne	r19,zero,2dd8 <__smakebuf_r+0x15c>
    2d70:	dfc01317 	ldw	ra,76(sp)
    2d74:	dcc01217 	ldw	r19,72(sp)
    2d78:	dc801117 	ldw	r18,68(sp)
    2d7c:	dc401017 	ldw	r17,64(sp)
    2d80:	dc000f17 	ldw	r16,60(sp)
    2d84:	dec01404 	addi	sp,sp,80
    2d88:	f800283a 	ret
    2d8c:	288010c4 	addi	r2,r5,67
    2d90:	28800015 	stw	r2,0(r5)
    2d94:	28800415 	stw	r2,16(r5)
    2d98:	00800044 	movi	r2,1
    2d9c:	28800515 	stw	r2,20(r5)
    2da0:	f800283a 	ret
    2da4:	04801004 	movi	r18,64
    2da8:	003fe006 	br	2d2c <__alt_data_end+0xfffe2d2c>
    2dac:	81000a17 	ldw	r4,40(r16)
    2db0:	00c00034 	movhi	r3,0
    2db4:	18c87404 	addi	r3,r3,8656
    2db8:	20ffc51e 	bne	r4,r3,2cd0 <__alt_data_end+0xfffe2cd0>
    2dbc:	8080030b 	ldhu	r2,12(r16)
    2dc0:	04810004 	movi	r18,1024
    2dc4:	84801315 	stw	r18,76(r16)
    2dc8:	1484b03a 	or	r2,r2,r18
    2dcc:	8080030d 	sth	r2,12(r16)
    2dd0:	0027883a 	mov	r19,zero
    2dd4:	003fd806 	br	2d38 <__alt_data_end+0xfffe2d38>
    2dd8:	8140038f 	ldh	r5,14(r16)
    2ddc:	8809883a 	mov	r4,r17
    2de0:	0002ef40 	call	2ef4 <_isatty_r>
    2de4:	103fe226 	beq	r2,zero,2d70 <__alt_data_end+0xfffe2d70>
    2de8:	8080030b 	ldhu	r2,12(r16)
    2dec:	10800054 	ori	r2,r2,1
    2df0:	8080030d 	sth	r2,12(r16)
    2df4:	003fde06 	br	2d70 <__alt_data_end+0xfffe2d70>
    2df8:	8080030b 	ldhu	r2,12(r16)
    2dfc:	10c0800c 	andi	r3,r2,512
    2e00:	183fdb1e 	bne	r3,zero,2d70 <__alt_data_end+0xfffe2d70>
    2e04:	10800094 	ori	r2,r2,2
    2e08:	80c010c4 	addi	r3,r16,67
    2e0c:	8080030d 	sth	r2,12(r16)
    2e10:	00800044 	movi	r2,1
    2e14:	80c00015 	stw	r3,0(r16)
    2e18:	80c00415 	stw	r3,16(r16)
    2e1c:	80800515 	stw	r2,20(r16)
    2e20:	003fd306 	br	2d70 <__alt_data_end+0xfffe2d70>
    2e24:	04810004 	movi	r18,1024
    2e28:	003fc306 	br	2d38 <__alt_data_end+0xfffe2d38>
    2e2c:	0027883a 	mov	r19,zero
    2e30:	04810004 	movi	r18,1024
    2e34:	003fc006 	br	2d38 <__alt_data_end+0xfffe2d38>

00002e38 <_read_r>:
    2e38:	defffd04 	addi	sp,sp,-12
    2e3c:	2805883a 	mov	r2,r5
    2e40:	dc000015 	stw	r16,0(sp)
    2e44:	04000074 	movhi	r16,1
    2e48:	dc400115 	stw	r17,4(sp)
    2e4c:	300b883a 	mov	r5,r6
    2e50:	84231404 	addi	r16,r16,-29616
    2e54:	2023883a 	mov	r17,r4
    2e58:	380d883a 	mov	r6,r7
    2e5c:	1009883a 	mov	r4,r2
    2e60:	dfc00215 	stw	ra,8(sp)
    2e64:	80000015 	stw	zero,0(r16)
    2e68:	000375c0 	call	375c <read>
    2e6c:	00ffffc4 	movi	r3,-1
    2e70:	10c00526 	beq	r2,r3,2e88 <_read_r+0x50>
    2e74:	dfc00217 	ldw	ra,8(sp)
    2e78:	dc400117 	ldw	r17,4(sp)
    2e7c:	dc000017 	ldw	r16,0(sp)
    2e80:	dec00304 	addi	sp,sp,12
    2e84:	f800283a 	ret
    2e88:	80c00017 	ldw	r3,0(r16)
    2e8c:	183ff926 	beq	r3,zero,2e74 <__alt_data_end+0xfffe2e74>
    2e90:	88c00015 	stw	r3,0(r17)
    2e94:	003ff706 	br	2e74 <__alt_data_end+0xfffe2e74>

00002e98 <_fstat_r>:
    2e98:	defffd04 	addi	sp,sp,-12
    2e9c:	2805883a 	mov	r2,r5
    2ea0:	dc000015 	stw	r16,0(sp)
    2ea4:	04000074 	movhi	r16,1
    2ea8:	dc400115 	stw	r17,4(sp)
    2eac:	84231404 	addi	r16,r16,-29616
    2eb0:	2023883a 	mov	r17,r4
    2eb4:	300b883a 	mov	r5,r6
    2eb8:	1009883a 	mov	r4,r2
    2ebc:	dfc00215 	stw	ra,8(sp)
    2ec0:	80000015 	stw	zero,0(r16)
    2ec4:	00032c80 	call	32c8 <fstat>
    2ec8:	00ffffc4 	movi	r3,-1
    2ecc:	10c00526 	beq	r2,r3,2ee4 <_fstat_r+0x4c>
    2ed0:	dfc00217 	ldw	ra,8(sp)
    2ed4:	dc400117 	ldw	r17,4(sp)
    2ed8:	dc000017 	ldw	r16,0(sp)
    2edc:	dec00304 	addi	sp,sp,12
    2ee0:	f800283a 	ret
    2ee4:	80c00017 	ldw	r3,0(r16)
    2ee8:	183ff926 	beq	r3,zero,2ed0 <__alt_data_end+0xfffe2ed0>
    2eec:	88c00015 	stw	r3,0(r17)
    2ef0:	003ff706 	br	2ed0 <__alt_data_end+0xfffe2ed0>

00002ef4 <_isatty_r>:
    2ef4:	defffd04 	addi	sp,sp,-12
    2ef8:	dc000015 	stw	r16,0(sp)
    2efc:	04000074 	movhi	r16,1
    2f00:	dc400115 	stw	r17,4(sp)
    2f04:	84231404 	addi	r16,r16,-29616
    2f08:	2023883a 	mov	r17,r4
    2f0c:	2809883a 	mov	r4,r5
    2f10:	dfc00215 	stw	ra,8(sp)
    2f14:	80000015 	stw	zero,0(r16)
    2f18:	00033bc0 	call	33bc <isatty>
    2f1c:	00ffffc4 	movi	r3,-1
    2f20:	10c00526 	beq	r2,r3,2f38 <_isatty_r+0x44>
    2f24:	dfc00217 	ldw	ra,8(sp)
    2f28:	dc400117 	ldw	r17,4(sp)
    2f2c:	dc000017 	ldw	r16,0(sp)
    2f30:	dec00304 	addi	sp,sp,12
    2f34:	f800283a 	ret
    2f38:	80c00017 	ldw	r3,0(r16)
    2f3c:	183ff926 	beq	r3,zero,2f24 <__alt_data_end+0xfffe2f24>
    2f40:	88c00015 	stw	r3,0(r17)
    2f44:	003ff706 	br	2f24 <__alt_data_end+0xfffe2f24>

00002f48 <__divsi3>:
    2f48:	20001b16 	blt	r4,zero,2fb8 <__divsi3+0x70>
    2f4c:	000f883a 	mov	r7,zero
    2f50:	28001616 	blt	r5,zero,2fac <__divsi3+0x64>
    2f54:	200d883a 	mov	r6,r4
    2f58:	29001a2e 	bgeu	r5,r4,2fc4 <__divsi3+0x7c>
    2f5c:	00800804 	movi	r2,32
    2f60:	00c00044 	movi	r3,1
    2f64:	00000106 	br	2f6c <__divsi3+0x24>
    2f68:	10000d26 	beq	r2,zero,2fa0 <__divsi3+0x58>
    2f6c:	294b883a 	add	r5,r5,r5
    2f70:	10bfffc4 	addi	r2,r2,-1
    2f74:	18c7883a 	add	r3,r3,r3
    2f78:	293ffb36 	bltu	r5,r4,2f68 <__alt_data_end+0xfffe2f68>
    2f7c:	0005883a 	mov	r2,zero
    2f80:	18000726 	beq	r3,zero,2fa0 <__divsi3+0x58>
    2f84:	0005883a 	mov	r2,zero
    2f88:	31400236 	bltu	r6,r5,2f94 <__divsi3+0x4c>
    2f8c:	314dc83a 	sub	r6,r6,r5
    2f90:	10c4b03a 	or	r2,r2,r3
    2f94:	1806d07a 	srli	r3,r3,1
    2f98:	280ad07a 	srli	r5,r5,1
    2f9c:	183ffa1e 	bne	r3,zero,2f88 <__alt_data_end+0xfffe2f88>
    2fa0:	38000126 	beq	r7,zero,2fa8 <__divsi3+0x60>
    2fa4:	0085c83a 	sub	r2,zero,r2
    2fa8:	f800283a 	ret
    2fac:	014bc83a 	sub	r5,zero,r5
    2fb0:	39c0005c 	xori	r7,r7,1
    2fb4:	003fe706 	br	2f54 <__alt_data_end+0xfffe2f54>
    2fb8:	0109c83a 	sub	r4,zero,r4
    2fbc:	01c00044 	movi	r7,1
    2fc0:	003fe306 	br	2f50 <__alt_data_end+0xfffe2f50>
    2fc4:	00c00044 	movi	r3,1
    2fc8:	003fee06 	br	2f84 <__alt_data_end+0xfffe2f84>

00002fcc <__modsi3>:
    2fcc:	20001716 	blt	r4,zero,302c <__modsi3+0x60>
    2fd0:	000f883a 	mov	r7,zero
    2fd4:	2005883a 	mov	r2,r4
    2fd8:	28001216 	blt	r5,zero,3024 <__modsi3+0x58>
    2fdc:	2900162e 	bgeu	r5,r4,3038 <__modsi3+0x6c>
    2fe0:	01800804 	movi	r6,32
    2fe4:	00c00044 	movi	r3,1
    2fe8:	00000106 	br	2ff0 <__modsi3+0x24>
    2fec:	30000a26 	beq	r6,zero,3018 <__modsi3+0x4c>
    2ff0:	294b883a 	add	r5,r5,r5
    2ff4:	31bfffc4 	addi	r6,r6,-1
    2ff8:	18c7883a 	add	r3,r3,r3
    2ffc:	293ffb36 	bltu	r5,r4,2fec <__alt_data_end+0xfffe2fec>
    3000:	18000526 	beq	r3,zero,3018 <__modsi3+0x4c>
    3004:	1806d07a 	srli	r3,r3,1
    3008:	11400136 	bltu	r2,r5,3010 <__modsi3+0x44>
    300c:	1145c83a 	sub	r2,r2,r5
    3010:	280ad07a 	srli	r5,r5,1
    3014:	183ffb1e 	bne	r3,zero,3004 <__alt_data_end+0xfffe3004>
    3018:	38000126 	beq	r7,zero,3020 <__modsi3+0x54>
    301c:	0085c83a 	sub	r2,zero,r2
    3020:	f800283a 	ret
    3024:	014bc83a 	sub	r5,zero,r5
    3028:	003fec06 	br	2fdc <__alt_data_end+0xfffe2fdc>
    302c:	0109c83a 	sub	r4,zero,r4
    3030:	01c00044 	movi	r7,1
    3034:	003fe706 	br	2fd4 <__alt_data_end+0xfffe2fd4>
    3038:	00c00044 	movi	r3,1
    303c:	003ff106 	br	3004 <__alt_data_end+0xfffe3004>

00003040 <__udivsi3>:
    3040:	200d883a 	mov	r6,r4
    3044:	2900152e 	bgeu	r5,r4,309c <__udivsi3+0x5c>
    3048:	28001416 	blt	r5,zero,309c <__udivsi3+0x5c>
    304c:	00800804 	movi	r2,32
    3050:	00c00044 	movi	r3,1
    3054:	00000206 	br	3060 <__udivsi3+0x20>
    3058:	10000e26 	beq	r2,zero,3094 <__udivsi3+0x54>
    305c:	28000516 	blt	r5,zero,3074 <__udivsi3+0x34>
    3060:	294b883a 	add	r5,r5,r5
    3064:	10bfffc4 	addi	r2,r2,-1
    3068:	18c7883a 	add	r3,r3,r3
    306c:	293ffa36 	bltu	r5,r4,3058 <__alt_data_end+0xfffe3058>
    3070:	18000826 	beq	r3,zero,3094 <__udivsi3+0x54>
    3074:	0005883a 	mov	r2,zero
    3078:	31400236 	bltu	r6,r5,3084 <__udivsi3+0x44>
    307c:	314dc83a 	sub	r6,r6,r5
    3080:	10c4b03a 	or	r2,r2,r3
    3084:	1806d07a 	srli	r3,r3,1
    3088:	280ad07a 	srli	r5,r5,1
    308c:	183ffa1e 	bne	r3,zero,3078 <__alt_data_end+0xfffe3078>
    3090:	f800283a 	ret
    3094:	0005883a 	mov	r2,zero
    3098:	f800283a 	ret
    309c:	00c00044 	movi	r3,1
    30a0:	003ff406 	br	3074 <__alt_data_end+0xfffe3074>

000030a4 <__umodsi3>:
    30a4:	2005883a 	mov	r2,r4
    30a8:	2900122e 	bgeu	r5,r4,30f4 <__umodsi3+0x50>
    30ac:	28001116 	blt	r5,zero,30f4 <__umodsi3+0x50>
    30b0:	01800804 	movi	r6,32
    30b4:	00c00044 	movi	r3,1
    30b8:	00000206 	br	30c4 <__umodsi3+0x20>
    30bc:	30000c26 	beq	r6,zero,30f0 <__umodsi3+0x4c>
    30c0:	28000516 	blt	r5,zero,30d8 <__umodsi3+0x34>
    30c4:	294b883a 	add	r5,r5,r5
    30c8:	31bfffc4 	addi	r6,r6,-1
    30cc:	18c7883a 	add	r3,r3,r3
    30d0:	293ffa36 	bltu	r5,r4,30bc <__alt_data_end+0xfffe30bc>
    30d4:	18000626 	beq	r3,zero,30f0 <__umodsi3+0x4c>
    30d8:	1806d07a 	srli	r3,r3,1
    30dc:	11400136 	bltu	r2,r5,30e4 <__umodsi3+0x40>
    30e0:	1145c83a 	sub	r2,r2,r5
    30e4:	280ad07a 	srli	r5,r5,1
    30e8:	183ffb1e 	bne	r3,zero,30d8 <__alt_data_end+0xfffe30d8>
    30ec:	f800283a 	ret
    30f0:	f800283a 	ret
    30f4:	00c00044 	movi	r3,1
    30f8:	003ff706 	br	30d8 <__alt_data_end+0xfffe30d8>

000030fc <__mulsi3>:
    30fc:	0005883a 	mov	r2,zero
    3100:	20000726 	beq	r4,zero,3120 <__mulsi3+0x24>
    3104:	20c0004c 	andi	r3,r4,1
    3108:	2008d07a 	srli	r4,r4,1
    310c:	18000126 	beq	r3,zero,3114 <__mulsi3+0x18>
    3110:	1145883a 	add	r2,r2,r5
    3114:	294b883a 	add	r5,r5,r5
    3118:	203ffa1e 	bne	r4,zero,3104 <__alt_data_end+0xfffe3104>
    311c:	f800283a 	ret
    3120:	f800283a 	ret

00003124 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3124:	defffe04 	addi	sp,sp,-8
    3128:	dfc00115 	stw	ra,4(sp)
    312c:	df000015 	stw	fp,0(sp)
    3130:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3134:	d0a00917 	ldw	r2,-32732(gp)
    3138:	10000326 	beq	r2,zero,3148 <alt_get_errno+0x24>
    313c:	d0a00917 	ldw	r2,-32732(gp)
    3140:	103ee83a 	callr	r2
    3144:	00000106 	br	314c <alt_get_errno+0x28>
    3148:	d0a6ac04 	addi	r2,gp,-25936
}
    314c:	e037883a 	mov	sp,fp
    3150:	dfc00117 	ldw	ra,4(sp)
    3154:	df000017 	ldw	fp,0(sp)
    3158:	dec00204 	addi	sp,sp,8
    315c:	f800283a 	ret

00003160 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    3160:	defffb04 	addi	sp,sp,-20
    3164:	dfc00415 	stw	ra,16(sp)
    3168:	df000315 	stw	fp,12(sp)
    316c:	df000304 	addi	fp,sp,12
    3170:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    3174:	e0bfff17 	ldw	r2,-4(fp)
    3178:	10000816 	blt	r2,zero,319c <close+0x3c>
    317c:	01400304 	movi	r5,12
    3180:	e13fff17 	ldw	r4,-4(fp)
    3184:	00030fc0 	call	30fc <__mulsi3>
    3188:	1007883a 	mov	r3,r2
    318c:	00800034 	movhi	r2,0
    3190:	1097f004 	addi	r2,r2,24512
    3194:	1885883a 	add	r2,r3,r2
    3198:	00000106 	br	31a0 <close+0x40>
    319c:	0005883a 	mov	r2,zero
    31a0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    31a4:	e0bffd17 	ldw	r2,-12(fp)
    31a8:	10001926 	beq	r2,zero,3210 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    31ac:	e0bffd17 	ldw	r2,-12(fp)
    31b0:	10800017 	ldw	r2,0(r2)
    31b4:	10800417 	ldw	r2,16(r2)
    31b8:	10000626 	beq	r2,zero,31d4 <close+0x74>
    31bc:	e0bffd17 	ldw	r2,-12(fp)
    31c0:	10800017 	ldw	r2,0(r2)
    31c4:	10800417 	ldw	r2,16(r2)
    31c8:	e13ffd17 	ldw	r4,-12(fp)
    31cc:	103ee83a 	callr	r2
    31d0:	00000106 	br	31d8 <close+0x78>
    31d4:	0005883a 	mov	r2,zero
    31d8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    31dc:	e13fff17 	ldw	r4,-4(fp)
    31e0:	00038600 	call	3860 <alt_release_fd>
    if (rval < 0)
    31e4:	e0bffe17 	ldw	r2,-8(fp)
    31e8:	1000070e 	bge	r2,zero,3208 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    31ec:	00031240 	call	3124 <alt_get_errno>
    31f0:	1007883a 	mov	r3,r2
    31f4:	e0bffe17 	ldw	r2,-8(fp)
    31f8:	0085c83a 	sub	r2,zero,r2
    31fc:	18800015 	stw	r2,0(r3)
      return -1;
    3200:	00bfffc4 	movi	r2,-1
    3204:	00000706 	br	3224 <close+0xc4>
    }
    return 0;
    3208:	0005883a 	mov	r2,zero
    320c:	00000506 	br	3224 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3210:	00031240 	call	3124 <alt_get_errno>
    3214:	1007883a 	mov	r3,r2
    3218:	00801444 	movi	r2,81
    321c:	18800015 	stw	r2,0(r3)
    return -1;
    3220:	00bfffc4 	movi	r2,-1
  }
}
    3224:	e037883a 	mov	sp,fp
    3228:	dfc00117 	ldw	ra,4(sp)
    322c:	df000017 	ldw	fp,0(sp)
    3230:	dec00204 	addi	sp,sp,8
    3234:	f800283a 	ret

00003238 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
    3238:	defffd04 	addi	sp,sp,-12
    323c:	df000215 	stw	fp,8(sp)
    3240:	df000204 	addi	fp,sp,8
    3244:	e13ffe15 	stw	r4,-8(fp)
    3248:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    324c:	0001883a 	nop
    3250:	e037883a 	mov	sp,fp
    3254:	df000017 	ldw	fp,0(sp)
    3258:	dec00104 	addi	sp,sp,4
    325c:	f800283a 	ret

00003260 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3260:	defffc04 	addi	sp,sp,-16
    3264:	df000315 	stw	fp,12(sp)
    3268:	df000304 	addi	fp,sp,12
    326c:	e13ffd15 	stw	r4,-12(fp)
    3270:	e17ffe15 	stw	r5,-8(fp)
    3274:	e1bfff15 	stw	r6,-4(fp)
  return len;
    3278:	e0bfff17 	ldw	r2,-4(fp)
}
    327c:	e037883a 	mov	sp,fp
    3280:	df000017 	ldw	fp,0(sp)
    3284:	dec00104 	addi	sp,sp,4
    3288:	f800283a 	ret

0000328c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    328c:	defffe04 	addi	sp,sp,-8
    3290:	dfc00115 	stw	ra,4(sp)
    3294:	df000015 	stw	fp,0(sp)
    3298:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    329c:	d0a00917 	ldw	r2,-32732(gp)
    32a0:	10000326 	beq	r2,zero,32b0 <alt_get_errno+0x24>
    32a4:	d0a00917 	ldw	r2,-32732(gp)
    32a8:	103ee83a 	callr	r2
    32ac:	00000106 	br	32b4 <alt_get_errno+0x28>
    32b0:	d0a6ac04 	addi	r2,gp,-25936
}
    32b4:	e037883a 	mov	sp,fp
    32b8:	dfc00117 	ldw	ra,4(sp)
    32bc:	df000017 	ldw	fp,0(sp)
    32c0:	dec00204 	addi	sp,sp,8
    32c4:	f800283a 	ret

000032c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    32c8:	defffb04 	addi	sp,sp,-20
    32cc:	dfc00415 	stw	ra,16(sp)
    32d0:	df000315 	stw	fp,12(sp)
    32d4:	df000304 	addi	fp,sp,12
    32d8:	e13ffe15 	stw	r4,-8(fp)
    32dc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    32e0:	e0bffe17 	ldw	r2,-8(fp)
    32e4:	10000816 	blt	r2,zero,3308 <fstat+0x40>
    32e8:	01400304 	movi	r5,12
    32ec:	e13ffe17 	ldw	r4,-8(fp)
    32f0:	00030fc0 	call	30fc <__mulsi3>
    32f4:	1007883a 	mov	r3,r2
    32f8:	00800034 	movhi	r2,0
    32fc:	1097f004 	addi	r2,r2,24512
    3300:	1885883a 	add	r2,r3,r2
    3304:	00000106 	br	330c <fstat+0x44>
    3308:	0005883a 	mov	r2,zero
    330c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    3310:	e0bffd17 	ldw	r2,-12(fp)
    3314:	10001026 	beq	r2,zero,3358 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    3318:	e0bffd17 	ldw	r2,-12(fp)
    331c:	10800017 	ldw	r2,0(r2)
    3320:	10800817 	ldw	r2,32(r2)
    3324:	10000726 	beq	r2,zero,3344 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    3328:	e0bffd17 	ldw	r2,-12(fp)
    332c:	10800017 	ldw	r2,0(r2)
    3330:	10800817 	ldw	r2,32(r2)
    3334:	e17fff17 	ldw	r5,-4(fp)
    3338:	e13ffd17 	ldw	r4,-12(fp)
    333c:	103ee83a 	callr	r2
    3340:	00000a06 	br	336c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3344:	e0bfff17 	ldw	r2,-4(fp)
    3348:	00c80004 	movi	r3,8192
    334c:	10c00115 	stw	r3,4(r2)
      return 0;
    3350:	0005883a 	mov	r2,zero
    3354:	00000506 	br	336c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3358:	000328c0 	call	328c <alt_get_errno>
    335c:	1007883a 	mov	r3,r2
    3360:	00801444 	movi	r2,81
    3364:	18800015 	stw	r2,0(r3)
    return -1;
    3368:	00bfffc4 	movi	r2,-1
  }
}
    336c:	e037883a 	mov	sp,fp
    3370:	dfc00117 	ldw	ra,4(sp)
    3374:	df000017 	ldw	fp,0(sp)
    3378:	dec00204 	addi	sp,sp,8
    337c:	f800283a 	ret

00003380 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3380:	defffe04 	addi	sp,sp,-8
    3384:	dfc00115 	stw	ra,4(sp)
    3388:	df000015 	stw	fp,0(sp)
    338c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3390:	d0a00917 	ldw	r2,-32732(gp)
    3394:	10000326 	beq	r2,zero,33a4 <alt_get_errno+0x24>
    3398:	d0a00917 	ldw	r2,-32732(gp)
    339c:	103ee83a 	callr	r2
    33a0:	00000106 	br	33a8 <alt_get_errno+0x28>
    33a4:	d0a6ac04 	addi	r2,gp,-25936
}
    33a8:	e037883a 	mov	sp,fp
    33ac:	dfc00117 	ldw	ra,4(sp)
    33b0:	df000017 	ldw	fp,0(sp)
    33b4:	dec00204 	addi	sp,sp,8
    33b8:	f800283a 	ret

000033bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    33bc:	deffed04 	addi	sp,sp,-76
    33c0:	dfc01215 	stw	ra,72(sp)
    33c4:	df001115 	stw	fp,68(sp)
    33c8:	df001104 	addi	fp,sp,68
    33cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    33d0:	e0bfff17 	ldw	r2,-4(fp)
    33d4:	10000816 	blt	r2,zero,33f8 <isatty+0x3c>
    33d8:	01400304 	movi	r5,12
    33dc:	e13fff17 	ldw	r4,-4(fp)
    33e0:	00030fc0 	call	30fc <__mulsi3>
    33e4:	1007883a 	mov	r3,r2
    33e8:	00800034 	movhi	r2,0
    33ec:	1097f004 	addi	r2,r2,24512
    33f0:	1885883a 	add	r2,r3,r2
    33f4:	00000106 	br	33fc <isatty+0x40>
    33f8:	0005883a 	mov	r2,zero
    33fc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    3400:	e0bfef17 	ldw	r2,-68(fp)
    3404:	10000e26 	beq	r2,zero,3440 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    3408:	e0bfef17 	ldw	r2,-68(fp)
    340c:	10800017 	ldw	r2,0(r2)
    3410:	10800817 	ldw	r2,32(r2)
    3414:	1000021e 	bne	r2,zero,3420 <isatty+0x64>
    {
      return 1;
    3418:	00800044 	movi	r2,1
    341c:	00000d06 	br	3454 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3420:	e0bff004 	addi	r2,fp,-64
    3424:	100b883a 	mov	r5,r2
    3428:	e13fff17 	ldw	r4,-4(fp)
    342c:	00032c80 	call	32c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3430:	e0bff117 	ldw	r2,-60(fp)
    3434:	10880020 	cmpeqi	r2,r2,8192
    3438:	10803fcc 	andi	r2,r2,255
    343c:	00000506 	br	3454 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3440:	00033800 	call	3380 <alt_get_errno>
    3444:	1007883a 	mov	r3,r2
    3448:	00801444 	movi	r2,81
    344c:	18800015 	stw	r2,0(r3)
    return 0;
    3450:	0005883a 	mov	r2,zero
  }
}
    3454:	e037883a 	mov	sp,fp
    3458:	dfc00117 	ldw	ra,4(sp)
    345c:	df000017 	ldw	fp,0(sp)
    3460:	dec00204 	addi	sp,sp,8
    3464:	f800283a 	ret

00003468 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3468:	defffc04 	addi	sp,sp,-16
    346c:	df000315 	stw	fp,12(sp)
    3470:	df000304 	addi	fp,sp,12
    3474:	e13ffd15 	stw	r4,-12(fp)
    3478:	e17ffe15 	stw	r5,-8(fp)
    347c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3480:	e0fffe17 	ldw	r3,-8(fp)
    3484:	e0bffd17 	ldw	r2,-12(fp)
    3488:	18800c26 	beq	r3,r2,34bc <alt_load_section+0x54>
  {
    while( to != end )
    348c:	00000806 	br	34b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    3490:	e0bffe17 	ldw	r2,-8(fp)
    3494:	10c00104 	addi	r3,r2,4
    3498:	e0fffe15 	stw	r3,-8(fp)
    349c:	e0fffd17 	ldw	r3,-12(fp)
    34a0:	19000104 	addi	r4,r3,4
    34a4:	e13ffd15 	stw	r4,-12(fp)
    34a8:	18c00017 	ldw	r3,0(r3)
    34ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    34b0:	e0fffe17 	ldw	r3,-8(fp)
    34b4:	e0bfff17 	ldw	r2,-4(fp)
    34b8:	18bff51e 	bne	r3,r2,3490 <__alt_data_end+0xfffe3490>
    {
      *to++ = *from++;
    }
  }
}
    34bc:	0001883a 	nop
    34c0:	e037883a 	mov	sp,fp
    34c4:	df000017 	ldw	fp,0(sp)
    34c8:	dec00104 	addi	sp,sp,4
    34cc:	f800283a 	ret

000034d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    34d0:	defffe04 	addi	sp,sp,-8
    34d4:	dfc00115 	stw	ra,4(sp)
    34d8:	df000015 	stw	fp,0(sp)
    34dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    34e0:	01800034 	movhi	r6,0
    34e4:	319c7604 	addi	r6,r6,29144
    34e8:	01400034 	movhi	r5,0
    34ec:	2955db04 	addi	r5,r5,22380
    34f0:	01000034 	movhi	r4,0
    34f4:	211c7604 	addi	r4,r4,29144
    34f8:	00034680 	call	3468 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    34fc:	01800034 	movhi	r6,0
    3500:	31808c04 	addi	r6,r6,560
    3504:	01400034 	movhi	r5,0
    3508:	29400804 	addi	r5,r5,32
    350c:	01000034 	movhi	r4,0
    3510:	21000804 	addi	r4,r4,32
    3514:	00034680 	call	3468 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3518:	01800034 	movhi	r6,0
    351c:	3195db04 	addi	r6,r6,22380
    3520:	01400034 	movhi	r5,0
    3524:	2955bc04 	addi	r5,r5,22256
    3528:	01000034 	movhi	r4,0
    352c:	2115bc04 	addi	r4,r4,22256
    3530:	00034680 	call	3468 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3534:	00048240 	call	4824 <alt_dcache_flush_all>
  alt_icache_flush_all();
    3538:	00049240 	call	4924 <alt_icache_flush_all>
}
    353c:	0001883a 	nop
    3540:	e037883a 	mov	sp,fp
    3544:	dfc00117 	ldw	ra,4(sp)
    3548:	df000017 	ldw	fp,0(sp)
    354c:	dec00204 	addi	sp,sp,8
    3550:	f800283a 	ret

00003554 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3554:	defffe04 	addi	sp,sp,-8
    3558:	dfc00115 	stw	ra,4(sp)
    355c:	df000015 	stw	fp,0(sp)
    3560:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3564:	d0a00917 	ldw	r2,-32732(gp)
    3568:	10000326 	beq	r2,zero,3578 <alt_get_errno+0x24>
    356c:	d0a00917 	ldw	r2,-32732(gp)
    3570:	103ee83a 	callr	r2
    3574:	00000106 	br	357c <alt_get_errno+0x28>
    3578:	d0a6ac04 	addi	r2,gp,-25936
}
    357c:	e037883a 	mov	sp,fp
    3580:	dfc00117 	ldw	ra,4(sp)
    3584:	df000017 	ldw	fp,0(sp)
    3588:	dec00204 	addi	sp,sp,8
    358c:	f800283a 	ret

00003590 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3590:	defff904 	addi	sp,sp,-28
    3594:	dfc00615 	stw	ra,24(sp)
    3598:	df000515 	stw	fp,20(sp)
    359c:	df000504 	addi	fp,sp,20
    35a0:	e13ffd15 	stw	r4,-12(fp)
    35a4:	e17ffe15 	stw	r5,-8(fp)
    35a8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    35ac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    35b0:	e0bffd17 	ldw	r2,-12(fp)
    35b4:	10000816 	blt	r2,zero,35d8 <lseek+0x48>
    35b8:	01400304 	movi	r5,12
    35bc:	e13ffd17 	ldw	r4,-12(fp)
    35c0:	00030fc0 	call	30fc <__mulsi3>
    35c4:	1007883a 	mov	r3,r2
    35c8:	00800034 	movhi	r2,0
    35cc:	1097f004 	addi	r2,r2,24512
    35d0:	1885883a 	add	r2,r3,r2
    35d4:	00000106 	br	35dc <lseek+0x4c>
    35d8:	0005883a 	mov	r2,zero
    35dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    35e0:	e0bffc17 	ldw	r2,-16(fp)
    35e4:	10001026 	beq	r2,zero,3628 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    35e8:	e0bffc17 	ldw	r2,-16(fp)
    35ec:	10800017 	ldw	r2,0(r2)
    35f0:	10800717 	ldw	r2,28(r2)
    35f4:	10000926 	beq	r2,zero,361c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    35f8:	e0bffc17 	ldw	r2,-16(fp)
    35fc:	10800017 	ldw	r2,0(r2)
    3600:	10800717 	ldw	r2,28(r2)
    3604:	e1bfff17 	ldw	r6,-4(fp)
    3608:	e17ffe17 	ldw	r5,-8(fp)
    360c:	e13ffc17 	ldw	r4,-16(fp)
    3610:	103ee83a 	callr	r2
    3614:	e0bffb15 	stw	r2,-20(fp)
    3618:	00000506 	br	3630 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    361c:	00bfde84 	movi	r2,-134
    3620:	e0bffb15 	stw	r2,-20(fp)
    3624:	00000206 	br	3630 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    3628:	00bfebc4 	movi	r2,-81
    362c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    3630:	e0bffb17 	ldw	r2,-20(fp)
    3634:	1000070e 	bge	r2,zero,3654 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    3638:	00035540 	call	3554 <alt_get_errno>
    363c:	1007883a 	mov	r3,r2
    3640:	e0bffb17 	ldw	r2,-20(fp)
    3644:	0085c83a 	sub	r2,zero,r2
    3648:	18800015 	stw	r2,0(r3)
    rc = -1;
    364c:	00bfffc4 	movi	r2,-1
    3650:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    3654:	e0bffb17 	ldw	r2,-20(fp)
}
    3658:	e037883a 	mov	sp,fp
    365c:	dfc00117 	ldw	ra,4(sp)
    3660:	df000017 	ldw	fp,0(sp)
    3664:	dec00204 	addi	sp,sp,8
    3668:	f800283a 	ret

0000366c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    366c:	defffd04 	addi	sp,sp,-12
    3670:	dfc00215 	stw	ra,8(sp)
    3674:	df000115 	stw	fp,4(sp)
    3678:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    367c:	0009883a 	mov	r4,zero
    3680:	0003b040 	call	3b04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    3684:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3688:	0003b3c0 	call	3b3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    368c:	01800034 	movhi	r6,0
    3690:	3195d304 	addi	r6,r6,22348
    3694:	01400034 	movhi	r5,0
    3698:	2955d304 	addi	r5,r5,22348
    369c:	01000034 	movhi	r4,0
    36a0:	2115d304 	addi	r4,r4,22348
    36a4:	0004cc80 	call	4cc8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    36a8:	d0a6ad17 	ldw	r2,-25932(gp)
    36ac:	d0e6ae17 	ldw	r3,-25928(gp)
    36b0:	d126af17 	ldw	r4,-25924(gp)
    36b4:	200d883a 	mov	r6,r4
    36b8:	180b883a 	mov	r5,r3
    36bc:	1009883a 	mov	r4,r2
    36c0:	000024c0 	call	24c <main>
    36c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    36c8:	01000044 	movi	r4,1
    36cc:	00031600 	call	3160 <close>
  exit (result);
    36d0:	e13fff17 	ldw	r4,-4(fp)
    36d4:	00054880 	call	5488 <exit>

000036d8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    36d8:	defffe04 	addi	sp,sp,-8
    36dc:	df000115 	stw	fp,4(sp)
    36e0:	df000104 	addi	fp,sp,4
    36e4:	e13fff15 	stw	r4,-4(fp)
}
    36e8:	0001883a 	nop
    36ec:	e037883a 	mov	sp,fp
    36f0:	df000017 	ldw	fp,0(sp)
    36f4:	dec00104 	addi	sp,sp,4
    36f8:	f800283a 	ret

000036fc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    36fc:	defffe04 	addi	sp,sp,-8
    3700:	df000115 	stw	fp,4(sp)
    3704:	df000104 	addi	fp,sp,4
    3708:	e13fff15 	stw	r4,-4(fp)
}
    370c:	0001883a 	nop
    3710:	e037883a 	mov	sp,fp
    3714:	df000017 	ldw	fp,0(sp)
    3718:	dec00104 	addi	sp,sp,4
    371c:	f800283a 	ret

00003720 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3720:	defffe04 	addi	sp,sp,-8
    3724:	dfc00115 	stw	ra,4(sp)
    3728:	df000015 	stw	fp,0(sp)
    372c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3730:	d0a00917 	ldw	r2,-32732(gp)
    3734:	10000326 	beq	r2,zero,3744 <alt_get_errno+0x24>
    3738:	d0a00917 	ldw	r2,-32732(gp)
    373c:	103ee83a 	callr	r2
    3740:	00000106 	br	3748 <alt_get_errno+0x28>
    3744:	d0a6ac04 	addi	r2,gp,-25936
}
    3748:	e037883a 	mov	sp,fp
    374c:	dfc00117 	ldw	ra,4(sp)
    3750:	df000017 	ldw	fp,0(sp)
    3754:	dec00204 	addi	sp,sp,8
    3758:	f800283a 	ret

0000375c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    375c:	defff904 	addi	sp,sp,-28
    3760:	dfc00615 	stw	ra,24(sp)
    3764:	df000515 	stw	fp,20(sp)
    3768:	df000504 	addi	fp,sp,20
    376c:	e13ffd15 	stw	r4,-12(fp)
    3770:	e17ffe15 	stw	r5,-8(fp)
    3774:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3778:	e0bffd17 	ldw	r2,-12(fp)
    377c:	10000816 	blt	r2,zero,37a0 <read+0x44>
    3780:	01400304 	movi	r5,12
    3784:	e13ffd17 	ldw	r4,-12(fp)
    3788:	00030fc0 	call	30fc <__mulsi3>
    378c:	1007883a 	mov	r3,r2
    3790:	00800034 	movhi	r2,0
    3794:	1097f004 	addi	r2,r2,24512
    3798:	1885883a 	add	r2,r3,r2
    379c:	00000106 	br	37a4 <read+0x48>
    37a0:	0005883a 	mov	r2,zero
    37a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    37a8:	e0bffb17 	ldw	r2,-20(fp)
    37ac:	10002226 	beq	r2,zero,3838 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    37b0:	e0bffb17 	ldw	r2,-20(fp)
    37b4:	10800217 	ldw	r2,8(r2)
    37b8:	108000cc 	andi	r2,r2,3
    37bc:	10800060 	cmpeqi	r2,r2,1
    37c0:	1000181e 	bne	r2,zero,3824 <read+0xc8>
        (fd->dev->read))
    37c4:	e0bffb17 	ldw	r2,-20(fp)
    37c8:	10800017 	ldw	r2,0(r2)
    37cc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    37d0:	10001426 	beq	r2,zero,3824 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    37d4:	e0bffb17 	ldw	r2,-20(fp)
    37d8:	10800017 	ldw	r2,0(r2)
    37dc:	10800517 	ldw	r2,20(r2)
    37e0:	e0ffff17 	ldw	r3,-4(fp)
    37e4:	180d883a 	mov	r6,r3
    37e8:	e17ffe17 	ldw	r5,-8(fp)
    37ec:	e13ffb17 	ldw	r4,-20(fp)
    37f0:	103ee83a 	callr	r2
    37f4:	e0bffc15 	stw	r2,-16(fp)
    37f8:	e0bffc17 	ldw	r2,-16(fp)
    37fc:	1000070e 	bge	r2,zero,381c <read+0xc0>
        {
          ALT_ERRNO = -rval;
    3800:	00037200 	call	3720 <alt_get_errno>
    3804:	1007883a 	mov	r3,r2
    3808:	e0bffc17 	ldw	r2,-16(fp)
    380c:	0085c83a 	sub	r2,zero,r2
    3810:	18800015 	stw	r2,0(r3)
          return -1;
    3814:	00bfffc4 	movi	r2,-1
    3818:	00000c06 	br	384c <read+0xf0>
        }
        return rval;
    381c:	e0bffc17 	ldw	r2,-16(fp)
    3820:	00000a06 	br	384c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3824:	00037200 	call	3720 <alt_get_errno>
    3828:	1007883a 	mov	r3,r2
    382c:	00800344 	movi	r2,13
    3830:	18800015 	stw	r2,0(r3)
    3834:	00000406 	br	3848 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3838:	00037200 	call	3720 <alt_get_errno>
    383c:	1007883a 	mov	r3,r2
    3840:	00801444 	movi	r2,81
    3844:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3848:	00bfffc4 	movi	r2,-1
}
    384c:	e037883a 	mov	sp,fp
    3850:	dfc00117 	ldw	ra,4(sp)
    3854:	df000017 	ldw	fp,0(sp)
    3858:	dec00204 	addi	sp,sp,8
    385c:	f800283a 	ret

00003860 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3860:	defffc04 	addi	sp,sp,-16
    3864:	dfc00315 	stw	ra,12(sp)
    3868:	df000215 	stw	fp,8(sp)
    386c:	dc000115 	stw	r16,4(sp)
    3870:	df000204 	addi	fp,sp,8
    3874:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    3878:	e0bffe17 	ldw	r2,-8(fp)
    387c:	108000d0 	cmplti	r2,r2,3
    3880:	1000111e 	bne	r2,zero,38c8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    3884:	04000034 	movhi	r16,0
    3888:	8417f004 	addi	r16,r16,24512
    388c:	e0bffe17 	ldw	r2,-8(fp)
    3890:	01400304 	movi	r5,12
    3894:	1009883a 	mov	r4,r2
    3898:	00030fc0 	call	30fc <__mulsi3>
    389c:	8085883a 	add	r2,r16,r2
    38a0:	10800204 	addi	r2,r2,8
    38a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    38a8:	04000034 	movhi	r16,0
    38ac:	8417f004 	addi	r16,r16,24512
    38b0:	e0bffe17 	ldw	r2,-8(fp)
    38b4:	01400304 	movi	r5,12
    38b8:	1009883a 	mov	r4,r2
    38bc:	00030fc0 	call	30fc <__mulsi3>
    38c0:	8085883a 	add	r2,r16,r2
    38c4:	10000015 	stw	zero,0(r2)
  }
}
    38c8:	0001883a 	nop
    38cc:	e6ffff04 	addi	sp,fp,-4
    38d0:	dfc00217 	ldw	ra,8(sp)
    38d4:	df000117 	ldw	fp,4(sp)
    38d8:	dc000017 	ldw	r16,0(sp)
    38dc:	dec00304 	addi	sp,sp,12
    38e0:	f800283a 	ret

000038e4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    38e4:	defff904 	addi	sp,sp,-28
    38e8:	df000615 	stw	fp,24(sp)
    38ec:	df000604 	addi	fp,sp,24
    38f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    38f4:	0005303a 	rdctl	r2,status
    38f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    38fc:	e0fffe17 	ldw	r3,-8(fp)
    3900:	00bfff84 	movi	r2,-2
    3904:	1884703a 	and	r2,r3,r2
    3908:	1001703a 	wrctl	status,r2
  
  return context;
    390c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3910:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3914:	d0a00a17 	ldw	r2,-32728(gp)
    3918:	10c000c4 	addi	r3,r2,3
    391c:	00bfff04 	movi	r2,-4
    3920:	1884703a 	and	r2,r3,r2
    3924:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3928:	d0e00a17 	ldw	r3,-32728(gp)
    392c:	e0bfff17 	ldw	r2,-4(fp)
    3930:	1887883a 	add	r3,r3,r2
    3934:	008000b4 	movhi	r2,2
    3938:	10800004 	addi	r2,r2,0
    393c:	10c0062e 	bgeu	r2,r3,3958 <sbrk+0x74>
    3940:	e0bffb17 	ldw	r2,-20(fp)
    3944:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3948:	e0bffa17 	ldw	r2,-24(fp)
    394c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3950:	00bfffc4 	movi	r2,-1
    3954:	00000b06 	br	3984 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    3958:	d0a00a17 	ldw	r2,-32728(gp)
    395c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    3960:	d0e00a17 	ldw	r3,-32728(gp)
    3964:	e0bfff17 	ldw	r2,-4(fp)
    3968:	1885883a 	add	r2,r3,r2
    396c:	d0a00a15 	stw	r2,-32728(gp)
    3970:	e0bffb17 	ldw	r2,-20(fp)
    3974:	e0bffc15 	stw	r2,-16(fp)
    3978:	e0bffc17 	ldw	r2,-16(fp)
    397c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3980:	e0bffd17 	ldw	r2,-12(fp)
} 
    3984:	e037883a 	mov	sp,fp
    3988:	df000017 	ldw	fp,0(sp)
    398c:	dec00104 	addi	sp,sp,4
    3990:	f800283a 	ret

00003994 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3994:	defffe04 	addi	sp,sp,-8
    3998:	dfc00115 	stw	ra,4(sp)
    399c:	df000015 	stw	fp,0(sp)
    39a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    39a4:	d0a00917 	ldw	r2,-32732(gp)
    39a8:	10000326 	beq	r2,zero,39b8 <alt_get_errno+0x24>
    39ac:	d0a00917 	ldw	r2,-32732(gp)
    39b0:	103ee83a 	callr	r2
    39b4:	00000106 	br	39bc <alt_get_errno+0x28>
    39b8:	d0a6ac04 	addi	r2,gp,-25936
}
    39bc:	e037883a 	mov	sp,fp
    39c0:	dfc00117 	ldw	ra,4(sp)
    39c4:	df000017 	ldw	fp,0(sp)
    39c8:	dec00204 	addi	sp,sp,8
    39cc:	f800283a 	ret

000039d0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    39d0:	defff904 	addi	sp,sp,-28
    39d4:	dfc00615 	stw	ra,24(sp)
    39d8:	df000515 	stw	fp,20(sp)
    39dc:	df000504 	addi	fp,sp,20
    39e0:	e13ffd15 	stw	r4,-12(fp)
    39e4:	e17ffe15 	stw	r5,-8(fp)
    39e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    39ec:	e0bffd17 	ldw	r2,-12(fp)
    39f0:	10000816 	blt	r2,zero,3a14 <write+0x44>
    39f4:	01400304 	movi	r5,12
    39f8:	e13ffd17 	ldw	r4,-12(fp)
    39fc:	00030fc0 	call	30fc <__mulsi3>
    3a00:	1007883a 	mov	r3,r2
    3a04:	00800034 	movhi	r2,0
    3a08:	1097f004 	addi	r2,r2,24512
    3a0c:	1885883a 	add	r2,r3,r2
    3a10:	00000106 	br	3a18 <write+0x48>
    3a14:	0005883a 	mov	r2,zero
    3a18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3a1c:	e0bffb17 	ldw	r2,-20(fp)
    3a20:	10002126 	beq	r2,zero,3aa8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3a24:	e0bffb17 	ldw	r2,-20(fp)
    3a28:	10800217 	ldw	r2,8(r2)
    3a2c:	108000cc 	andi	r2,r2,3
    3a30:	10001826 	beq	r2,zero,3a94 <write+0xc4>
    3a34:	e0bffb17 	ldw	r2,-20(fp)
    3a38:	10800017 	ldw	r2,0(r2)
    3a3c:	10800617 	ldw	r2,24(r2)
    3a40:	10001426 	beq	r2,zero,3a94 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3a44:	e0bffb17 	ldw	r2,-20(fp)
    3a48:	10800017 	ldw	r2,0(r2)
    3a4c:	10800617 	ldw	r2,24(r2)
    3a50:	e0ffff17 	ldw	r3,-4(fp)
    3a54:	180d883a 	mov	r6,r3
    3a58:	e17ffe17 	ldw	r5,-8(fp)
    3a5c:	e13ffb17 	ldw	r4,-20(fp)
    3a60:	103ee83a 	callr	r2
    3a64:	e0bffc15 	stw	r2,-16(fp)
    3a68:	e0bffc17 	ldw	r2,-16(fp)
    3a6c:	1000070e 	bge	r2,zero,3a8c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    3a70:	00039940 	call	3994 <alt_get_errno>
    3a74:	1007883a 	mov	r3,r2
    3a78:	e0bffc17 	ldw	r2,-16(fp)
    3a7c:	0085c83a 	sub	r2,zero,r2
    3a80:	18800015 	stw	r2,0(r3)
        return -1;
    3a84:	00bfffc4 	movi	r2,-1
    3a88:	00000c06 	br	3abc <write+0xec>
      }
      return rval;
    3a8c:	e0bffc17 	ldw	r2,-16(fp)
    3a90:	00000a06 	br	3abc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3a94:	00039940 	call	3994 <alt_get_errno>
    3a98:	1007883a 	mov	r3,r2
    3a9c:	00800344 	movi	r2,13
    3aa0:	18800015 	stw	r2,0(r3)
    3aa4:	00000406 	br	3ab8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3aa8:	00039940 	call	3994 <alt_get_errno>
    3aac:	1007883a 	mov	r3,r2
    3ab0:	00801444 	movi	r2,81
    3ab4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3ab8:	00bfffc4 	movi	r2,-1
}
    3abc:	e037883a 	mov	sp,fp
    3ac0:	dfc00117 	ldw	ra,4(sp)
    3ac4:	df000017 	ldw	fp,0(sp)
    3ac8:	dec00204 	addi	sp,sp,8
    3acc:	f800283a 	ret

00003ad0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3ad0:	defffd04 	addi	sp,sp,-12
    3ad4:	dfc00215 	stw	ra,8(sp)
    3ad8:	df000115 	stw	fp,4(sp)
    3adc:	df000104 	addi	fp,sp,4
    3ae0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3ae4:	d1600604 	addi	r5,gp,-32744
    3ae8:	e13fff17 	ldw	r4,-4(fp)
    3aec:	00048800 	call	4880 <alt_dev_llist_insert>
}
    3af0:	e037883a 	mov	sp,fp
    3af4:	dfc00117 	ldw	ra,4(sp)
    3af8:	df000017 	ldw	fp,0(sp)
    3afc:	dec00204 	addi	sp,sp,8
    3b00:	f800283a 	ret

00003b04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3b04:	defffd04 	addi	sp,sp,-12
    3b08:	dfc00215 	stw	ra,8(sp)
    3b0c:	df000115 	stw	fp,4(sp)
    3b10:	df000104 	addi	fp,sp,4
    3b14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    3b18:	000516c0 	call	516c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3b1c:	00800044 	movi	r2,1
    3b20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3b24:	0001883a 	nop
    3b28:	e037883a 	mov	sp,fp
    3b2c:	dfc00117 	ldw	ra,4(sp)
    3b30:	df000017 	ldw	fp,0(sp)
    3b34:	dec00204 	addi	sp,sp,8
    3b38:	f800283a 	ret

00003b3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3b3c:	defffe04 	addi	sp,sp,-8
    3b40:	dfc00115 	stw	ra,4(sp)
    3b44:	df000015 	stw	fp,0(sp)
    3b48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    3b4c:	01c0fa04 	movi	r7,1000
    3b50:	000d883a 	mov	r6,zero
    3b54:	000b883a 	mov	r5,zero
    3b58:	010000b4 	movhi	r4,2
    3b5c:	21041004 	addi	r4,r4,4160
    3b60:	000467c0 	call	467c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    3b64:	01800044 	movi	r6,1
    3b68:	000b883a 	mov	r5,zero
    3b6c:	01000034 	movhi	r4,0
    3b70:	21185a04 	addi	r4,r4,24936
    3b74:	0003d000 	call	3d00 <altera_avalon_jtag_uart_init>
    3b78:	01000034 	movhi	r4,0
    3b7c:	21185004 	addi	r4,r4,24896
    3b80:	0003ad00 	call	3ad0 <alt_dev_reg>
}
    3b84:	0001883a 	nop
    3b88:	e037883a 	mov	sp,fp
    3b8c:	dfc00117 	ldw	ra,4(sp)
    3b90:	df000017 	ldw	fp,0(sp)
    3b94:	dec00204 	addi	sp,sp,8
    3b98:	f800283a 	ret

00003b9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3b9c:	defffa04 	addi	sp,sp,-24
    3ba0:	dfc00515 	stw	ra,20(sp)
    3ba4:	df000415 	stw	fp,16(sp)
    3ba8:	df000404 	addi	fp,sp,16
    3bac:	e13ffd15 	stw	r4,-12(fp)
    3bb0:	e17ffe15 	stw	r5,-8(fp)
    3bb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3bb8:	e0bffd17 	ldw	r2,-12(fp)
    3bbc:	10800017 	ldw	r2,0(r2)
    3bc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3bc4:	e0bffc17 	ldw	r2,-16(fp)
    3bc8:	10c00a04 	addi	r3,r2,40
    3bcc:	e0bffd17 	ldw	r2,-12(fp)
    3bd0:	10800217 	ldw	r2,8(r2)
    3bd4:	100f883a 	mov	r7,r2
    3bd8:	e1bfff17 	ldw	r6,-4(fp)
    3bdc:	e17ffe17 	ldw	r5,-8(fp)
    3be0:	1809883a 	mov	r4,r3
    3be4:	00041c40 	call	41c4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    3be8:	e037883a 	mov	sp,fp
    3bec:	dfc00117 	ldw	ra,4(sp)
    3bf0:	df000017 	ldw	fp,0(sp)
    3bf4:	dec00204 	addi	sp,sp,8
    3bf8:	f800283a 	ret

00003bfc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3bfc:	defffa04 	addi	sp,sp,-24
    3c00:	dfc00515 	stw	ra,20(sp)
    3c04:	df000415 	stw	fp,16(sp)
    3c08:	df000404 	addi	fp,sp,16
    3c0c:	e13ffd15 	stw	r4,-12(fp)
    3c10:	e17ffe15 	stw	r5,-8(fp)
    3c14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3c18:	e0bffd17 	ldw	r2,-12(fp)
    3c1c:	10800017 	ldw	r2,0(r2)
    3c20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3c24:	e0bffc17 	ldw	r2,-16(fp)
    3c28:	10c00a04 	addi	r3,r2,40
    3c2c:	e0bffd17 	ldw	r2,-12(fp)
    3c30:	10800217 	ldw	r2,8(r2)
    3c34:	100f883a 	mov	r7,r2
    3c38:	e1bfff17 	ldw	r6,-4(fp)
    3c3c:	e17ffe17 	ldw	r5,-8(fp)
    3c40:	1809883a 	mov	r4,r3
    3c44:	00043e00 	call	43e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3c48:	e037883a 	mov	sp,fp
    3c4c:	dfc00117 	ldw	ra,4(sp)
    3c50:	df000017 	ldw	fp,0(sp)
    3c54:	dec00204 	addi	sp,sp,8
    3c58:	f800283a 	ret

00003c5c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3c5c:	defffc04 	addi	sp,sp,-16
    3c60:	dfc00315 	stw	ra,12(sp)
    3c64:	df000215 	stw	fp,8(sp)
    3c68:	df000204 	addi	fp,sp,8
    3c6c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3c70:	e0bfff17 	ldw	r2,-4(fp)
    3c74:	10800017 	ldw	r2,0(r2)
    3c78:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    3c7c:	e0bffe17 	ldw	r2,-8(fp)
    3c80:	10c00a04 	addi	r3,r2,40
    3c84:	e0bfff17 	ldw	r2,-4(fp)
    3c88:	10800217 	ldw	r2,8(r2)
    3c8c:	100b883a 	mov	r5,r2
    3c90:	1809883a 	mov	r4,r3
    3c94:	000406c0 	call	406c <altera_avalon_jtag_uart_close>
}
    3c98:	e037883a 	mov	sp,fp
    3c9c:	dfc00117 	ldw	ra,4(sp)
    3ca0:	df000017 	ldw	fp,0(sp)
    3ca4:	dec00204 	addi	sp,sp,8
    3ca8:	f800283a 	ret

00003cac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    3cac:	defffa04 	addi	sp,sp,-24
    3cb0:	dfc00515 	stw	ra,20(sp)
    3cb4:	df000415 	stw	fp,16(sp)
    3cb8:	df000404 	addi	fp,sp,16
    3cbc:	e13ffd15 	stw	r4,-12(fp)
    3cc0:	e17ffe15 	stw	r5,-8(fp)
    3cc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    3cc8:	e0bffd17 	ldw	r2,-12(fp)
    3ccc:	10800017 	ldw	r2,0(r2)
    3cd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    3cd4:	e0bffc17 	ldw	r2,-16(fp)
    3cd8:	10800a04 	addi	r2,r2,40
    3cdc:	e1bfff17 	ldw	r6,-4(fp)
    3ce0:	e17ffe17 	ldw	r5,-8(fp)
    3ce4:	1009883a 	mov	r4,r2
    3ce8:	00040d40 	call	40d4 <altera_avalon_jtag_uart_ioctl>
}
    3cec:	e037883a 	mov	sp,fp
    3cf0:	dfc00117 	ldw	ra,4(sp)
    3cf4:	df000017 	ldw	fp,0(sp)
    3cf8:	dec00204 	addi	sp,sp,8
    3cfc:	f800283a 	ret

00003d00 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    3d00:	defffa04 	addi	sp,sp,-24
    3d04:	dfc00515 	stw	ra,20(sp)
    3d08:	df000415 	stw	fp,16(sp)
    3d0c:	df000404 	addi	fp,sp,16
    3d10:	e13ffd15 	stw	r4,-12(fp)
    3d14:	e17ffe15 	stw	r5,-8(fp)
    3d18:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3d1c:	e0bffd17 	ldw	r2,-12(fp)
    3d20:	00c00044 	movi	r3,1
    3d24:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    3d28:	e0bffd17 	ldw	r2,-12(fp)
    3d2c:	10800017 	ldw	r2,0(r2)
    3d30:	10800104 	addi	r2,r2,4
    3d34:	1007883a 	mov	r3,r2
    3d38:	e0bffd17 	ldw	r2,-12(fp)
    3d3c:	10800817 	ldw	r2,32(r2)
    3d40:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    3d44:	e0bffe17 	ldw	r2,-8(fp)
    3d48:	e0ffff17 	ldw	r3,-4(fp)
    3d4c:	d8000015 	stw	zero,0(sp)
    3d50:	e1fffd17 	ldw	r7,-12(fp)
    3d54:	01800034 	movhi	r6,0
    3d58:	318f7004 	addi	r6,r6,15808
    3d5c:	180b883a 	mov	r5,r3
    3d60:	1009883a 	mov	r4,r2
    3d64:	00049440 	call	4944 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    3d68:	e0bffd17 	ldw	r2,-12(fp)
    3d6c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    3d70:	e0bffd17 	ldw	r2,-12(fp)
    3d74:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    3d78:	d0e6b117 	ldw	r3,-25916(gp)
    3d7c:	e1fffd17 	ldw	r7,-12(fp)
    3d80:	01800034 	movhi	r6,0
    3d84:	318ff304 	addi	r6,r6,16332
    3d88:	180b883a 	mov	r5,r3
    3d8c:	1009883a 	mov	r4,r2
    3d90:	00046f80 	call	46f8 <alt_alarm_start>
    3d94:	1000040e 	bge	r2,zero,3da8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    3d98:	e0fffd17 	ldw	r3,-12(fp)
    3d9c:	00a00034 	movhi	r2,32768
    3da0:	10bfffc4 	addi	r2,r2,-1
    3da4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    3da8:	0001883a 	nop
    3dac:	e037883a 	mov	sp,fp
    3db0:	dfc00117 	ldw	ra,4(sp)
    3db4:	df000017 	ldw	fp,0(sp)
    3db8:	dec00204 	addi	sp,sp,8
    3dbc:	f800283a 	ret

00003dc0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    3dc0:	defff804 	addi	sp,sp,-32
    3dc4:	df000715 	stw	fp,28(sp)
    3dc8:	df000704 	addi	fp,sp,28
    3dcc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    3dd0:	e0bfff17 	ldw	r2,-4(fp)
    3dd4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    3dd8:	e0bffb17 	ldw	r2,-20(fp)
    3ddc:	10800017 	ldw	r2,0(r2)
    3de0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3de4:	e0bffc17 	ldw	r2,-16(fp)
    3de8:	10800104 	addi	r2,r2,4
    3dec:	10800037 	ldwio	r2,0(r2)
    3df0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    3df4:	e0bffd17 	ldw	r2,-12(fp)
    3df8:	1080c00c 	andi	r2,r2,768
    3dfc:	10006d26 	beq	r2,zero,3fb4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    3e00:	e0bffd17 	ldw	r2,-12(fp)
    3e04:	1080400c 	andi	r2,r2,256
    3e08:	10003526 	beq	r2,zero,3ee0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    3e0c:	00800074 	movhi	r2,1
    3e10:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3e14:	e0bffb17 	ldw	r2,-20(fp)
    3e18:	10800a17 	ldw	r2,40(r2)
    3e1c:	10800044 	addi	r2,r2,1
    3e20:	1081ffcc 	andi	r2,r2,2047
    3e24:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    3e28:	e0bffb17 	ldw	r2,-20(fp)
    3e2c:	10c00b17 	ldw	r3,44(r2)
    3e30:	e0bffe17 	ldw	r2,-8(fp)
    3e34:	18801526 	beq	r3,r2,3e8c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    3e38:	e0bffc17 	ldw	r2,-16(fp)
    3e3c:	10800037 	ldwio	r2,0(r2)
    3e40:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    3e44:	e0bff917 	ldw	r2,-28(fp)
    3e48:	10a0000c 	andi	r2,r2,32768
    3e4c:	10001126 	beq	r2,zero,3e94 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    3e50:	e0bffb17 	ldw	r2,-20(fp)
    3e54:	10800a17 	ldw	r2,40(r2)
    3e58:	e0fff917 	ldw	r3,-28(fp)
    3e5c:	1809883a 	mov	r4,r3
    3e60:	e0fffb17 	ldw	r3,-20(fp)
    3e64:	1885883a 	add	r2,r3,r2
    3e68:	10800e04 	addi	r2,r2,56
    3e6c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3e70:	e0bffb17 	ldw	r2,-20(fp)
    3e74:	10800a17 	ldw	r2,40(r2)
    3e78:	10800044 	addi	r2,r2,1
    3e7c:	10c1ffcc 	andi	r3,r2,2047
    3e80:	e0bffb17 	ldw	r2,-20(fp)
    3e84:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    3e88:	003fe206 	br	3e14 <__alt_data_end+0xfffe3e14>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    3e8c:	0001883a 	nop
    3e90:	00000106 	br	3e98 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    3e94:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    3e98:	e0bff917 	ldw	r2,-28(fp)
    3e9c:	10bfffec 	andhi	r2,r2,65535
    3ea0:	10000f26 	beq	r2,zero,3ee0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3ea4:	e0bffb17 	ldw	r2,-20(fp)
    3ea8:	10c00817 	ldw	r3,32(r2)
    3eac:	00bfff84 	movi	r2,-2
    3eb0:	1886703a 	and	r3,r3,r2
    3eb4:	e0bffb17 	ldw	r2,-20(fp)
    3eb8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    3ebc:	e0bffc17 	ldw	r2,-16(fp)
    3ec0:	10800104 	addi	r2,r2,4
    3ec4:	1007883a 	mov	r3,r2
    3ec8:	e0bffb17 	ldw	r2,-20(fp)
    3ecc:	10800817 	ldw	r2,32(r2)
    3ed0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3ed4:	e0bffc17 	ldw	r2,-16(fp)
    3ed8:	10800104 	addi	r2,r2,4
    3edc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    3ee0:	e0bffd17 	ldw	r2,-12(fp)
    3ee4:	1080800c 	andi	r2,r2,512
    3ee8:	103fbe26 	beq	r2,zero,3de4 <__alt_data_end+0xfffe3de4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    3eec:	e0bffd17 	ldw	r2,-12(fp)
    3ef0:	1004d43a 	srli	r2,r2,16
    3ef4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    3ef8:	00001406 	br	3f4c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    3efc:	e0bffc17 	ldw	r2,-16(fp)
    3f00:	e0fffb17 	ldw	r3,-20(fp)
    3f04:	18c00d17 	ldw	r3,52(r3)
    3f08:	e13ffb17 	ldw	r4,-20(fp)
    3f0c:	20c7883a 	add	r3,r4,r3
    3f10:	18c20e04 	addi	r3,r3,2104
    3f14:	18c00003 	ldbu	r3,0(r3)
    3f18:	18c03fcc 	andi	r3,r3,255
    3f1c:	18c0201c 	xori	r3,r3,128
    3f20:	18ffe004 	addi	r3,r3,-128
    3f24:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3f28:	e0bffb17 	ldw	r2,-20(fp)
    3f2c:	10800d17 	ldw	r2,52(r2)
    3f30:	10800044 	addi	r2,r2,1
    3f34:	10c1ffcc 	andi	r3,r2,2047
    3f38:	e0bffb17 	ldw	r2,-20(fp)
    3f3c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    3f40:	e0bffa17 	ldw	r2,-24(fp)
    3f44:	10bfffc4 	addi	r2,r2,-1
    3f48:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    3f4c:	e0bffa17 	ldw	r2,-24(fp)
    3f50:	10000526 	beq	r2,zero,3f68 <altera_avalon_jtag_uart_irq+0x1a8>
    3f54:	e0bffb17 	ldw	r2,-20(fp)
    3f58:	10c00d17 	ldw	r3,52(r2)
    3f5c:	e0bffb17 	ldw	r2,-20(fp)
    3f60:	10800c17 	ldw	r2,48(r2)
    3f64:	18bfe51e 	bne	r3,r2,3efc <__alt_data_end+0xfffe3efc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    3f68:	e0bffa17 	ldw	r2,-24(fp)
    3f6c:	103f9d26 	beq	r2,zero,3de4 <__alt_data_end+0xfffe3de4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    3f70:	e0bffb17 	ldw	r2,-20(fp)
    3f74:	10c00817 	ldw	r3,32(r2)
    3f78:	00bfff44 	movi	r2,-3
    3f7c:	1886703a 	and	r3,r3,r2
    3f80:	e0bffb17 	ldw	r2,-20(fp)
    3f84:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    3f88:	e0bffb17 	ldw	r2,-20(fp)
    3f8c:	10800017 	ldw	r2,0(r2)
    3f90:	10800104 	addi	r2,r2,4
    3f94:	1007883a 	mov	r3,r2
    3f98:	e0bffb17 	ldw	r2,-20(fp)
    3f9c:	10800817 	ldw	r2,32(r2)
    3fa0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3fa4:	e0bffc17 	ldw	r2,-16(fp)
    3fa8:	10800104 	addi	r2,r2,4
    3fac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    3fb0:	003f8c06 	br	3de4 <__alt_data_end+0xfffe3de4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    3fb4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    3fb8:	0001883a 	nop
    3fbc:	e037883a 	mov	sp,fp
    3fc0:	df000017 	ldw	fp,0(sp)
    3fc4:	dec00104 	addi	sp,sp,4
    3fc8:	f800283a 	ret

00003fcc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    3fcc:	defff804 	addi	sp,sp,-32
    3fd0:	df000715 	stw	fp,28(sp)
    3fd4:	df000704 	addi	fp,sp,28
    3fd8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    3fdc:	e0bffb17 	ldw	r2,-20(fp)
    3fe0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    3fe4:	e0bff917 	ldw	r2,-28(fp)
    3fe8:	10800017 	ldw	r2,0(r2)
    3fec:	10800104 	addi	r2,r2,4
    3ff0:	10800037 	ldwio	r2,0(r2)
    3ff4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    3ff8:	e0bffa17 	ldw	r2,-24(fp)
    3ffc:	1081000c 	andi	r2,r2,1024
    4000:	10000b26 	beq	r2,zero,4030 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    4004:	e0bff917 	ldw	r2,-28(fp)
    4008:	10800017 	ldw	r2,0(r2)
    400c:	10800104 	addi	r2,r2,4
    4010:	1007883a 	mov	r3,r2
    4014:	e0bff917 	ldw	r2,-28(fp)
    4018:	10800817 	ldw	r2,32(r2)
    401c:	10810014 	ori	r2,r2,1024
    4020:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    4024:	e0bff917 	ldw	r2,-28(fp)
    4028:	10000915 	stw	zero,36(r2)
    402c:	00000a06 	br	4058 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    4030:	e0bff917 	ldw	r2,-28(fp)
    4034:	10c00917 	ldw	r3,36(r2)
    4038:	00a00034 	movhi	r2,32768
    403c:	10bfff04 	addi	r2,r2,-4
    4040:	10c00536 	bltu	r2,r3,4058 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    4044:	e0bff917 	ldw	r2,-28(fp)
    4048:	10800917 	ldw	r2,36(r2)
    404c:	10c00044 	addi	r3,r2,1
    4050:	e0bff917 	ldw	r2,-28(fp)
    4054:	10c00915 	stw	r3,36(r2)
    4058:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    405c:	e037883a 	mov	sp,fp
    4060:	df000017 	ldw	fp,0(sp)
    4064:	dec00104 	addi	sp,sp,4
    4068:	f800283a 	ret

0000406c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    406c:	defffd04 	addi	sp,sp,-12
    4070:	df000215 	stw	fp,8(sp)
    4074:	df000204 	addi	fp,sp,8
    4078:	e13ffe15 	stw	r4,-8(fp)
    407c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4080:	00000506 	br	4098 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    4084:	e0bfff17 	ldw	r2,-4(fp)
    4088:	1090000c 	andi	r2,r2,16384
    408c:	10000226 	beq	r2,zero,4098 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    4090:	00bffd44 	movi	r2,-11
    4094:	00000b06 	br	40c4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4098:	e0bffe17 	ldw	r2,-8(fp)
    409c:	10c00d17 	ldw	r3,52(r2)
    40a0:	e0bffe17 	ldw	r2,-8(fp)
    40a4:	10800c17 	ldw	r2,48(r2)
    40a8:	18800526 	beq	r3,r2,40c0 <altera_avalon_jtag_uart_close+0x54>
    40ac:	e0bffe17 	ldw	r2,-8(fp)
    40b0:	10c00917 	ldw	r3,36(r2)
    40b4:	e0bffe17 	ldw	r2,-8(fp)
    40b8:	10800117 	ldw	r2,4(r2)
    40bc:	18bff136 	bltu	r3,r2,4084 <__alt_data_end+0xfffe4084>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    40c0:	0005883a 	mov	r2,zero
}
    40c4:	e037883a 	mov	sp,fp
    40c8:	df000017 	ldw	fp,0(sp)
    40cc:	dec00104 	addi	sp,sp,4
    40d0:	f800283a 	ret

000040d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    40d4:	defffa04 	addi	sp,sp,-24
    40d8:	df000515 	stw	fp,20(sp)
    40dc:	df000504 	addi	fp,sp,20
    40e0:	e13ffd15 	stw	r4,-12(fp)
    40e4:	e17ffe15 	stw	r5,-8(fp)
    40e8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    40ec:	00bff9c4 	movi	r2,-25
    40f0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    40f4:	e0bffe17 	ldw	r2,-8(fp)
    40f8:	10da8060 	cmpeqi	r3,r2,27137
    40fc:	1800031e 	bne	r3,zero,410c <altera_avalon_jtag_uart_ioctl+0x38>
    4100:	109a80a0 	cmpeqi	r2,r2,27138
    4104:	1000181e 	bne	r2,zero,4168 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    4108:	00002906 	br	41b0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    410c:	e0bffd17 	ldw	r2,-12(fp)
    4110:	10c00117 	ldw	r3,4(r2)
    4114:	00a00034 	movhi	r2,32768
    4118:	10bfffc4 	addi	r2,r2,-1
    411c:	18802126 	beq	r3,r2,41a4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    4120:	e0bfff17 	ldw	r2,-4(fp)
    4124:	10800017 	ldw	r2,0(r2)
    4128:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    412c:	e0bffc17 	ldw	r2,-16(fp)
    4130:	10800090 	cmplti	r2,r2,2
    4134:	1000061e 	bne	r2,zero,4150 <altera_avalon_jtag_uart_ioctl+0x7c>
    4138:	e0fffc17 	ldw	r3,-16(fp)
    413c:	00a00034 	movhi	r2,32768
    4140:	10bfffc4 	addi	r2,r2,-1
    4144:	18800226 	beq	r3,r2,4150 <altera_avalon_jtag_uart_ioctl+0x7c>
    4148:	e0bffc17 	ldw	r2,-16(fp)
    414c:	00000206 	br	4158 <altera_avalon_jtag_uart_ioctl+0x84>
    4150:	00a00034 	movhi	r2,32768
    4154:	10bfff84 	addi	r2,r2,-2
    4158:	e0fffd17 	ldw	r3,-12(fp)
    415c:	18800115 	stw	r2,4(r3)
      rc = 0;
    4160:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    4164:	00000f06 	br	41a4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    4168:	e0bffd17 	ldw	r2,-12(fp)
    416c:	10c00117 	ldw	r3,4(r2)
    4170:	00a00034 	movhi	r2,32768
    4174:	10bfffc4 	addi	r2,r2,-1
    4178:	18800c26 	beq	r3,r2,41ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    417c:	e0bffd17 	ldw	r2,-12(fp)
    4180:	10c00917 	ldw	r3,36(r2)
    4184:	e0bffd17 	ldw	r2,-12(fp)
    4188:	10800117 	ldw	r2,4(r2)
    418c:	1885803a 	cmpltu	r2,r3,r2
    4190:	10c03fcc 	andi	r3,r2,255
    4194:	e0bfff17 	ldw	r2,-4(fp)
    4198:	10c00015 	stw	r3,0(r2)
      rc = 0;
    419c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    41a0:	00000206 	br	41ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    41a4:	0001883a 	nop
    41a8:	00000106 	br	41b0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    41ac:	0001883a 	nop

  default:
    break;
  }

  return rc;
    41b0:	e0bffb17 	ldw	r2,-20(fp)
}
    41b4:	e037883a 	mov	sp,fp
    41b8:	df000017 	ldw	fp,0(sp)
    41bc:	dec00104 	addi	sp,sp,4
    41c0:	f800283a 	ret

000041c4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    41c4:	defff304 	addi	sp,sp,-52
    41c8:	dfc00c15 	stw	ra,48(sp)
    41cc:	df000b15 	stw	fp,44(sp)
    41d0:	df000b04 	addi	fp,sp,44
    41d4:	e13ffc15 	stw	r4,-16(fp)
    41d8:	e17ffd15 	stw	r5,-12(fp)
    41dc:	e1bffe15 	stw	r6,-8(fp)
    41e0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    41e4:	e0bffd17 	ldw	r2,-12(fp)
    41e8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    41ec:	00004706 	br	430c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    41f0:	e0bffc17 	ldw	r2,-16(fp)
    41f4:	10800a17 	ldw	r2,40(r2)
    41f8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    41fc:	e0bffc17 	ldw	r2,-16(fp)
    4200:	10800b17 	ldw	r2,44(r2)
    4204:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    4208:	e0fff717 	ldw	r3,-36(fp)
    420c:	e0bff817 	ldw	r2,-32(fp)
    4210:	18800536 	bltu	r3,r2,4228 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    4214:	e0fff717 	ldw	r3,-36(fp)
    4218:	e0bff817 	ldw	r2,-32(fp)
    421c:	1885c83a 	sub	r2,r3,r2
    4220:	e0bff615 	stw	r2,-40(fp)
    4224:	00000406 	br	4238 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    4228:	00c20004 	movi	r3,2048
    422c:	e0bff817 	ldw	r2,-32(fp)
    4230:	1885c83a 	sub	r2,r3,r2
    4234:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    4238:	e0bff617 	ldw	r2,-40(fp)
    423c:	10001e26 	beq	r2,zero,42b8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    4240:	e0fffe17 	ldw	r3,-8(fp)
    4244:	e0bff617 	ldw	r2,-40(fp)
    4248:	1880022e 	bgeu	r3,r2,4254 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    424c:	e0bffe17 	ldw	r2,-8(fp)
    4250:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    4254:	e0bffc17 	ldw	r2,-16(fp)
    4258:	10c00e04 	addi	r3,r2,56
    425c:	e0bff817 	ldw	r2,-32(fp)
    4260:	1885883a 	add	r2,r3,r2
    4264:	e1bff617 	ldw	r6,-40(fp)
    4268:	100b883a 	mov	r5,r2
    426c:	e13ff517 	ldw	r4,-44(fp)
    4270:	00017740 	call	1774 <memcpy>
      ptr   += n;
    4274:	e0fff517 	ldw	r3,-44(fp)
    4278:	e0bff617 	ldw	r2,-40(fp)
    427c:	1885883a 	add	r2,r3,r2
    4280:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    4284:	e0fffe17 	ldw	r3,-8(fp)
    4288:	e0bff617 	ldw	r2,-40(fp)
    428c:	1885c83a 	sub	r2,r3,r2
    4290:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4294:	e0fff817 	ldw	r3,-32(fp)
    4298:	e0bff617 	ldw	r2,-40(fp)
    429c:	1885883a 	add	r2,r3,r2
    42a0:	10c1ffcc 	andi	r3,r2,2047
    42a4:	e0bffc17 	ldw	r2,-16(fp)
    42a8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    42ac:	e0bffe17 	ldw	r2,-8(fp)
    42b0:	00bfcf16 	blt	zero,r2,41f0 <__alt_data_end+0xfffe41f0>
    42b4:	00000106 	br	42bc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    42b8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    42bc:	e0fff517 	ldw	r3,-44(fp)
    42c0:	e0bffd17 	ldw	r2,-12(fp)
    42c4:	1880141e 	bne	r3,r2,4318 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    42c8:	e0bfff17 	ldw	r2,-4(fp)
    42cc:	1090000c 	andi	r2,r2,16384
    42d0:	1000131e 	bne	r2,zero,4320 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    42d4:	0001883a 	nop
    42d8:	e0bffc17 	ldw	r2,-16(fp)
    42dc:	10c00a17 	ldw	r3,40(r2)
    42e0:	e0bff717 	ldw	r2,-36(fp)
    42e4:	1880051e 	bne	r3,r2,42fc <altera_avalon_jtag_uart_read+0x138>
    42e8:	e0bffc17 	ldw	r2,-16(fp)
    42ec:	10c00917 	ldw	r3,36(r2)
    42f0:	e0bffc17 	ldw	r2,-16(fp)
    42f4:	10800117 	ldw	r2,4(r2)
    42f8:	18bff736 	bltu	r3,r2,42d8 <__alt_data_end+0xfffe42d8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    42fc:	e0bffc17 	ldw	r2,-16(fp)
    4300:	10c00a17 	ldw	r3,40(r2)
    4304:	e0bff717 	ldw	r2,-36(fp)
    4308:	18800726 	beq	r3,r2,4328 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    430c:	e0bffe17 	ldw	r2,-8(fp)
    4310:	00bfb716 	blt	zero,r2,41f0 <__alt_data_end+0xfffe41f0>
    4314:	00000506 	br	432c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    4318:	0001883a 	nop
    431c:	00000306 	br	432c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    4320:	0001883a 	nop
    4324:	00000106 	br	432c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    4328:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    432c:	e0fff517 	ldw	r3,-44(fp)
    4330:	e0bffd17 	ldw	r2,-12(fp)
    4334:	18801826 	beq	r3,r2,4398 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4338:	0005303a 	rdctl	r2,status
    433c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4340:	e0fffb17 	ldw	r3,-20(fp)
    4344:	00bfff84 	movi	r2,-2
    4348:	1884703a 	and	r2,r3,r2
    434c:	1001703a 	wrctl	status,r2
  
  return context;
    4350:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    4354:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4358:	e0bffc17 	ldw	r2,-16(fp)
    435c:	10800817 	ldw	r2,32(r2)
    4360:	10c00054 	ori	r3,r2,1
    4364:	e0bffc17 	ldw	r2,-16(fp)
    4368:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    436c:	e0bffc17 	ldw	r2,-16(fp)
    4370:	10800017 	ldw	r2,0(r2)
    4374:	10800104 	addi	r2,r2,4
    4378:	1007883a 	mov	r3,r2
    437c:	e0bffc17 	ldw	r2,-16(fp)
    4380:	10800817 	ldw	r2,32(r2)
    4384:	18800035 	stwio	r2,0(r3)
    4388:	e0bffa17 	ldw	r2,-24(fp)
    438c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4390:	e0bff917 	ldw	r2,-28(fp)
    4394:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    4398:	e0fff517 	ldw	r3,-44(fp)
    439c:	e0bffd17 	ldw	r2,-12(fp)
    43a0:	18800426 	beq	r3,r2,43b4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    43a4:	e0fff517 	ldw	r3,-44(fp)
    43a8:	e0bffd17 	ldw	r2,-12(fp)
    43ac:	1885c83a 	sub	r2,r3,r2
    43b0:	00000606 	br	43cc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    43b4:	e0bfff17 	ldw	r2,-4(fp)
    43b8:	1090000c 	andi	r2,r2,16384
    43bc:	10000226 	beq	r2,zero,43c8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    43c0:	00bffd44 	movi	r2,-11
    43c4:	00000106 	br	43cc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    43c8:	00bffec4 	movi	r2,-5
}
    43cc:	e037883a 	mov	sp,fp
    43d0:	dfc00117 	ldw	ra,4(sp)
    43d4:	df000017 	ldw	fp,0(sp)
    43d8:	dec00204 	addi	sp,sp,8
    43dc:	f800283a 	ret

000043e0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    43e0:	defff304 	addi	sp,sp,-52
    43e4:	dfc00c15 	stw	ra,48(sp)
    43e8:	df000b15 	stw	fp,44(sp)
    43ec:	df000b04 	addi	fp,sp,44
    43f0:	e13ffc15 	stw	r4,-16(fp)
    43f4:	e17ffd15 	stw	r5,-12(fp)
    43f8:	e1bffe15 	stw	r6,-8(fp)
    43fc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    4400:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    4404:	e0bffd17 	ldw	r2,-12(fp)
    4408:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    440c:	00003706 	br	44ec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    4410:	e0bffc17 	ldw	r2,-16(fp)
    4414:	10800c17 	ldw	r2,48(r2)
    4418:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    441c:	e0bffc17 	ldw	r2,-16(fp)
    4420:	10800d17 	ldw	r2,52(r2)
    4424:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    4428:	e0fff917 	ldw	r3,-28(fp)
    442c:	e0bff517 	ldw	r2,-44(fp)
    4430:	1880062e 	bgeu	r3,r2,444c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    4434:	e0fff517 	ldw	r3,-44(fp)
    4438:	e0bff917 	ldw	r2,-28(fp)
    443c:	1885c83a 	sub	r2,r3,r2
    4440:	10bfffc4 	addi	r2,r2,-1
    4444:	e0bff615 	stw	r2,-40(fp)
    4448:	00000b06 	br	4478 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    444c:	e0bff517 	ldw	r2,-44(fp)
    4450:	10000526 	beq	r2,zero,4468 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    4454:	00c20004 	movi	r3,2048
    4458:	e0bff917 	ldw	r2,-28(fp)
    445c:	1885c83a 	sub	r2,r3,r2
    4460:	e0bff615 	stw	r2,-40(fp)
    4464:	00000406 	br	4478 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4468:	00c1ffc4 	movi	r3,2047
    446c:	e0bff917 	ldw	r2,-28(fp)
    4470:	1885c83a 	sub	r2,r3,r2
    4474:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    4478:	e0bff617 	ldw	r2,-40(fp)
    447c:	10001e26 	beq	r2,zero,44f8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    4480:	e0fffe17 	ldw	r3,-8(fp)
    4484:	e0bff617 	ldw	r2,-40(fp)
    4488:	1880022e 	bgeu	r3,r2,4494 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    448c:	e0bffe17 	ldw	r2,-8(fp)
    4490:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4494:	e0bffc17 	ldw	r2,-16(fp)
    4498:	10c20e04 	addi	r3,r2,2104
    449c:	e0bff917 	ldw	r2,-28(fp)
    44a0:	1885883a 	add	r2,r3,r2
    44a4:	e1bff617 	ldw	r6,-40(fp)
    44a8:	e17ffd17 	ldw	r5,-12(fp)
    44ac:	1009883a 	mov	r4,r2
    44b0:	00017740 	call	1774 <memcpy>
      ptr   += n;
    44b4:	e0fffd17 	ldw	r3,-12(fp)
    44b8:	e0bff617 	ldw	r2,-40(fp)
    44bc:	1885883a 	add	r2,r3,r2
    44c0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    44c4:	e0fffe17 	ldw	r3,-8(fp)
    44c8:	e0bff617 	ldw	r2,-40(fp)
    44cc:	1885c83a 	sub	r2,r3,r2
    44d0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    44d4:	e0fff917 	ldw	r3,-28(fp)
    44d8:	e0bff617 	ldw	r2,-40(fp)
    44dc:	1885883a 	add	r2,r3,r2
    44e0:	10c1ffcc 	andi	r3,r2,2047
    44e4:	e0bffc17 	ldw	r2,-16(fp)
    44e8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    44ec:	e0bffe17 	ldw	r2,-8(fp)
    44f0:	00bfc716 	blt	zero,r2,4410 <__alt_data_end+0xfffe4410>
    44f4:	00000106 	br	44fc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    44f8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    44fc:	0005303a 	rdctl	r2,status
    4500:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4504:	e0fffb17 	ldw	r3,-20(fp)
    4508:	00bfff84 	movi	r2,-2
    450c:	1884703a 	and	r2,r3,r2
    4510:	1001703a 	wrctl	status,r2
  
  return context;
    4514:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4518:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    451c:	e0bffc17 	ldw	r2,-16(fp)
    4520:	10800817 	ldw	r2,32(r2)
    4524:	10c00094 	ori	r3,r2,2
    4528:	e0bffc17 	ldw	r2,-16(fp)
    452c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4530:	e0bffc17 	ldw	r2,-16(fp)
    4534:	10800017 	ldw	r2,0(r2)
    4538:	10800104 	addi	r2,r2,4
    453c:	1007883a 	mov	r3,r2
    4540:	e0bffc17 	ldw	r2,-16(fp)
    4544:	10800817 	ldw	r2,32(r2)
    4548:	18800035 	stwio	r2,0(r3)
    454c:	e0bffa17 	ldw	r2,-24(fp)
    4550:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4554:	e0bff817 	ldw	r2,-32(fp)
    4558:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    455c:	e0bffe17 	ldw	r2,-8(fp)
    4560:	0080100e 	bge	zero,r2,45a4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    4564:	e0bfff17 	ldw	r2,-4(fp)
    4568:	1090000c 	andi	r2,r2,16384
    456c:	1000101e 	bne	r2,zero,45b0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    4570:	0001883a 	nop
    4574:	e0bffc17 	ldw	r2,-16(fp)
    4578:	10c00d17 	ldw	r3,52(r2)
    457c:	e0bff517 	ldw	r2,-44(fp)
    4580:	1880051e 	bne	r3,r2,4598 <altera_avalon_jtag_uart_write+0x1b8>
    4584:	e0bffc17 	ldw	r2,-16(fp)
    4588:	10c00917 	ldw	r3,36(r2)
    458c:	e0bffc17 	ldw	r2,-16(fp)
    4590:	10800117 	ldw	r2,4(r2)
    4594:	18bff736 	bltu	r3,r2,4574 <__alt_data_end+0xfffe4574>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    4598:	e0bffc17 	ldw	r2,-16(fp)
    459c:	10800917 	ldw	r2,36(r2)
    45a0:	1000051e 	bne	r2,zero,45b8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    45a4:	e0bffe17 	ldw	r2,-8(fp)
    45a8:	00bfd016 	blt	zero,r2,44ec <__alt_data_end+0xfffe44ec>
    45ac:	00000306 	br	45bc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    45b0:	0001883a 	nop
    45b4:	00000106 	br	45bc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    45b8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    45bc:	e0fffd17 	ldw	r3,-12(fp)
    45c0:	e0bff717 	ldw	r2,-36(fp)
    45c4:	18800426 	beq	r3,r2,45d8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    45c8:	e0fffd17 	ldw	r3,-12(fp)
    45cc:	e0bff717 	ldw	r2,-36(fp)
    45d0:	1885c83a 	sub	r2,r3,r2
    45d4:	00000606 	br	45f0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    45d8:	e0bfff17 	ldw	r2,-4(fp)
    45dc:	1090000c 	andi	r2,r2,16384
    45e0:	10000226 	beq	r2,zero,45ec <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    45e4:	00bffd44 	movi	r2,-11
    45e8:	00000106 	br	45f0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    45ec:	00bffec4 	movi	r2,-5
}
    45f0:	e037883a 	mov	sp,fp
    45f4:	dfc00117 	ldw	ra,4(sp)
    45f8:	df000017 	ldw	fp,0(sp)
    45fc:	dec00204 	addi	sp,sp,8
    4600:	f800283a 	ret

00004604 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    4604:	defffa04 	addi	sp,sp,-24
    4608:	dfc00515 	stw	ra,20(sp)
    460c:	df000415 	stw	fp,16(sp)
    4610:	df000404 	addi	fp,sp,16
    4614:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    4618:	0007883a 	mov	r3,zero
    461c:	e0bfff17 	ldw	r2,-4(fp)
    4620:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    4624:	e0bfff17 	ldw	r2,-4(fp)
    4628:	10800104 	addi	r2,r2,4
    462c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4630:	0005303a 	rdctl	r2,status
    4634:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4638:	e0fffd17 	ldw	r3,-12(fp)
    463c:	00bfff84 	movi	r2,-2
    4640:	1884703a 	and	r2,r3,r2
    4644:	1001703a 	wrctl	status,r2
  
  return context;
    4648:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    464c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    4650:	00050640 	call	5064 <alt_tick>
    4654:	e0bffc17 	ldw	r2,-16(fp)
    4658:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    465c:	e0bffe17 	ldw	r2,-8(fp)
    4660:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    4664:	0001883a 	nop
    4668:	e037883a 	mov	sp,fp
    466c:	dfc00117 	ldw	ra,4(sp)
    4670:	df000017 	ldw	fp,0(sp)
    4674:	dec00204 	addi	sp,sp,8
    4678:	f800283a 	ret

0000467c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    467c:	defff804 	addi	sp,sp,-32
    4680:	dfc00715 	stw	ra,28(sp)
    4684:	df000615 	stw	fp,24(sp)
    4688:	df000604 	addi	fp,sp,24
    468c:	e13ffc15 	stw	r4,-16(fp)
    4690:	e17ffd15 	stw	r5,-12(fp)
    4694:	e1bffe15 	stw	r6,-8(fp)
    4698:	e1ffff15 	stw	r7,-4(fp)
    469c:	e0bfff17 	ldw	r2,-4(fp)
    46a0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    46a4:	d0a6b117 	ldw	r2,-25916(gp)
    46a8:	1000021e 	bne	r2,zero,46b4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    46ac:	e0bffb17 	ldw	r2,-20(fp)
    46b0:	d0a6b115 	stw	r2,-25916(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    46b4:	e0bffc17 	ldw	r2,-16(fp)
    46b8:	10800104 	addi	r2,r2,4
    46bc:	00c001c4 	movi	r3,7
    46c0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    46c4:	d8000015 	stw	zero,0(sp)
    46c8:	e1fffc17 	ldw	r7,-16(fp)
    46cc:	01800034 	movhi	r6,0
    46d0:	31918104 	addi	r6,r6,17924
    46d4:	e17ffe17 	ldw	r5,-8(fp)
    46d8:	e13ffd17 	ldw	r4,-12(fp)
    46dc:	00049440 	call	4944 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    46e0:	0001883a 	nop
    46e4:	e037883a 	mov	sp,fp
    46e8:	dfc00117 	ldw	ra,4(sp)
    46ec:	df000017 	ldw	fp,0(sp)
    46f0:	dec00204 	addi	sp,sp,8
    46f4:	f800283a 	ret

000046f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    46f8:	defff504 	addi	sp,sp,-44
    46fc:	df000a15 	stw	fp,40(sp)
    4700:	df000a04 	addi	fp,sp,40
    4704:	e13ffc15 	stw	r4,-16(fp)
    4708:	e17ffd15 	stw	r5,-12(fp)
    470c:	e1bffe15 	stw	r6,-8(fp)
    4710:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    4714:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4718:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
    471c:	10003c26 	beq	r2,zero,4810 <alt_alarm_start+0x118>
  {
    if (alarm)
    4720:	e0bffc17 	ldw	r2,-16(fp)
    4724:	10003826 	beq	r2,zero,4808 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    4728:	e0bffc17 	ldw	r2,-16(fp)
    472c:	e0fffe17 	ldw	r3,-8(fp)
    4730:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    4734:	e0bffc17 	ldw	r2,-16(fp)
    4738:	e0ffff17 	ldw	r3,-4(fp)
    473c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4740:	0005303a 	rdctl	r2,status
    4744:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4748:	e0fff917 	ldw	r3,-28(fp)
    474c:	00bfff84 	movi	r2,-2
    4750:	1884703a 	and	r2,r3,r2
    4754:	1001703a 	wrctl	status,r2
  
  return context;
    4758:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    475c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    4760:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
    4764:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    4768:	e0fffd17 	ldw	r3,-12(fp)
    476c:	e0bff617 	ldw	r2,-40(fp)
    4770:	1885883a 	add	r2,r3,r2
    4774:	10c00044 	addi	r3,r2,1
    4778:	e0bffc17 	ldw	r2,-16(fp)
    477c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    4780:	e0bffc17 	ldw	r2,-16(fp)
    4784:	10c00217 	ldw	r3,8(r2)
    4788:	e0bff617 	ldw	r2,-40(fp)
    478c:	1880042e 	bgeu	r3,r2,47a0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    4790:	e0bffc17 	ldw	r2,-16(fp)
    4794:	00c00044 	movi	r3,1
    4798:	10c00405 	stb	r3,16(r2)
    479c:	00000206 	br	47a8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    47a0:	e0bffc17 	ldw	r2,-16(fp)
    47a4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    47a8:	e0bffc17 	ldw	r2,-16(fp)
    47ac:	d0e00c04 	addi	r3,gp,-32720
    47b0:	e0fffa15 	stw	r3,-24(fp)
    47b4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    47b8:	e0bffb17 	ldw	r2,-20(fp)
    47bc:	e0fffa17 	ldw	r3,-24(fp)
    47c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    47c4:	e0bffa17 	ldw	r2,-24(fp)
    47c8:	10c00017 	ldw	r3,0(r2)
    47cc:	e0bffb17 	ldw	r2,-20(fp)
    47d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    47d4:	e0bffa17 	ldw	r2,-24(fp)
    47d8:	10800017 	ldw	r2,0(r2)
    47dc:	e0fffb17 	ldw	r3,-20(fp)
    47e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    47e4:	e0bffa17 	ldw	r2,-24(fp)
    47e8:	e0fffb17 	ldw	r3,-20(fp)
    47ec:	10c00015 	stw	r3,0(r2)
    47f0:	e0bff817 	ldw	r2,-32(fp)
    47f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    47f8:	e0bff717 	ldw	r2,-36(fp)
    47fc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    4800:	0005883a 	mov	r2,zero
    4804:	00000306 	br	4814 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    4808:	00bffa84 	movi	r2,-22
    480c:	00000106 	br	4814 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    4810:	00bfde84 	movi	r2,-134
  }
}
    4814:	e037883a 	mov	sp,fp
    4818:	df000017 	ldw	fp,0(sp)
    481c:	dec00104 	addi	sp,sp,4
    4820:	f800283a 	ret

00004824 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4824:	deffff04 	addi	sp,sp,-4
    4828:	df000015 	stw	fp,0(sp)
    482c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4830:	0001883a 	nop
    4834:	e037883a 	mov	sp,fp
    4838:	df000017 	ldw	fp,0(sp)
    483c:	dec00104 	addi	sp,sp,4
    4840:	f800283a 	ret

00004844 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4844:	defffe04 	addi	sp,sp,-8
    4848:	dfc00115 	stw	ra,4(sp)
    484c:	df000015 	stw	fp,0(sp)
    4850:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4854:	d0a00917 	ldw	r2,-32732(gp)
    4858:	10000326 	beq	r2,zero,4868 <alt_get_errno+0x24>
    485c:	d0a00917 	ldw	r2,-32732(gp)
    4860:	103ee83a 	callr	r2
    4864:	00000106 	br	486c <alt_get_errno+0x28>
    4868:	d0a6ac04 	addi	r2,gp,-25936
}
    486c:	e037883a 	mov	sp,fp
    4870:	dfc00117 	ldw	ra,4(sp)
    4874:	df000017 	ldw	fp,0(sp)
    4878:	dec00204 	addi	sp,sp,8
    487c:	f800283a 	ret

00004880 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    4880:	defffa04 	addi	sp,sp,-24
    4884:	dfc00515 	stw	ra,20(sp)
    4888:	df000415 	stw	fp,16(sp)
    488c:	df000404 	addi	fp,sp,16
    4890:	e13ffe15 	stw	r4,-8(fp)
    4894:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4898:	e0bffe17 	ldw	r2,-8(fp)
    489c:	10000326 	beq	r2,zero,48ac <alt_dev_llist_insert+0x2c>
    48a0:	e0bffe17 	ldw	r2,-8(fp)
    48a4:	10800217 	ldw	r2,8(r2)
    48a8:	1000061e 	bne	r2,zero,48c4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    48ac:	00048440 	call	4844 <alt_get_errno>
    48b0:	1007883a 	mov	r3,r2
    48b4:	00800584 	movi	r2,22
    48b8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    48bc:	00bffa84 	movi	r2,-22
    48c0:	00001306 	br	4910 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    48c4:	e0bffe17 	ldw	r2,-8(fp)
    48c8:	e0ffff17 	ldw	r3,-4(fp)
    48cc:	e0fffc15 	stw	r3,-16(fp)
    48d0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    48d4:	e0bffd17 	ldw	r2,-12(fp)
    48d8:	e0fffc17 	ldw	r3,-16(fp)
    48dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    48e0:	e0bffc17 	ldw	r2,-16(fp)
    48e4:	10c00017 	ldw	r3,0(r2)
    48e8:	e0bffd17 	ldw	r2,-12(fp)
    48ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    48f0:	e0bffc17 	ldw	r2,-16(fp)
    48f4:	10800017 	ldw	r2,0(r2)
    48f8:	e0fffd17 	ldw	r3,-12(fp)
    48fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    4900:	e0bffc17 	ldw	r2,-16(fp)
    4904:	e0fffd17 	ldw	r3,-12(fp)
    4908:	10c00015 	stw	r3,0(r2)

  return 0;  
    490c:	0005883a 	mov	r2,zero
}
    4910:	e037883a 	mov	sp,fp
    4914:	dfc00117 	ldw	ra,4(sp)
    4918:	df000017 	ldw	fp,0(sp)
    491c:	dec00204 	addi	sp,sp,8
    4920:	f800283a 	ret

00004924 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4924:	deffff04 	addi	sp,sp,-4
    4928:	df000015 	stw	fp,0(sp)
    492c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    4930:	0001883a 	nop
    4934:	e037883a 	mov	sp,fp
    4938:	df000017 	ldw	fp,0(sp)
    493c:	dec00104 	addi	sp,sp,4
    4940:	f800283a 	ret

00004944 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4944:	defff904 	addi	sp,sp,-28
    4948:	dfc00615 	stw	ra,24(sp)
    494c:	df000515 	stw	fp,20(sp)
    4950:	df000504 	addi	fp,sp,20
    4954:	e13ffc15 	stw	r4,-16(fp)
    4958:	e17ffd15 	stw	r5,-12(fp)
    495c:	e1bffe15 	stw	r6,-8(fp)
    4960:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    4964:	e0800217 	ldw	r2,8(fp)
    4968:	d8800015 	stw	r2,0(sp)
    496c:	e1ffff17 	ldw	r7,-4(fp)
    4970:	e1bffe17 	ldw	r6,-8(fp)
    4974:	e17ffd17 	ldw	r5,-12(fp)
    4978:	e13ffc17 	ldw	r4,-16(fp)
    497c:	0004af40 	call	4af4 <alt_iic_isr_register>
}  
    4980:	e037883a 	mov	sp,fp
    4984:	dfc00117 	ldw	ra,4(sp)
    4988:	df000017 	ldw	fp,0(sp)
    498c:	dec00204 	addi	sp,sp,8
    4990:	f800283a 	ret

00004994 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    4994:	defff904 	addi	sp,sp,-28
    4998:	df000615 	stw	fp,24(sp)
    499c:	df000604 	addi	fp,sp,24
    49a0:	e13ffe15 	stw	r4,-8(fp)
    49a4:	e17fff15 	stw	r5,-4(fp)
    49a8:	e0bfff17 	ldw	r2,-4(fp)
    49ac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    49b0:	0005303a 	rdctl	r2,status
    49b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    49b8:	e0fffb17 	ldw	r3,-20(fp)
    49bc:	00bfff84 	movi	r2,-2
    49c0:	1884703a 	and	r2,r3,r2
    49c4:	1001703a 	wrctl	status,r2
  
  return context;
    49c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    49cc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    49d0:	00c00044 	movi	r3,1
    49d4:	e0bffa17 	ldw	r2,-24(fp)
    49d8:	1884983a 	sll	r2,r3,r2
    49dc:	1007883a 	mov	r3,r2
    49e0:	d0a6b017 	ldw	r2,-25920(gp)
    49e4:	1884b03a 	or	r2,r3,r2
    49e8:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    49ec:	d0a6b017 	ldw	r2,-25920(gp)
    49f0:	100170fa 	wrctl	ienable,r2
    49f4:	e0bffc17 	ldw	r2,-16(fp)
    49f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    49fc:	e0bffd17 	ldw	r2,-12(fp)
    4a00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4a04:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    4a08:	0001883a 	nop
}
    4a0c:	e037883a 	mov	sp,fp
    4a10:	df000017 	ldw	fp,0(sp)
    4a14:	dec00104 	addi	sp,sp,4
    4a18:	f800283a 	ret

00004a1c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    4a1c:	defff904 	addi	sp,sp,-28
    4a20:	df000615 	stw	fp,24(sp)
    4a24:	df000604 	addi	fp,sp,24
    4a28:	e13ffe15 	stw	r4,-8(fp)
    4a2c:	e17fff15 	stw	r5,-4(fp)
    4a30:	e0bfff17 	ldw	r2,-4(fp)
    4a34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a38:	0005303a 	rdctl	r2,status
    4a3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a40:	e0fffb17 	ldw	r3,-20(fp)
    4a44:	00bfff84 	movi	r2,-2
    4a48:	1884703a 	and	r2,r3,r2
    4a4c:	1001703a 	wrctl	status,r2
  
  return context;
    4a50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4a54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    4a58:	00c00044 	movi	r3,1
    4a5c:	e0bffa17 	ldw	r2,-24(fp)
    4a60:	1884983a 	sll	r2,r3,r2
    4a64:	0084303a 	nor	r2,zero,r2
    4a68:	1007883a 	mov	r3,r2
    4a6c:	d0a6b017 	ldw	r2,-25920(gp)
    4a70:	1884703a 	and	r2,r3,r2
    4a74:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4a78:	d0a6b017 	ldw	r2,-25920(gp)
    4a7c:	100170fa 	wrctl	ienable,r2
    4a80:	e0bffc17 	ldw	r2,-16(fp)
    4a84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4a88:	e0bffd17 	ldw	r2,-12(fp)
    4a8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4a90:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    4a94:	0001883a 	nop
}
    4a98:	e037883a 	mov	sp,fp
    4a9c:	df000017 	ldw	fp,0(sp)
    4aa0:	dec00104 	addi	sp,sp,4
    4aa4:	f800283a 	ret

00004aa8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    4aa8:	defffc04 	addi	sp,sp,-16
    4aac:	df000315 	stw	fp,12(sp)
    4ab0:	df000304 	addi	fp,sp,12
    4ab4:	e13ffe15 	stw	r4,-8(fp)
    4ab8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    4abc:	000530fa 	rdctl	r2,ienable
    4ac0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    4ac4:	00c00044 	movi	r3,1
    4ac8:	e0bfff17 	ldw	r2,-4(fp)
    4acc:	1884983a 	sll	r2,r3,r2
    4ad0:	1007883a 	mov	r3,r2
    4ad4:	e0bffd17 	ldw	r2,-12(fp)
    4ad8:	1884703a 	and	r2,r3,r2
    4adc:	1004c03a 	cmpne	r2,r2,zero
    4ae0:	10803fcc 	andi	r2,r2,255
}
    4ae4:	e037883a 	mov	sp,fp
    4ae8:	df000017 	ldw	fp,0(sp)
    4aec:	dec00104 	addi	sp,sp,4
    4af0:	f800283a 	ret

00004af4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4af4:	defff504 	addi	sp,sp,-44
    4af8:	dfc00a15 	stw	ra,40(sp)
    4afc:	df000915 	stw	fp,36(sp)
    4b00:	df000904 	addi	fp,sp,36
    4b04:	e13ffc15 	stw	r4,-16(fp)
    4b08:	e17ffd15 	stw	r5,-12(fp)
    4b0c:	e1bffe15 	stw	r6,-8(fp)
    4b10:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    4b14:	00bffa84 	movi	r2,-22
    4b18:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    4b1c:	e0bffd17 	ldw	r2,-12(fp)
    4b20:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4b24:	e0bff817 	ldw	r2,-32(fp)
    4b28:	10800808 	cmpgei	r2,r2,32
    4b2c:	1000271e 	bne	r2,zero,4bcc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4b30:	0005303a 	rdctl	r2,status
    4b34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b38:	e0fffb17 	ldw	r3,-20(fp)
    4b3c:	00bfff84 	movi	r2,-2
    4b40:	1884703a 	and	r2,r3,r2
    4b44:	1001703a 	wrctl	status,r2
  
  return context;
    4b48:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    4b4c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    4b50:	00800074 	movhi	r2,1
    4b54:	10a32604 	addi	r2,r2,-29544
    4b58:	e0fff817 	ldw	r3,-32(fp)
    4b5c:	180690fa 	slli	r3,r3,3
    4b60:	10c5883a 	add	r2,r2,r3
    4b64:	e0fffe17 	ldw	r3,-8(fp)
    4b68:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    4b6c:	00800074 	movhi	r2,1
    4b70:	10a32604 	addi	r2,r2,-29544
    4b74:	e0fff817 	ldw	r3,-32(fp)
    4b78:	180690fa 	slli	r3,r3,3
    4b7c:	10c5883a 	add	r2,r2,r3
    4b80:	10800104 	addi	r2,r2,4
    4b84:	e0ffff17 	ldw	r3,-4(fp)
    4b88:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    4b8c:	e0bffe17 	ldw	r2,-8(fp)
    4b90:	10000526 	beq	r2,zero,4ba8 <alt_iic_isr_register+0xb4>
    4b94:	e0bff817 	ldw	r2,-32(fp)
    4b98:	100b883a 	mov	r5,r2
    4b9c:	e13ffc17 	ldw	r4,-16(fp)
    4ba0:	00049940 	call	4994 <alt_ic_irq_enable>
    4ba4:	00000406 	br	4bb8 <alt_iic_isr_register+0xc4>
    4ba8:	e0bff817 	ldw	r2,-32(fp)
    4bac:	100b883a 	mov	r5,r2
    4bb0:	e13ffc17 	ldw	r4,-16(fp)
    4bb4:	0004a1c0 	call	4a1c <alt_ic_irq_disable>
    4bb8:	e0bff715 	stw	r2,-36(fp)
    4bbc:	e0bffa17 	ldw	r2,-24(fp)
    4bc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4bc4:	e0bff917 	ldw	r2,-28(fp)
    4bc8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    4bcc:	e0bff717 	ldw	r2,-36(fp)
}
    4bd0:	e037883a 	mov	sp,fp
    4bd4:	dfc00117 	ldw	ra,4(sp)
    4bd8:	df000017 	ldw	fp,0(sp)
    4bdc:	dec00204 	addi	sp,sp,8
    4be0:	f800283a 	ret

00004be4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    4be4:	defff804 	addi	sp,sp,-32
    4be8:	dfc00715 	stw	ra,28(sp)
    4bec:	df000615 	stw	fp,24(sp)
    4bf0:	dc000515 	stw	r16,20(sp)
    4bf4:	df000604 	addi	fp,sp,24
    4bf8:	e13ffb15 	stw	r4,-20(fp)
    4bfc:	e17ffc15 	stw	r5,-16(fp)
    4c00:	e1bffd15 	stw	r6,-12(fp)
    4c04:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    4c08:	e1bffe17 	ldw	r6,-8(fp)
    4c0c:	e17ffd17 	ldw	r5,-12(fp)
    4c10:	e13ffc17 	ldw	r4,-16(fp)
    4c14:	0004e6c0 	call	4e6c <open>
    4c18:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    4c1c:	e0bffa17 	ldw	r2,-24(fp)
    4c20:	10002216 	blt	r2,zero,4cac <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    4c24:	04000034 	movhi	r16,0
    4c28:	8417f004 	addi	r16,r16,24512
    4c2c:	e0bffa17 	ldw	r2,-24(fp)
    4c30:	01400304 	movi	r5,12
    4c34:	1009883a 	mov	r4,r2
    4c38:	00030fc0 	call	30fc <__mulsi3>
    4c3c:	8085883a 	add	r2,r16,r2
    4c40:	10c00017 	ldw	r3,0(r2)
    4c44:	e0bffb17 	ldw	r2,-20(fp)
    4c48:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    4c4c:	04000034 	movhi	r16,0
    4c50:	8417f004 	addi	r16,r16,24512
    4c54:	e0bffa17 	ldw	r2,-24(fp)
    4c58:	01400304 	movi	r5,12
    4c5c:	1009883a 	mov	r4,r2
    4c60:	00030fc0 	call	30fc <__mulsi3>
    4c64:	8085883a 	add	r2,r16,r2
    4c68:	10800104 	addi	r2,r2,4
    4c6c:	10c00017 	ldw	r3,0(r2)
    4c70:	e0bffb17 	ldw	r2,-20(fp)
    4c74:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    4c78:	04000034 	movhi	r16,0
    4c7c:	8417f004 	addi	r16,r16,24512
    4c80:	e0bffa17 	ldw	r2,-24(fp)
    4c84:	01400304 	movi	r5,12
    4c88:	1009883a 	mov	r4,r2
    4c8c:	00030fc0 	call	30fc <__mulsi3>
    4c90:	8085883a 	add	r2,r16,r2
    4c94:	10800204 	addi	r2,r2,8
    4c98:	10c00017 	ldw	r3,0(r2)
    4c9c:	e0bffb17 	ldw	r2,-20(fp)
    4ca0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    4ca4:	e13ffa17 	ldw	r4,-24(fp)
    4ca8:	00038600 	call	3860 <alt_release_fd>
  }
} 
    4cac:	0001883a 	nop
    4cb0:	e6ffff04 	addi	sp,fp,-4
    4cb4:	dfc00217 	ldw	ra,8(sp)
    4cb8:	df000117 	ldw	fp,4(sp)
    4cbc:	dc000017 	ldw	r16,0(sp)
    4cc0:	dec00304 	addi	sp,sp,12
    4cc4:	f800283a 	ret

00004cc8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    4cc8:	defffb04 	addi	sp,sp,-20
    4ccc:	dfc00415 	stw	ra,16(sp)
    4cd0:	df000315 	stw	fp,12(sp)
    4cd4:	df000304 	addi	fp,sp,12
    4cd8:	e13ffd15 	stw	r4,-12(fp)
    4cdc:	e17ffe15 	stw	r5,-8(fp)
    4ce0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4ce4:	01c07fc4 	movi	r7,511
    4ce8:	01800044 	movi	r6,1
    4cec:	e17ffd17 	ldw	r5,-12(fp)
    4cf0:	01000034 	movhi	r4,0
    4cf4:	2117f304 	addi	r4,r4,24524
    4cf8:	0004be40 	call	4be4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    4cfc:	01c07fc4 	movi	r7,511
    4d00:	000d883a 	mov	r6,zero
    4d04:	e17ffe17 	ldw	r5,-8(fp)
    4d08:	01000034 	movhi	r4,0
    4d0c:	2117f004 	addi	r4,r4,24512
    4d10:	0004be40 	call	4be4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4d14:	01c07fc4 	movi	r7,511
    4d18:	01800044 	movi	r6,1
    4d1c:	e17fff17 	ldw	r5,-4(fp)
    4d20:	01000034 	movhi	r4,0
    4d24:	2117f604 	addi	r4,r4,24536
    4d28:	0004be40 	call	4be4 <alt_open_fd>
}  
    4d2c:	0001883a 	nop
    4d30:	e037883a 	mov	sp,fp
    4d34:	dfc00117 	ldw	ra,4(sp)
    4d38:	df000017 	ldw	fp,0(sp)
    4d3c:	dec00204 	addi	sp,sp,8
    4d40:	f800283a 	ret

00004d44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4d44:	defffe04 	addi	sp,sp,-8
    4d48:	dfc00115 	stw	ra,4(sp)
    4d4c:	df000015 	stw	fp,0(sp)
    4d50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4d54:	d0a00917 	ldw	r2,-32732(gp)
    4d58:	10000326 	beq	r2,zero,4d68 <alt_get_errno+0x24>
    4d5c:	d0a00917 	ldw	r2,-32732(gp)
    4d60:	103ee83a 	callr	r2
    4d64:	00000106 	br	4d6c <alt_get_errno+0x28>
    4d68:	d0a6ac04 	addi	r2,gp,-25936
}
    4d6c:	e037883a 	mov	sp,fp
    4d70:	dfc00117 	ldw	ra,4(sp)
    4d74:	df000017 	ldw	fp,0(sp)
    4d78:	dec00204 	addi	sp,sp,8
    4d7c:	f800283a 	ret

00004d80 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    4d80:	defffb04 	addi	sp,sp,-20
    4d84:	dfc00415 	stw	ra,16(sp)
    4d88:	df000315 	stw	fp,12(sp)
    4d8c:	dc000215 	stw	r16,8(sp)
    4d90:	df000304 	addi	fp,sp,12
    4d94:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    4d98:	e0bffe17 	ldw	r2,-8(fp)
    4d9c:	10800217 	ldw	r2,8(r2)
    4da0:	10d00034 	orhi	r3,r2,16384
    4da4:	e0bffe17 	ldw	r2,-8(fp)
    4da8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4dac:	e03ffd15 	stw	zero,-12(fp)
    4db0:	00002306 	br	4e40 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4db4:	04000034 	movhi	r16,0
    4db8:	8417f004 	addi	r16,r16,24512
    4dbc:	e0bffd17 	ldw	r2,-12(fp)
    4dc0:	01400304 	movi	r5,12
    4dc4:	1009883a 	mov	r4,r2
    4dc8:	00030fc0 	call	30fc <__mulsi3>
    4dcc:	8085883a 	add	r2,r16,r2
    4dd0:	10c00017 	ldw	r3,0(r2)
    4dd4:	e0bffe17 	ldw	r2,-8(fp)
    4dd8:	10800017 	ldw	r2,0(r2)
    4ddc:	1880151e 	bne	r3,r2,4e34 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4de0:	04000034 	movhi	r16,0
    4de4:	8417f004 	addi	r16,r16,24512
    4de8:	e0bffd17 	ldw	r2,-12(fp)
    4dec:	01400304 	movi	r5,12
    4df0:	1009883a 	mov	r4,r2
    4df4:	00030fc0 	call	30fc <__mulsi3>
    4df8:	8085883a 	add	r2,r16,r2
    4dfc:	10800204 	addi	r2,r2,8
    4e00:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4e04:	10000b0e 	bge	r2,zero,4e34 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    4e08:	01400304 	movi	r5,12
    4e0c:	e13ffd17 	ldw	r4,-12(fp)
    4e10:	00030fc0 	call	30fc <__mulsi3>
    4e14:	1007883a 	mov	r3,r2
    4e18:	00800034 	movhi	r2,0
    4e1c:	1097f004 	addi	r2,r2,24512
    4e20:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4e24:	e0bffe17 	ldw	r2,-8(fp)
    4e28:	18800226 	beq	r3,r2,4e34 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    4e2c:	00bffcc4 	movi	r2,-13
    4e30:	00000806 	br	4e54 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4e34:	e0bffd17 	ldw	r2,-12(fp)
    4e38:	10800044 	addi	r2,r2,1
    4e3c:	e0bffd15 	stw	r2,-12(fp)
    4e40:	d0a00817 	ldw	r2,-32736(gp)
    4e44:	1007883a 	mov	r3,r2
    4e48:	e0bffd17 	ldw	r2,-12(fp)
    4e4c:	18bfd92e 	bgeu	r3,r2,4db4 <__alt_data_end+0xfffe4db4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    4e50:	0005883a 	mov	r2,zero
}
    4e54:	e6ffff04 	addi	sp,fp,-4
    4e58:	dfc00217 	ldw	ra,8(sp)
    4e5c:	df000117 	ldw	fp,4(sp)
    4e60:	dc000017 	ldw	r16,0(sp)
    4e64:	dec00304 	addi	sp,sp,12
    4e68:	f800283a 	ret

00004e6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    4e6c:	defff604 	addi	sp,sp,-40
    4e70:	dfc00915 	stw	ra,36(sp)
    4e74:	df000815 	stw	fp,32(sp)
    4e78:	df000804 	addi	fp,sp,32
    4e7c:	e13ffd15 	stw	r4,-12(fp)
    4e80:	e17ffe15 	stw	r5,-8(fp)
    4e84:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    4e88:	00bfffc4 	movi	r2,-1
    4e8c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    4e90:	00bffb44 	movi	r2,-19
    4e94:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    4e98:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    4e9c:	d1600604 	addi	r5,gp,-32744
    4ea0:	e13ffd17 	ldw	r4,-12(fp)
    4ea4:	00051900 	call	5190 <alt_find_dev>
    4ea8:	e0bff815 	stw	r2,-32(fp)
    4eac:	e0bff817 	ldw	r2,-32(fp)
    4eb0:	1000051e 	bne	r2,zero,4ec8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    4eb4:	e13ffd17 	ldw	r4,-12(fp)
    4eb8:	00052200 	call	5220 <alt_find_file>
    4ebc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    4ec0:	00800044 	movi	r2,1
    4ec4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    4ec8:	e0bff817 	ldw	r2,-32(fp)
    4ecc:	10002b26 	beq	r2,zero,4f7c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    4ed0:	e13ff817 	ldw	r4,-32(fp)
    4ed4:	00053280 	call	5328 <alt_get_fd>
    4ed8:	e0bff915 	stw	r2,-28(fp)
    4edc:	e0bff917 	ldw	r2,-28(fp)
    4ee0:	1000030e 	bge	r2,zero,4ef0 <open+0x84>
    {
      status = index;
    4ee4:	e0bff917 	ldw	r2,-28(fp)
    4ee8:	e0bffa15 	stw	r2,-24(fp)
    4eec:	00002506 	br	4f84 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    4ef0:	01400304 	movi	r5,12
    4ef4:	e13ff917 	ldw	r4,-28(fp)
    4ef8:	00030fc0 	call	30fc <__mulsi3>
    4efc:	1007883a 	mov	r3,r2
    4f00:	00800034 	movhi	r2,0
    4f04:	1097f004 	addi	r2,r2,24512
    4f08:	1885883a 	add	r2,r3,r2
    4f0c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    4f10:	e0fffe17 	ldw	r3,-8(fp)
    4f14:	00900034 	movhi	r2,16384
    4f18:	10bfffc4 	addi	r2,r2,-1
    4f1c:	1886703a 	and	r3,r3,r2
    4f20:	e0bffc17 	ldw	r2,-16(fp)
    4f24:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4f28:	e0bffb17 	ldw	r2,-20(fp)
    4f2c:	1000051e 	bne	r2,zero,4f44 <open+0xd8>
    4f30:	e13ffc17 	ldw	r4,-16(fp)
    4f34:	0004d800 	call	4d80 <alt_file_locked>
    4f38:	e0bffa15 	stw	r2,-24(fp)
    4f3c:	e0bffa17 	ldw	r2,-24(fp)
    4f40:	10001016 	blt	r2,zero,4f84 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    4f44:	e0bff817 	ldw	r2,-32(fp)
    4f48:	10800317 	ldw	r2,12(r2)
    4f4c:	10000826 	beq	r2,zero,4f70 <open+0x104>
    4f50:	e0bff817 	ldw	r2,-32(fp)
    4f54:	10800317 	ldw	r2,12(r2)
    4f58:	e1ffff17 	ldw	r7,-4(fp)
    4f5c:	e1bffe17 	ldw	r6,-8(fp)
    4f60:	e17ffd17 	ldw	r5,-12(fp)
    4f64:	e13ffc17 	ldw	r4,-16(fp)
    4f68:	103ee83a 	callr	r2
    4f6c:	00000106 	br	4f74 <open+0x108>
    4f70:	0005883a 	mov	r2,zero
    4f74:	e0bffa15 	stw	r2,-24(fp)
    4f78:	00000206 	br	4f84 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    4f7c:	00bffb44 	movi	r2,-19
    4f80:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    4f84:	e0bffa17 	ldw	r2,-24(fp)
    4f88:	1000090e 	bge	r2,zero,4fb0 <open+0x144>
  {
    alt_release_fd (index);  
    4f8c:	e13ff917 	ldw	r4,-28(fp)
    4f90:	00038600 	call	3860 <alt_release_fd>
    ALT_ERRNO = -status;
    4f94:	0004d440 	call	4d44 <alt_get_errno>
    4f98:	1007883a 	mov	r3,r2
    4f9c:	e0bffa17 	ldw	r2,-24(fp)
    4fa0:	0085c83a 	sub	r2,zero,r2
    4fa4:	18800015 	stw	r2,0(r3)
    return -1;
    4fa8:	00bfffc4 	movi	r2,-1
    4fac:	00000106 	br	4fb4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    4fb0:	e0bff917 	ldw	r2,-28(fp)
}
    4fb4:	e037883a 	mov	sp,fp
    4fb8:	dfc00117 	ldw	ra,4(sp)
    4fbc:	df000017 	ldw	fp,0(sp)
    4fc0:	dec00204 	addi	sp,sp,8
    4fc4:	f800283a 	ret

00004fc8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    4fc8:	defffa04 	addi	sp,sp,-24
    4fcc:	df000515 	stw	fp,20(sp)
    4fd0:	df000504 	addi	fp,sp,20
    4fd4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4fd8:	0005303a 	rdctl	r2,status
    4fdc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4fe0:	e0fffc17 	ldw	r3,-16(fp)
    4fe4:	00bfff84 	movi	r2,-2
    4fe8:	1884703a 	and	r2,r3,r2
    4fec:	1001703a 	wrctl	status,r2
  
  return context;
    4ff0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    4ff4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    4ff8:	e0bfff17 	ldw	r2,-4(fp)
    4ffc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    5000:	e0bffd17 	ldw	r2,-12(fp)
    5004:	10800017 	ldw	r2,0(r2)
    5008:	e0fffd17 	ldw	r3,-12(fp)
    500c:	18c00117 	ldw	r3,4(r3)
    5010:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    5014:	e0bffd17 	ldw	r2,-12(fp)
    5018:	10800117 	ldw	r2,4(r2)
    501c:	e0fffd17 	ldw	r3,-12(fp)
    5020:	18c00017 	ldw	r3,0(r3)
    5024:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    5028:	e0bffd17 	ldw	r2,-12(fp)
    502c:	e0fffd17 	ldw	r3,-12(fp)
    5030:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    5034:	e0bffd17 	ldw	r2,-12(fp)
    5038:	e0fffd17 	ldw	r3,-12(fp)
    503c:	10c00015 	stw	r3,0(r2)
    5040:	e0bffb17 	ldw	r2,-20(fp)
    5044:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5048:	e0bffe17 	ldw	r2,-8(fp)
    504c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    5050:	0001883a 	nop
    5054:	e037883a 	mov	sp,fp
    5058:	df000017 	ldw	fp,0(sp)
    505c:	dec00104 	addi	sp,sp,4
    5060:	f800283a 	ret

00005064 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    5064:	defffb04 	addi	sp,sp,-20
    5068:	dfc00415 	stw	ra,16(sp)
    506c:	df000315 	stw	fp,12(sp)
    5070:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    5074:	d0a00c17 	ldw	r2,-32720(gp)
    5078:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    507c:	d0a6b217 	ldw	r2,-25912(gp)
    5080:	10800044 	addi	r2,r2,1
    5084:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5088:	00002e06 	br	5144 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    508c:	e0bffd17 	ldw	r2,-12(fp)
    5090:	10800017 	ldw	r2,0(r2)
    5094:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    5098:	e0bffd17 	ldw	r2,-12(fp)
    509c:	10800403 	ldbu	r2,16(r2)
    50a0:	10803fcc 	andi	r2,r2,255
    50a4:	10000426 	beq	r2,zero,50b8 <alt_tick+0x54>
    50a8:	d0a6b217 	ldw	r2,-25912(gp)
    50ac:	1000021e 	bne	r2,zero,50b8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    50b0:	e0bffd17 	ldw	r2,-12(fp)
    50b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    50b8:	e0bffd17 	ldw	r2,-12(fp)
    50bc:	10800217 	ldw	r2,8(r2)
    50c0:	d0e6b217 	ldw	r3,-25912(gp)
    50c4:	18801d36 	bltu	r3,r2,513c <alt_tick+0xd8>
    50c8:	e0bffd17 	ldw	r2,-12(fp)
    50cc:	10800403 	ldbu	r2,16(r2)
    50d0:	10803fcc 	andi	r2,r2,255
    50d4:	1000191e 	bne	r2,zero,513c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    50d8:	e0bffd17 	ldw	r2,-12(fp)
    50dc:	10800317 	ldw	r2,12(r2)
    50e0:	e0fffd17 	ldw	r3,-12(fp)
    50e4:	18c00517 	ldw	r3,20(r3)
    50e8:	1809883a 	mov	r4,r3
    50ec:	103ee83a 	callr	r2
    50f0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    50f4:	e0bfff17 	ldw	r2,-4(fp)
    50f8:	1000031e 	bne	r2,zero,5108 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    50fc:	e13ffd17 	ldw	r4,-12(fp)
    5100:	0004fc80 	call	4fc8 <alt_alarm_stop>
    5104:	00000d06 	br	513c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    5108:	e0bffd17 	ldw	r2,-12(fp)
    510c:	10c00217 	ldw	r3,8(r2)
    5110:	e0bfff17 	ldw	r2,-4(fp)
    5114:	1887883a 	add	r3,r3,r2
    5118:	e0bffd17 	ldw	r2,-12(fp)
    511c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    5120:	e0bffd17 	ldw	r2,-12(fp)
    5124:	10c00217 	ldw	r3,8(r2)
    5128:	d0a6b217 	ldw	r2,-25912(gp)
    512c:	1880032e 	bgeu	r3,r2,513c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    5130:	e0bffd17 	ldw	r2,-12(fp)
    5134:	00c00044 	movi	r3,1
    5138:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    513c:	e0bffe17 	ldw	r2,-8(fp)
    5140:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5144:	e0fffd17 	ldw	r3,-12(fp)
    5148:	d0a00c04 	addi	r2,gp,-32720
    514c:	18bfcf1e 	bne	r3,r2,508c <__alt_data_end+0xfffe508c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    5150:	0001883a 	nop
}
    5154:	0001883a 	nop
    5158:	e037883a 	mov	sp,fp
    515c:	dfc00117 	ldw	ra,4(sp)
    5160:	df000017 	ldw	fp,0(sp)
    5164:	dec00204 	addi	sp,sp,8
    5168:	f800283a 	ret

0000516c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    516c:	deffff04 	addi	sp,sp,-4
    5170:	df000015 	stw	fp,0(sp)
    5174:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    5178:	000170fa 	wrctl	ienable,zero
}
    517c:	0001883a 	nop
    5180:	e037883a 	mov	sp,fp
    5184:	df000017 	ldw	fp,0(sp)
    5188:	dec00104 	addi	sp,sp,4
    518c:	f800283a 	ret

00005190 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5190:	defffa04 	addi	sp,sp,-24
    5194:	dfc00515 	stw	ra,20(sp)
    5198:	df000415 	stw	fp,16(sp)
    519c:	df000404 	addi	fp,sp,16
    51a0:	e13ffe15 	stw	r4,-8(fp)
    51a4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    51a8:	e0bfff17 	ldw	r2,-4(fp)
    51ac:	10800017 	ldw	r2,0(r2)
    51b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    51b4:	e13ffe17 	ldw	r4,-8(fp)
    51b8:	00003ec0 	call	3ec <strlen>
    51bc:	10800044 	addi	r2,r2,1
    51c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    51c4:	00000d06 	br	51fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    51c8:	e0bffc17 	ldw	r2,-16(fp)
    51cc:	10800217 	ldw	r2,8(r2)
    51d0:	e0fffd17 	ldw	r3,-12(fp)
    51d4:	180d883a 	mov	r6,r3
    51d8:	e17ffe17 	ldw	r5,-8(fp)
    51dc:	1009883a 	mov	r4,r2
    51e0:	00054c00 	call	54c0 <memcmp>
    51e4:	1000021e 	bne	r2,zero,51f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    51e8:	e0bffc17 	ldw	r2,-16(fp)
    51ec:	00000706 	br	520c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    51f0:	e0bffc17 	ldw	r2,-16(fp)
    51f4:	10800017 	ldw	r2,0(r2)
    51f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    51fc:	e0fffc17 	ldw	r3,-16(fp)
    5200:	e0bfff17 	ldw	r2,-4(fp)
    5204:	18bff01e 	bne	r3,r2,51c8 <__alt_data_end+0xfffe51c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5208:	0005883a 	mov	r2,zero
}
    520c:	e037883a 	mov	sp,fp
    5210:	dfc00117 	ldw	ra,4(sp)
    5214:	df000017 	ldw	fp,0(sp)
    5218:	dec00204 	addi	sp,sp,8
    521c:	f800283a 	ret

00005220 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5220:	defffb04 	addi	sp,sp,-20
    5224:	dfc00415 	stw	ra,16(sp)
    5228:	df000315 	stw	fp,12(sp)
    522c:	df000304 	addi	fp,sp,12
    5230:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5234:	d0a00417 	ldw	r2,-32752(gp)
    5238:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    523c:	00003106 	br	5304 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    5240:	e0bffd17 	ldw	r2,-12(fp)
    5244:	10800217 	ldw	r2,8(r2)
    5248:	1009883a 	mov	r4,r2
    524c:	00003ec0 	call	3ec <strlen>
    5250:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    5254:	e0bffd17 	ldw	r2,-12(fp)
    5258:	10c00217 	ldw	r3,8(r2)
    525c:	e0bffe17 	ldw	r2,-8(fp)
    5260:	10bfffc4 	addi	r2,r2,-1
    5264:	1885883a 	add	r2,r3,r2
    5268:	10800003 	ldbu	r2,0(r2)
    526c:	10803fcc 	andi	r2,r2,255
    5270:	1080201c 	xori	r2,r2,128
    5274:	10bfe004 	addi	r2,r2,-128
    5278:	10800bd8 	cmpnei	r2,r2,47
    527c:	1000031e 	bne	r2,zero,528c <alt_find_file+0x6c>
    {
      len -= 1;
    5280:	e0bffe17 	ldw	r2,-8(fp)
    5284:	10bfffc4 	addi	r2,r2,-1
    5288:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    528c:	e0bffe17 	ldw	r2,-8(fp)
    5290:	e0ffff17 	ldw	r3,-4(fp)
    5294:	1885883a 	add	r2,r3,r2
    5298:	10800003 	ldbu	r2,0(r2)
    529c:	10803fcc 	andi	r2,r2,255
    52a0:	1080201c 	xori	r2,r2,128
    52a4:	10bfe004 	addi	r2,r2,-128
    52a8:	10800be0 	cmpeqi	r2,r2,47
    52ac:	1000081e 	bne	r2,zero,52d0 <alt_find_file+0xb0>
    52b0:	e0bffe17 	ldw	r2,-8(fp)
    52b4:	e0ffff17 	ldw	r3,-4(fp)
    52b8:	1885883a 	add	r2,r3,r2
    52bc:	10800003 	ldbu	r2,0(r2)
    52c0:	10803fcc 	andi	r2,r2,255
    52c4:	1080201c 	xori	r2,r2,128
    52c8:	10bfe004 	addi	r2,r2,-128
    52cc:	10000a1e 	bne	r2,zero,52f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    52d0:	e0bffd17 	ldw	r2,-12(fp)
    52d4:	10800217 	ldw	r2,8(r2)
    52d8:	e0fffe17 	ldw	r3,-8(fp)
    52dc:	180d883a 	mov	r6,r3
    52e0:	e17fff17 	ldw	r5,-4(fp)
    52e4:	1009883a 	mov	r4,r2
    52e8:	00054c00 	call	54c0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    52ec:	1000021e 	bne	r2,zero,52f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    52f0:	e0bffd17 	ldw	r2,-12(fp)
    52f4:	00000706 	br	5314 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    52f8:	e0bffd17 	ldw	r2,-12(fp)
    52fc:	10800017 	ldw	r2,0(r2)
    5300:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5304:	e0fffd17 	ldw	r3,-12(fp)
    5308:	d0a00404 	addi	r2,gp,-32752
    530c:	18bfcc1e 	bne	r3,r2,5240 <__alt_data_end+0xfffe5240>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    5310:	0005883a 	mov	r2,zero
}
    5314:	e037883a 	mov	sp,fp
    5318:	dfc00117 	ldw	ra,4(sp)
    531c:	df000017 	ldw	fp,0(sp)
    5320:	dec00204 	addi	sp,sp,8
    5324:	f800283a 	ret

00005328 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    5328:	defffa04 	addi	sp,sp,-24
    532c:	dfc00515 	stw	ra,20(sp)
    5330:	df000415 	stw	fp,16(sp)
    5334:	dc000315 	stw	r16,12(sp)
    5338:	df000404 	addi	fp,sp,16
    533c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    5340:	00bffa04 	movi	r2,-24
    5344:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5348:	e03ffc15 	stw	zero,-16(fp)
    534c:	00001d06 	br	53c4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    5350:	04000034 	movhi	r16,0
    5354:	8417f004 	addi	r16,r16,24512
    5358:	e0bffc17 	ldw	r2,-16(fp)
    535c:	01400304 	movi	r5,12
    5360:	1009883a 	mov	r4,r2
    5364:	00030fc0 	call	30fc <__mulsi3>
    5368:	8085883a 	add	r2,r16,r2
    536c:	10800017 	ldw	r2,0(r2)
    5370:	1000111e 	bne	r2,zero,53b8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    5374:	04000034 	movhi	r16,0
    5378:	8417f004 	addi	r16,r16,24512
    537c:	e0bffc17 	ldw	r2,-16(fp)
    5380:	01400304 	movi	r5,12
    5384:	1009883a 	mov	r4,r2
    5388:	00030fc0 	call	30fc <__mulsi3>
    538c:	8085883a 	add	r2,r16,r2
    5390:	e0fffe17 	ldw	r3,-8(fp)
    5394:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    5398:	d0e00817 	ldw	r3,-32736(gp)
    539c:	e0bffc17 	ldw	r2,-16(fp)
    53a0:	1880020e 	bge	r3,r2,53ac <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    53a4:	e0bffc17 	ldw	r2,-16(fp)
    53a8:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    53ac:	e0bffc17 	ldw	r2,-16(fp)
    53b0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    53b4:	00000606 	br	53d0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    53b8:	e0bffc17 	ldw	r2,-16(fp)
    53bc:	10800044 	addi	r2,r2,1
    53c0:	e0bffc15 	stw	r2,-16(fp)
    53c4:	e0bffc17 	ldw	r2,-16(fp)
    53c8:	10800810 	cmplti	r2,r2,32
    53cc:	103fe01e 	bne	r2,zero,5350 <__alt_data_end+0xfffe5350>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    53d0:	e0bffd17 	ldw	r2,-12(fp)
}
    53d4:	e6ffff04 	addi	sp,fp,-4
    53d8:	dfc00217 	ldw	ra,8(sp)
    53dc:	df000117 	ldw	fp,4(sp)
    53e0:	dc000017 	ldw	r16,0(sp)
    53e4:	dec00304 	addi	sp,sp,12
    53e8:	f800283a 	ret

000053ec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    53ec:	defffe04 	addi	sp,sp,-8
    53f0:	df000115 	stw	fp,4(sp)
    53f4:	df000104 	addi	fp,sp,4
    53f8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    53fc:	e0bfff17 	ldw	r2,-4(fp)
    5400:	10bffe84 	addi	r2,r2,-6
    5404:	10c00428 	cmpgeui	r3,r2,16
    5408:	18001a1e 	bne	r3,zero,5474 <alt_exception_cause_generated_bad_addr+0x88>
    540c:	100690ba 	slli	r3,r2,2
    5410:	00800034 	movhi	r2,0
    5414:	10950904 	addi	r2,r2,21540
    5418:	1885883a 	add	r2,r3,r2
    541c:	10800017 	ldw	r2,0(r2)
    5420:	1000683a 	jmp	r2
    5424:	00005464 	muli	zero,zero,337
    5428:	00005464 	muli	zero,zero,337
    542c:	00005474 	movhi	zero,337
    5430:	00005474 	movhi	zero,337
    5434:	00005474 	movhi	zero,337
    5438:	00005464 	muli	zero,zero,337
    543c:	0000546c 	andhi	zero,zero,337
    5440:	00005474 	movhi	zero,337
    5444:	00005464 	muli	zero,zero,337
    5448:	00005464 	muli	zero,zero,337
    544c:	00005474 	movhi	zero,337
    5450:	00005464 	muli	zero,zero,337
    5454:	0000546c 	andhi	zero,zero,337
    5458:	00005474 	movhi	zero,337
    545c:	00005474 	movhi	zero,337
    5460:	00005464 	muli	zero,zero,337
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    5464:	00800044 	movi	r2,1
    5468:	00000306 	br	5478 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    546c:	0005883a 	mov	r2,zero
    5470:	00000106 	br	5478 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    5474:	0005883a 	mov	r2,zero
  }
}
    5478:	e037883a 	mov	sp,fp
    547c:	df000017 	ldw	fp,0(sp)
    5480:	dec00104 	addi	sp,sp,4
    5484:	f800283a 	ret

00005488 <exit>:
    5488:	defffe04 	addi	sp,sp,-8
    548c:	000b883a 	mov	r5,zero
    5490:	dc000015 	stw	r16,0(sp)
    5494:	dfc00115 	stw	ra,4(sp)
    5498:	2021883a 	mov	r16,r4
    549c:	000553c0 	call	553c <__call_exitprocs>
    54a0:	00800034 	movhi	r2,0
    54a4:	109c6804 	addi	r2,r2,29088
    54a8:	11000017 	ldw	r4,0(r2)
    54ac:	20800f17 	ldw	r2,60(r4)
    54b0:	10000126 	beq	r2,zero,54b8 <exit+0x30>
    54b4:	103ee83a 	callr	r2
    54b8:	8009883a 	mov	r4,r16
    54bc:	00056bc0 	call	56bc <_exit>

000054c0 <memcmp>:
    54c0:	01c000c4 	movi	r7,3
    54c4:	3980192e 	bgeu	r7,r6,552c <memcmp+0x6c>
    54c8:	2144b03a 	or	r2,r4,r5
    54cc:	11c4703a 	and	r2,r2,r7
    54d0:	10000f26 	beq	r2,zero,5510 <memcmp+0x50>
    54d4:	20800003 	ldbu	r2,0(r4)
    54d8:	28c00003 	ldbu	r3,0(r5)
    54dc:	10c0151e 	bne	r2,r3,5534 <memcmp+0x74>
    54e0:	31bfff84 	addi	r6,r6,-2
    54e4:	01ffffc4 	movi	r7,-1
    54e8:	00000406 	br	54fc <memcmp+0x3c>
    54ec:	20800003 	ldbu	r2,0(r4)
    54f0:	28c00003 	ldbu	r3,0(r5)
    54f4:	31bfffc4 	addi	r6,r6,-1
    54f8:	10c00e1e 	bne	r2,r3,5534 <memcmp+0x74>
    54fc:	21000044 	addi	r4,r4,1
    5500:	29400044 	addi	r5,r5,1
    5504:	31fff91e 	bne	r6,r7,54ec <__alt_data_end+0xfffe54ec>
    5508:	0005883a 	mov	r2,zero
    550c:	f800283a 	ret
    5510:	20c00017 	ldw	r3,0(r4)
    5514:	28800017 	ldw	r2,0(r5)
    5518:	18bfee1e 	bne	r3,r2,54d4 <__alt_data_end+0xfffe54d4>
    551c:	31bfff04 	addi	r6,r6,-4
    5520:	21000104 	addi	r4,r4,4
    5524:	29400104 	addi	r5,r5,4
    5528:	39bff936 	bltu	r7,r6,5510 <__alt_data_end+0xfffe5510>
    552c:	303fe91e 	bne	r6,zero,54d4 <__alt_data_end+0xfffe54d4>
    5530:	003ff506 	br	5508 <__alt_data_end+0xfffe5508>
    5534:	10c5c83a 	sub	r2,r2,r3
    5538:	f800283a 	ret

0000553c <__call_exitprocs>:
    553c:	defff504 	addi	sp,sp,-44
    5540:	df000915 	stw	fp,36(sp)
    5544:	dd400615 	stw	r21,24(sp)
    5548:	dc800315 	stw	r18,12(sp)
    554c:	dfc00a15 	stw	ra,40(sp)
    5550:	ddc00815 	stw	r23,32(sp)
    5554:	dd800715 	stw	r22,28(sp)
    5558:	dd000515 	stw	r20,20(sp)
    555c:	dcc00415 	stw	r19,16(sp)
    5560:	dc400215 	stw	r17,8(sp)
    5564:	dc000115 	stw	r16,4(sp)
    5568:	d9000015 	stw	r4,0(sp)
    556c:	2839883a 	mov	fp,r5
    5570:	04800044 	movi	r18,1
    5574:	057fffc4 	movi	r21,-1
    5578:	00800034 	movhi	r2,0
    557c:	109c6804 	addi	r2,r2,29088
    5580:	12000017 	ldw	r8,0(r2)
    5584:	45005217 	ldw	r20,328(r8)
    5588:	44c05204 	addi	r19,r8,328
    558c:	a0001c26 	beq	r20,zero,5600 <__call_exitprocs+0xc4>
    5590:	a0800117 	ldw	r2,4(r20)
    5594:	15ffffc4 	addi	r23,r2,-1
    5598:	b8000d16 	blt	r23,zero,55d0 <__call_exitprocs+0x94>
    559c:	14000044 	addi	r16,r2,1
    55a0:	8421883a 	add	r16,r16,r16
    55a4:	8421883a 	add	r16,r16,r16
    55a8:	84402004 	addi	r17,r16,128
    55ac:	a463883a 	add	r17,r20,r17
    55b0:	a421883a 	add	r16,r20,r16
    55b4:	e0001e26 	beq	fp,zero,5630 <__call_exitprocs+0xf4>
    55b8:	80804017 	ldw	r2,256(r16)
    55bc:	e0801c26 	beq	fp,r2,5630 <__call_exitprocs+0xf4>
    55c0:	bdffffc4 	addi	r23,r23,-1
    55c4:	843fff04 	addi	r16,r16,-4
    55c8:	8c7fff04 	addi	r17,r17,-4
    55cc:	bd7ff91e 	bne	r23,r21,55b4 <__alt_data_end+0xfffe55b4>
    55d0:	00800034 	movhi	r2,0
    55d4:	10800004 	addi	r2,r2,0
    55d8:	10000926 	beq	r2,zero,5600 <__call_exitprocs+0xc4>
    55dc:	a0800117 	ldw	r2,4(r20)
    55e0:	1000301e 	bne	r2,zero,56a4 <__call_exitprocs+0x168>
    55e4:	a0800017 	ldw	r2,0(r20)
    55e8:	10003226 	beq	r2,zero,56b4 <__call_exitprocs+0x178>
    55ec:	a009883a 	mov	r4,r20
    55f0:	98800015 	stw	r2,0(r19)
    55f4:	00000000 	call	0 <__alt_mem_mem>
    55f8:	9d000017 	ldw	r20,0(r19)
    55fc:	a03fe41e 	bne	r20,zero,5590 <__alt_data_end+0xfffe5590>
    5600:	dfc00a17 	ldw	ra,40(sp)
    5604:	df000917 	ldw	fp,36(sp)
    5608:	ddc00817 	ldw	r23,32(sp)
    560c:	dd800717 	ldw	r22,28(sp)
    5610:	dd400617 	ldw	r21,24(sp)
    5614:	dd000517 	ldw	r20,20(sp)
    5618:	dcc00417 	ldw	r19,16(sp)
    561c:	dc800317 	ldw	r18,12(sp)
    5620:	dc400217 	ldw	r17,8(sp)
    5624:	dc000117 	ldw	r16,4(sp)
    5628:	dec00b04 	addi	sp,sp,44
    562c:	f800283a 	ret
    5630:	a0800117 	ldw	r2,4(r20)
    5634:	80c00017 	ldw	r3,0(r16)
    5638:	10bfffc4 	addi	r2,r2,-1
    563c:	15c01426 	beq	r2,r23,5690 <__call_exitprocs+0x154>
    5640:	80000015 	stw	zero,0(r16)
    5644:	183fde26 	beq	r3,zero,55c0 <__alt_data_end+0xfffe55c0>
    5648:	95c8983a 	sll	r4,r18,r23
    564c:	a0806217 	ldw	r2,392(r20)
    5650:	a5800117 	ldw	r22,4(r20)
    5654:	2084703a 	and	r2,r4,r2
    5658:	10000b26 	beq	r2,zero,5688 <__call_exitprocs+0x14c>
    565c:	a0806317 	ldw	r2,396(r20)
    5660:	2088703a 	and	r4,r4,r2
    5664:	20000c1e 	bne	r4,zero,5698 <__call_exitprocs+0x15c>
    5668:	89400017 	ldw	r5,0(r17)
    566c:	d9000017 	ldw	r4,0(sp)
    5670:	183ee83a 	callr	r3
    5674:	a0800117 	ldw	r2,4(r20)
    5678:	15bfbf1e 	bne	r2,r22,5578 <__alt_data_end+0xfffe5578>
    567c:	98800017 	ldw	r2,0(r19)
    5680:	153fcf26 	beq	r2,r20,55c0 <__alt_data_end+0xfffe55c0>
    5684:	003fbc06 	br	5578 <__alt_data_end+0xfffe5578>
    5688:	183ee83a 	callr	r3
    568c:	003ff906 	br	5674 <__alt_data_end+0xfffe5674>
    5690:	a5c00115 	stw	r23,4(r20)
    5694:	003feb06 	br	5644 <__alt_data_end+0xfffe5644>
    5698:	89000017 	ldw	r4,0(r17)
    569c:	183ee83a 	callr	r3
    56a0:	003ff406 	br	5674 <__alt_data_end+0xfffe5674>
    56a4:	a0800017 	ldw	r2,0(r20)
    56a8:	a027883a 	mov	r19,r20
    56ac:	1029883a 	mov	r20,r2
    56b0:	003fb606 	br	558c <__alt_data_end+0xfffe558c>
    56b4:	0005883a 	mov	r2,zero
    56b8:	003ffb06 	br	56a8 <__alt_data_end+0xfffe56a8>

000056bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    56bc:	defffd04 	addi	sp,sp,-12
    56c0:	df000215 	stw	fp,8(sp)
    56c4:	df000204 	addi	fp,sp,8
    56c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    56cc:	0001883a 	nop
    56d0:	e0bfff17 	ldw	r2,-4(fp)
    56d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    56d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    56dc:	10000226 	beq	r2,zero,56e8 <_exit+0x2c>
    ALT_SIM_FAIL();
    56e0:	002af070 	cmpltui	zero,zero,43969
    56e4:	00000106 	br	56ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    56e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    56ec:	003fff06 	br	56ec <__alt_data_end+0xfffe56ec>
